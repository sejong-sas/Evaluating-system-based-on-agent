{
    "repo": "bigscience-workshop/xmtf",
    "branch": "master",
    "files": [
        ".gitignore",
        "LICENSE.md",
        "README.md",
        "create_xp3x.py",
        "plotstables/XMTF_ACL2023_POSTER.pdf",
        "plotstables/XMTF_ACL2023_POSTER.pptx",
        "plotstables/XMTF_ACL2023_PRES.pdf",
        "plotstables/compute_codegen_len.ipynb",
        "plotstables/contamination/language_plot_identify.pdf",
        "plotstables/contamination/meta_roots_1e-1.json",
        "plotstables/contamination/probe_contamination.py",
        "plotstables/countcode.py",
        "plotstables/english_task_generalization.pdf",
        "plotstables/english_task_generalization.svg",
        "plotstables/examples/bloom_code.png",
        "plotstables/examples/bloom_code_example.py",
        "plotstables/examples/bloom_code_light.pdf",
        "plotstables/examples/bloom_code_light.png",
        "plotstables/examples/bloomz_code.png",
        "plotstables/examples/bloomz_code_light.pdf",
        "plotstables/examples/bloomz_code_light.png",
        "plotstables/examples/coref_japanese.png",
        "plotstables/examples/exp_one.pdf",
        "plotstables/examples/exp_sky_blue.png",
        "plotstables/examples/exp_sky_blue_widget.png",
        "plotstables/examples/exp_two.pdf",
        "plotstables/examples/fable_hindi.pdf",
        "plotstables/examples/fable_spanish.pdf",
        "plotstables/examples/fable_spanish_widget.png",
        "plotstables/examples/generations.drawio",
        "plotstables/examples/language_plot_identify.pdf",
        "plotstables/examples/query_one.pdf",
        "plotstables/examples/query_two.pdf",
        "plotstables/examples/sent_one.pdf",
        "plotstables/examples/sent_two.pdf",
        "plotstables/examples/sent_zh.png",
        "plotstables/examples/translation_tamil_viet.png",
        "plotstables/figure_notebooks/allres.ipynb",
        "plotstables/figure_notebooks/bar.ipynb",
        "plotstables/figure_notebooks/contamination.ipynb",
        "plotstables/figure_notebooks/generalization.ipynb",
        "plotstables/figure_notebooks/multilingualprompting.ipynb",
        "plotstables/figure_notebooks/pretrainingsizes.ipynb",
        "plotstables/figure_notebooks/prompts.ipynb",
        "plotstables/figure_notebooks/scale.ipynb",
        "plotstables/figure_notebooks/validation.ipynb",
        "plotstables/figure_notebooks/validation_table.ipynb",
        "plotstables/figure_notebooks/xp3_languages.ipynb",
        "plotstables/lang_generalization.pdf",
        "plotstables/lang_generalization.png",
        "plotstables/lang_generalization.svg",
        "plotstables/levenshtein.py",
        "plotstables/paperqr.png",
        "plotstables/pretraining_sizes.pdf",
        "plotstables/pretraining_sizes.png",
        "plotstables/pretraining_sizes.svg",
        "plotstables/roots_xp3_languages_bloom_paper.pdf",
        "plotstables/scale.pdf",
        "plotstables/scale.png",
        "plotstables/scale.svg",
        "plotstables/task_generalization.pdf",
        "plotstables/task_generalization_bar.pdf",
        "plotstables/task_generalization_bar.png",
        "plotstables/task_generalization_bar.svg",
        "plotstables/task_generalization_bloom_paper.pdf",
        "plotstables/validation.pdf",
        "plotstables/validation.png",
        "plotstables/validation.svg",
        "plotstables/xp3_languages.pdf",
        "plotstables/xp3_languages.png",
        "plotstables/xp3_languages.svg",
        "plotstables/xp3_taxonomy.drawio",
        "plotstables/xp3_taxonomy.pdf",
        "plotstables/xp3_variants.pdf",
        "xmtf_banner.png",
        "xp3capmixnewcodelong_train.txt",
        "xp3capmixnewcodelong_validation.txt",
        "xp3capmixnewcodelong_validation_pretr.txt"
    ],
    "license_files": {
        "LICENSE.md": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
    },
    "readme": "# Crosslingual Generalization through Multitask Finetuning\n\n![](xmtf_banner.png)\n\nThis repository provides an overview of all components used for the creation of BLOOMZ & mT0 and xP3 introduced in the paper [Crosslingual Generalization through Multitask Finetuning](https://arxiv.org/abs/2211.01786). [Link to 25min video](https://www.youtube.com/watch?v=LG_N5ITizDo&pp=ygU4Q3Jvc3NsaW5ndWFsIEdlbmVyYWxpemF0aW9uIHRocm91Z2ggTXVsdGl0YXNrIEZpbmV0dW5pbmc%3D) on the paper by Samuel Albanie; [Link to 4min video](https://www.youtube.com/watch?v=DFMH9f2cj3A&t=8s&pp=ygU4Q3Jvc3NsaW5ndWFsIEdlbmVyYWxpemF0aW9uIHRocm91Z2ggTXVsdGl0YXNrIEZpbmV0dW5pbmc%3D) on the paper by Niklas Muennighoff.\n\n<!-- TOC -->\n\n- [Data](#data)\n- [Models](#models)\n- [Create xP3](#create-xp3)\n- [Train models](#train-models)\n    - [BLOOMZ](#bloomz)\n    - [mT0](#mt0)\n- [Evaluate models](#evaluate-models)\n    - [Rank Evaluation](#rank-evaluation)\n    - [Generation Evaluation](#generation-evaluation)\n- [Plots & Tables](#plots--tables)\n    - [Plots](#plots)\n    - [Tables](#tables)\n- [Citation](#citation)\n\n<!-- /TOC -->\n\n## Data\n\n<table>\n  <tr>\n<th>Name</th>\n<th>Explanation</th>\n<th>Example models</th>\n</tr>\n<tr>\n<td><a href=https://huggingface.co/datasets/Muennighoff/xP3x>xP3x</a></t> \n<td>Mixture of 17 tasks in 277 languages with English prompts</td>\n<td>WIP - Join us at Project Aya @<a href=https://cohere.for.ai/>C4AI</a> to help!</td>\n</tr>\n<tr>\n<td><a href=https://huggingface.co/datasets/bigscience/xP3>xP3</a></t> \n<td>Mixture of 13 training tasks in 46 languages with English prompts</td>\n<td><a href=https://huggingface.co/bigscience/bloomz>BLOOMZ</a> & <a href=https://huggingface.co/bigscience/mt0-xxl>mT0-13B</a></td>\n</tr>\n<tr>\n<td><a href=https://huggingface.co/datasets/bigscience/xP3mt>xP3mt</a></t> \n<td>Mixture of 13 training tasks in 46 languages with prompts in 20 languages (machine-translated from English)</td>\n<td><a href=https://huggingface.co/bigscience/bloomz-mt>BLOOMZ-MT</a> & <a href=https://huggingface.co/bigscience/mt0-xxl-mt>mT0-13B-MT</a></td>\n</tr>\n<tr>\n<td><a href=https://huggingface.co/datasets/bigscience/xP3all>xP3all</a></t> \n<td>xP3 + our evaluation datasets adding an additional 3 tasks for a total of 16 tasks in 46 languages with English prompts</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=https://huggingface.co/datasets/bigscience/xP3megds>xP3megds</a></t> \n<td><a href=https://github.com/bigscience-workshop/Megatron-DeepSpeed>Megatron-DeepSpeed</a> processed version of xP3</td>\n<td><a href=https://huggingface.co/bigscience/bloomz>BLOOMZ</a></td>\n</tr>\n<tr>\n<td><a href=https://huggingface.co/datasets/Muennighoff/P3>P3</a></t> \n<td>Repreprocessed version of the English-only <a href=https://huggingface.co/datasets/bigscience/P3>P3</a> with 8 training tasks</td>\n<td><a href=https://huggingface.co/bigscience/bloomz-p3>BLOOMZ-P3</a> & <a href=https://huggingface.co/bigscience/mt0-xxl-p3>mT0-13B-P3</a></td>\n</tr>\n</table>\n\n## Models\n\n<table>\n  <tr>\n<th colspan=\"12\">Multitask finetuned on <a style=\"font-weight:bold\" href=https://huggingface.co/datasets/bigscience/xP3>xP3</a>. Recommended for prompting in English.\n</tr>\n<tr>\n<td>Parameters</td>\n<td>300M</td>\n<td>580M</td>\n<td>1.2B</td>\n<td>3.7B</td>\n<td>13B</td>\n<td>560M</td>\n<td>1.1B</td>\n<td>1.7B</td>\n<td>3B</td>\n<td>7.1B</td>\n<td>176B</td>\n</tr>\n<tr>\n<td>Finetuned Model</td>\n<td><a href=https://huggingface.co/bigscience/mt0-small>mt0-small</a></td>\n<td><a href=https://huggingface.co/bigscience/mt0-base>mt0-base</a></td>\n<td><a href=https://huggingface.co/bigscience/mt0-large>mt0-large</a></td>\n<td><a href=https://huggingface.co/bigscience/mt0-xl>mt0-xl</a></td>\n<td><a href=https://huggingface.co/bigscience/mt0-xxl>mt0-xxl</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-560m>bloomz-560m</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-1b1>bloomz-1b1</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-1b7>bloomz-1b7</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-3b>bloomz-3b</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-7b1>bloomz-7b1</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz>bloomz</a></td>\n</tr>\n</tr>\n  <tr>\n<th colspan=\"12\">Multitask finetuned on <a style=\"font-weight:bold\" href=https://huggingface.co/datasets/bigscience/xP3mt>xP3mt</a>. Recommended for prompting in non-English.</th>\n</tr>\n<tr>\n<td>Finetuned Model</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td><a href=https://huggingface.co/bigscience/mt0-xxl-mt>mt0-xxl-mt</a></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-7b1-mt>bloomz-7b1-mt</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-mt>bloomz-mt</a></td>\n</tr>\n<th colspan=\"12\">Multitask finetuned on <a style=\"font-weight:bold\" href=https://huggingface.co/datasets/Muennighoff/P3>P3</a>. Released for research purposes only. Strictly inferior to above models!</th>\n</tr>\n<tr>\n<td>Finetuned Model</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td><a href=https://huggingface.co/bigscience/mt0-xxl-p3>mt0-xxl-p3</a></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-7b1-p3>bloomz-7b1-p3</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-p3>bloomz-p3</a></td>\n</tr>\n<th colspan=\"12\">Original pretrained checkpoints. Not recommended.</th>\n<tr>\n<td>Pretrained Model</td>\n<td><a href=https://huggingface.co/google/mt5-small>mt5-small</a></td>\n<td><a href=https://huggingface.co/google/mt5-base>mt5-base</a></td>\n<td><a href=https://huggingface.co/google/mt5-large>mt5-large</a></td>\n<td><a href=https://huggingface.co/google/mt5-xl>mt5-xl</a></td>\n<td><a href=https://huggingface.co/google/mt5-xxl>mt5-xxl</a></td>\n<td><a href=https://huggingface.co/bigscience/bloom-560m>bloom-560m</a></td>\n<td><a href=https://huggingface.co/bigscience/bloom-1b1>bloom-1b1</a></td>\n<td><a href=https://huggingface.co/bigscience/bloom-1b7>bloom-1b7</a></td>\n<td><a href=https://huggingface.co/bigscience/bloom-3b>bloom-3b</a></td>\n<td><a href=https://huggingface.co/bigscience/bloom-7b1>bloom-7b1</a></td>\n<td><a href=https://huggingface.co/bigscience/bloom>bloom</a></td>\n</tr>\n</table>\n\n## Create xP3(x)\n\nWe have processed & uploaded [xP3](https://huggingface.co/datasets/bigscience/xP3). If you want to recreate it, follow these steps:\n\n1. Get promptsource: For xP3mt `git clone -b xp3mt https://github.com/Muennighoff/promptsource.git`, for xP3 `git clone -b tr13 https://github.com/Muennighoff/promptsource.git` & install `cd promptsource; pip install -e .`\n2. Get packages `pip install -q datasets iso-639`\n3. Get the [creation script](https://github.com/bigscience-workshop/bigscience/blob/master/data/xp3/prepare_xp3_train.py) & edit it if necessary:\n- For xP3mt, set `USE_ENGLISH_PROMPTS = False` in the beginning\n- For xP3, set `USE_ENGLISH_PROMPTS = True` in the beginning\n4. Run the script, such as via `python prepare_xp3.py` or a [SLURM script](https://github.com/bigscience-workshop/bigscience/blob/master/data/xp3/prepare_xp3_train.slurm)\n\nFor the new extension of xP3, [xP3x](https://huggingface.co/datasets/Muennighoff/xP3x), the process is largely the same except:\n\n1. Install the `xp3x` branch instead i.e. `pip install git+https://github.com/Muennighoff/promptsource.git@xp3x`\n3. The creation script is in this repository & named `create_xp3x.py`.\n\nxP3x is a superset of xP3, so unless you want to reproduce the paper, we recommend always using xP3x (or xP3mt if you want machine-translated prompts).\n\n## Train models\n\n### BLOOMZ\n\n1. Download the pretrained model [checkpoint](https://huggingface.co/bigscience/bloom-optimizer-states), which is of shape PP=12, TP=4, DP=4. If you'd like to reshape the model you will also need to download [the universal checkpoint](https://huggingface.co/bigscience/bloom-optimizer-states/tree/global_step95000_universal). If you want to continue finetuning, you should use [our finetuned checkpoint](https://huggingface.co/bigscience/bloomz-optimizer-states), which is of shape PP=72, TP=1, DP=4.\n2. Setup the training code: `git clone -b t0loading https://github.com/bigscience-workshop/Megatron-DeepSpeed` & follow its [setup guide](https://github.com/bigscience-workshop/Megatron-DeepSpeed/tree/t0loading#get-started-fast) to create an environment with necessary packages.\n3. Download the Megatron-DeepSpeed processed [xP3megds](https://huggingface.co/datasets/bigscience/xP3megds) or repreprocess it for Megatron-DeepSpeed yourself by downloading [xP3](https://huggingface.co/datasets/bigscience/xP3), removing the `merged_{lang}.jsonl` files & preprocess it using the script [here](https://github.com/bigscience-workshop/bigscience/blob/master/data/xp3/xp3_jsonl_to_meg.slurm).\n4. Setup & run the training script: We use SLURM scripts available at [bigscience-workshop/bigscience/train/tr13-mtf](https://github.com/bigscience-workshop/bigscience/tree/master/train/tr13-mtf) and referred to as `xp3capmixnewcodelonglossseq`. E.g. [this is the script launched to train bloomz](https://github.com/bigscience-workshop/bigscience/blob/master/train/tr13-mtf/tr13-176B-mtf-xp3capmixnewcodelonglossseq.slurm). Important parts of the script to modify are:\n- `#SBATCH` variables, such as nodes, gpus, time, etc. - Our SLURM guide is [here](https://github.com/bigscience-workshop/bigscience/tree/master/jz/slurm#slurm-how-to)\n- `source $six_ALL_CCFRWORK/start-tr13f-6B3-ml-t0` to point to your own conda environment setup via Megatron-DeepSpeed\n- PATH environment variables, notably\n    - `TRAIN_DATA_PATH` & `VALID_DATA_PATH`, which point to files pointing to your processed training and validation data. We provide our files in this repository (`xp3capmixnewcodelong_train.txt` & `xp3capmixnewcodelong_validation.txt`), but you will likely want to change the paths inside. The percentages per language are based on how much each language makes up in xP3 with code being slightly upsampled.\n- PP_SIZE=72, TP_SIZE=1 & BATCH SIZE & co specifying the layout. This will depend on the hardware available to you. If you change, you may have to reshape the model. For reshaping you need to use the universal checkpoint and use the `--universal` flag in the script. We recommend saving a new checkpoint right after & then continuing training without `--universal`, which will be faster.\n- If you want to restart from a saved checkpoint (e.g. after training a few steps like above), make sure to remove the `--no-load-optim` & `--reset-progress` flags\n- After training, you can convert the checkpoint to transformers format using the script [here](https://github.com/huggingface/transformers/blob/ee8e80a060d65ab349743ffcb5842365eb0e5606/src/transformers/models/bloom/convert_bloom_original_checkpoint_to_pytorch.py)\n\nHelpful resources:\n- [Blog post](https://huggingface.co/blog/bloom-megatron-deepspeed)\n- BLOOM community tab, such as [here](https://huggingface.co/bigscience/bloom/discussions/46)\n\n### mT0\n\nFollow the finetuning instructions [here](https://github.com/google-research/t5x/blob/main/docs/usage/finetune.md) making sure to use pretrained mT5 models & the xP3 dataset.\n\nHelpful resources:\n- [T5X paper](https://arxiv.org/abs/2203.17189)\n\n## Evaluate models\n\nEvaluation results are all available in this repository: https://huggingface.co/datasets/bigscience/evaluation-results under the respective models.\nBelow we explain how to run evaluation.\n\n### Rank Evaluation \n\nWe evaluate the models on Rank Evaluation on [XCOPA](https://huggingface.co/datasets/xcopa), [XNLI](https://huggingface.co/datasets/xnli), [XStoryCloze](https://huggingface.co/datasets/Muennighoff/xstory_cloze) & [XWinograd](https://huggingface.co/datasets/Muennighoff/xwinograd):\n\n1. Get promptsource fork: `git clone -b xp3mt https://github.com/Muennighoff/promptsource.git` & `cd promptsource; pip install -e .`\n2. Get t-zero fork: `git clone -b muennighoff/upgrdps https://github.com/Muennighoff/t-zero.git` & `cd t-zero; pip install -e .`\n3. Download model & run evaluation script, for example for [bloomz](https://github.com/bigscience-workshop/bigscience/blob/master/evaluation/results/tr13/tzeroeval/evaluate_t0_176b.slurm).\n\n### Generation Evaluation\n\nWe evaluate generation on translation & summarization during training for validation:\n\n1. Get promptsource fork: `git clone -b xp3mt https://github.com/Muennighoff/promptsource` & `cd promptsource; pip install -e .`\n2. Get [bigscience-workshop/lm-evaluation-harness](https://github.com/bigscience-workshop/lm-evaluation-harness): `git clone https://github.com/bigscience-workshop/lm-evaluation-harness`. The script for the 7.1B model, for example, is [here](https://github.com/bigscience-workshop/bigscience/blob/master/evaluation/results/tr13/lmeval/run_generation_7b1.slurm).\n\nWe also evaluate code generation on [HumanEval](https://huggingface.co/datasets/openai_humaneval):\n\n1. Get code evaluation code `git clone https://github.com/loubnabnl/bloom-code-evaluation` & go through its setup.\n2. Set `prepend_eos` to `False` in `code_eval.py` at `complete_code(model, tokenizer, prompt, num_completions=1, prepend_eos=True, **gen_kwargs)` i.e. `complete_code(model, tokenizer, prompt, num_completions=1, prepend_eos=False, **gen_kwargs)`.\n3. Download model & run evaluation script swapping out MODEL_CKPT for your path, for example for bloomz use [this](https://github.com/loubnabnl/bloom-code-evaluation/blob/master/generate_code_bloom.slurm).\n\n\n## Plots & Tables\n\n### Plots\n\n- Figure 1: `plotstables/xp3_taxonomy.drawio` & `plotstables/xp3_taxonomy.pdf`\n- Figure 2: `plotstables/xp3_languages.ipynb` & [colab](https://colab.research.google.com/drive/1yRDXktu030DnipFBj6-dwOGNVIdgktA9?usp=sharing)\n- Figure 3: `plotstables/xp3_variants.pdf` & [drawings](https://docs.google.com/drawings/d/1wSt_X0olUFcOFQ5D1UnMv1V-LKMr3WZIRIgaFypTP24/edit?usp=sharing)\n- Figure 4: `plotstables/xp3_generalization_bar.pdf` & [colab](https://colab.research.google.com/drive/1bz083LuBJi0-pLOqdr4_ycEctn6obYST?usp=sharing)\n- Figure 5: `plotstables/lang_generalization` & [colab](https://colab.research.google.com/drive/1lFFR6_ijR_iWJQnqIW5y5-LuRnRoRTS3?usp=sharing)\n- Figure 6: `plotstables/scale.pdf` & [colab](https://colab.research.google.com/drive/19GcYT5SJFpyu8B0RrewN462w3i461mZ5?usp=sharing)\n- Figure 7: `plotstables/validation.pdf` & [colab](https://colab.research.google.com/drive/1FWW7LMKC9kQNLgCLZXl_dBER5wBSPGMu?usp=sharing)\n- Figure 8: `plotstables/pretraining_sizes.pdf` & [colab](https://colab.research.google.com/drive/1hpW6xEnU56Ed7DmXrREzczGwEeNV8KJ2?usp=sharing)\n- Figure 9: `plotstables/english_task_generalization.pdf` & [colab](https://colab.research.google.com/drive/1lFFR6_ijR_iWJQnqIW5y5-LuRnRoRTS3?usp=sharing)\n- Figure 10: `plotstables/task_generalization.pdf` & [colab](https://colab.research.google.com/drive/1lFFR6_ijR_iWJQnqIW5y5-LuRnRoRTS3?usp=sharing)\n- Figure 11: `plotstables/roots_xp3_languages.pdf` & [colab](https://colab.research.google.com/drive/1ankXUcTqjPantCzIfUSwAjYfAhkR7M6o?usp=sharing) requiring some of the files in `plotstables/contamination`\n- Figure 12: `plotstables/examples/bloom_code_example.py` & `plotstables/examples/bloom_code_light.pdf` & `plotstables/examples/bloomz_code_light.pdf`; The raw code files can be found [here](https://huggingface.co/datasets/bigscience/evaluation-results/blob/main/bloom/codeeval/transformers/openai_humaneval/code_generations_bloom.zip) & [here](https://huggingface.co/datasets/bigscience/evaluation-results/blob/main/bloomz/codeeval/transformers/openai_humaneval/code_generations_bloomz.zip)\n- Figure 13 - Figure 16: `plotstables/examples/*.pdf` & `plotstables/examples/generations.drawio`\n\n### Tables\n\n- Table 1: [Colab](https://colab.research.google.com/drive/1ZhwHDaHBPUlZiTp-ZZxy7axuWgE68FkW?usp=sharing) & [Colab for complex version](https://colab.research.google.com/drive/1WCUgfjToVJ9b_fJHzkWKsuGzVofqv38x?usp=sharing)\n- Table 2: Adapted from the Codex paper\n- Table 3: Manual\n- Table 4: `plotstables/compute_codegen_len.ipynb` for generations & `plotstables/countcode.py` for xP3\n- Table 5: Manual\n- Table 6: Manual\n- Table 7: `plotstables/levenshtein.py`\n- Table 8: Same as Table 1 with languages swapped from L1 to L2\n- Table 9: [Colab](https://colab.research.google.com/drive/1AWJk3jbrD1VpiMARW-xATalrupwFzZN-?usp=sharing)\n- Table 10: [Colab](https://colab.research.google.com/drive/14t9w6QSf2K5BQP0cInyGsreAhY271DLB?usp=sharing)\n- Prompt Appendix: https://github.com/albanie/prompt_formatting_in_latex\n\n## Citation\n\n```bibtex\n@article{muennighoff2022crosslingual,\n  title={Crosslingual generalization through multitask finetuning},\n  author={Muennighoff, Niklas and Wang, Thomas and Sutawika, Lintang and Roberts, Adam and Biderman, Stella and Scao, Teven Le and Bari, M Saiful and Shen, Sheng and Yong, Zheng-Xin and Schoelkopf, Hailey and others},\n  journal={arXiv preprint arXiv:2211.01786},\n  year={2022}\n}\n```\n",
    "py_files": {
        "create_xp3x.py": "from functools import partial\nimport json\nimport multiprocessing\nimport os\nimport random\n\nfrom datasets import load_dataset\nfrom datasets import get_dataset_config_names\n# pip install -q iso-639\nfrom iso639 import languages\n# pip install git+https://github.com/Muennighoff/promptsource.git@xp3x\nfrom promptsource.templates import DatasetTemplates\n\n# Set to False to use multilingual prompts e.g. 'id' for xcopa/id instead of 'en'\nUSE_ENGLISH_PROMPTS = True\n\nMAX_EXAMPLES_PER_DATASET_PROMPT = 100_000\n\nSTORY_CLOZE_DIR = \"./story_cloze_data\"\nXSTORY_CLOZE_DIR = \"./xstory_cloze_data\"\n\n# Some datasets have test sets with hidden labels which will still compile but only to noise\n# e.g. piqa test labels are all [-1] which still works on list indices resulting in \n# noise samples where the label is always the same  \nSKIP_PROMPTS = {\n    \"common_gen\": {\"test\": [\"all\"]},\n    \"piqa\": {\"test\": [\"all\"]},\n    \"qasc\": {\"test\": [\"all\"]},\n    \"imdb\": {\"unsupervised\": [\"all\"]},\n    \"glue/qqp\": {\"test\": [\"all\"]},\n    \"super_glue/record\": {\"test\": [\"all\"]},\n    \"qasc\": {\"test\": [\"all\"]},\n    'kilt_tasks/hotpotqa': {\"test\": [\"all\"]},\n    \"cosmos_qa\": {\"test\": [\n        \"description_context_question_answer_text\", \n        \"description_context_question_text\",\n        \"description_context_question_answer_id\",\n        \"context_answer_to_question\",\n        \"context_description_question_answer_text\",\n        \"context_description_question_answer_id\",\n        \"context_question_description_answer_id\",\n        \"context_description_question_text\",\n        \"context_question_description_answer_text\",\n        \"only_question_answer\",\n        \"no_prompt_id\",\n        \"context_question_description_text\",\n        \"no_prompt_text\",\n        ]},\n    \"clue/tnews\": {\"test\": [\"all\"]},\n    \"clue/csl\": {\"test\": [\"all\"]},\n    \"clue/cmrc2018\": {\"test\": [\"generate_question\", \"in_an_exam\", \"answer_in_the_passage\", \"answer_following_question\", \"xp3longcontinue\"]},\n    \"clue/drcd\": {\"test\": [\"generate_question\", \"in_an_exam\", \"answer_in_the_passage\", \"answer_following_question\", \"xp3longcontinue\"]},\n    \"hellaswag\": {\"test\": [\"complete_first_then\", \"Topic of the context\", \"Open-ended completion\", \"Randomized prompts template\", \"Appropriate continuation - Yes or No\", \"Predict ending with hint\", \"Open-ended start\", \"Reversed appropriate continuation - Yes or No\", \"how_ends\", \"if_begins_how_continues\"]},\n}\n\nDS_TO_ENG_PROMPT = {\n    \"xcopa\": \"en\",\n    \"Muennighoff/xstory_cloze\": \"en\",\n    \"Muennighoff/xwinograd\": \"en\",\n    'GEM/wiki_lingua': 'en_en', # Contains correct language names\n    'facebook/flores': 'x_x', # Contains correct language names    \n    \"allenai/wmt22_african\": \"x_x\",\n    \"Helsinki-NLP/tatoeba_mt\": \"x_x\",\n    \"Muennighoff/multi_eurlex\": \"x_x\",\n    'xnli': 'en',\n    \"paws-x\": \"en\",\n    \"mlqa\": \"mlqa.en.en\",\n    \"xquad\": \"xquad.en\",\n    \"khalidalt/tydiqa-primary\": \"english\",\n    \"khalidalt/tydiqa-goldp\": \"english\",\n    \"pasinit/xlwic\": \"en\",\n    \"GEM/xlsum\": \"english\",\n    \"GEM/BiSECT\": \"en\",\n}\n\nTRAIN_DATASETS_EXT = [\n    # Multilingual; Iterate over all configs\n    'Muennighoff/xwinograd',\n    'Muennighoff/xstory_cloze',\n    'xcopa',\n    'xnli',\n    'paws-x',\n    'mlqa',\n    'xquad',\n    'khalidalt/tydiqa-primary',\n    'khalidalt/tydiqa-goldp',\n    'pasinit/xlwic',\n    'GEM/xlsum',\n    'Helsinki-NLP/tatoeba_mt',\n    'GEM/BiSECT',\n    'allenai/wmt22_african',\n    \"GEM/wiki_lingua\",\n]\n\n#TRAIN_DATASETS_EXT = ['Helsinki-NLP/tatoeba_mt']\n\n# Datasets for which to use specific configs; Else use all configs\nDATASET_TO_CONFIGS = {\n    # Ignore the translation configs\n    \"xcopa\": [\"et\", \"ht\", \"it\", \"id\", \"qu\", \"sw\", \"zh\", \"ta\", \"th\", \"tr\", \"vi\"],\n}\n\nDATASET_TO_SKIP_CONFIGS = {\n    \"GEM/wiki_lingua\": [\"multilingual\", \"crosslingual\"],\n    \"xnli\": [\"all_languages\"],\n    \"mutli_eurlex\": [\"all_languages\"],\n}\n\nTRAIN_DATASETS_EN = [\n    # English-only\n    ('glue','mrpc'), \n    ('glue','qqp'),\n    ('paws','labeled_final'),\n    ('ai2_arc','ARC-Challenge'),\n    ('ai2_arc','ARC-Easy'),\n    ('kilt_tasks','hotpotqa'),\n    ('trivia_qa','unfiltered'),\n    ('web_questions',None),\n    ('wiki_qa',None),\n    ('adversarial_qa','dbidaf'),\n    ('adversarial_qa','dbert'),\n    ('adversarial_qa','droberta'),\n    ('duorc','SelfRC'),\n    ('duorc','ParaphraseRC'),\n    ('ropes',None),\n    ('squad_v2',None),\n    ('super_glue','record'),\n    ('quoref',None),\n    ('cos_e','v1.11'),\n    ('cosmos_qa',None),\n    ('dream',None),\n    ('openbookqa','main'),\n    ('qasc',None),\n    ('quail',None),\n    ('quarel',None),\n    ('quartz',None),\n    ('race','high'),\n    ('race','middle'),\n    ('sciq',None),\n    ('social_i_qa',None),\n    ('super_glue','boolq'),\n    ('super_glue','multirc'),\n    ('wiki_hop','original'),\n    ('wiqa',None),\n    ('piqa',None),\n    ('amazon_polarity',None),\n    ('app_reviews',None),\n    ('imdb',None),\n    ('rotten_tomatoes',None),\n    ('yelp_review_full',None),\n    ('common_gen',None),\n    ('wiki_bio',None),\n    ('cnn_dailymail','3.0.0'),\n    ('gigaword',None),\n    ('multi_news',None),\n    ('samsum',None),\n    ('xsum',None),\n    ('ag_news',None),\n    ('dbpedia_14',None),\n    ('trec',None),\n\n    ('super_glue', 'wic'),\n    ('hellaswag', None),\n    ('super_glue', 'copa'),  \n    ('super_glue','wsc.fixed'),\n    ('winogrande','winogrande_xl'),\n    (\"anli\", None),\n    (\"super_glue\", \"rte\"),\n    (\"super_glue\", \"cb\"),\n    # ('story_cloze', '2016'), # Not public \n]\n\nTRAIN_DATASETS = [\n    ('Muennighoff/mbpp', 'sanitized'),\n    (\"great_code\", None),\n    (\"neural_code_search\", \"evaluation_dataset\"),\n    (\"codeparrot/codecomplex\", \"codeparrot--codecomplex\"),\n    (\"codeparrot/github-jupyter-text-code-pairs\", None),\n    (\"codeparrot/apps\", \"all\"),\n    (\"codeparrot/xlcost-text-to-code\", \"Python-program-level\"),\n    (\"codeparrot/xlcost-text-to-code\", \"C-program-level\"),\n    (\"codeparrot/xlcost-text-to-code\", \"C++-program-level\"),\n    (\"codeparrot/xlcost-text-to-code\", \"Csharp-program-level\"),\n    (\"codeparrot/xlcost-text-to-code\", \"Java-program-level\"),\n    (\"codeparrot/xlcost-text-to-code\", \"Javascript-program-level\"),\n    (\"codeparrot/xlcost-text-to-code\", \"PHP-program-level\"),\n    (\"teven/code_contests\", None),\n    (\"teven/code_docstring_corpus\", \"top_level\"),\n    (\"Fraser/python-state-changes\", None),\n    ('clue', 'c3'),\n    ('clue', 'cmrc2018'),\n    ('clue', 'csl'),\n    ('clue', 'drcd'),\n    ('clue', 'tnews'),\n] + TRAIN_DATASETS_EN\n\n\n\n#TRAIN_DATASETS = []\n#\"\"\"\nfor ds in TRAIN_DATASETS_EXT:\n    if ds in DATASET_TO_CONFIGS:\n        TRAIN_DATASETS.extend([(ds, conf) for conf in DATASET_TO_CONFIGS[ds]])\n    else:\n        TRAIN_DATASETS.extend([(ds, conf) for conf in get_dataset_config_names(ds) if not conf in DATASET_TO_SKIP_CONFIGS.get(ds, [])])\n        if ('Helsinki-NLP/tatoeba_mt' in ds) or ('allenai/wmt22_african' in ds):\n            # Mark for inversion\n            TRAIN_DATASETS.extend([(ds, conf + \"-inverted\") for conf in get_dataset_config_names(ds)])\n\n#TRAIN_DATASETS = [\n#    #(ds, conf) for (ds, conf) in TRAIN_DATASETS if conf is not None and \"-inverted\" in conf\n#]\n#\"\"\"\nprint(\"TRAIN_DATASETS\", TRAIN_DATASETS)\n\n# https://github.com/facebookresearch/flores/blob/main/flores200/README.md\nFLORES_LANGS = {'Acehnese (Arabic script)': 'ace_Arab', 'Acehnese (Latin script)': 'ace_Latn', 'Mesopotamian Arabic': 'acm_Arab', 'Ta’izzi-Adeni Arabic': 'acq_Arab', 'Tunisian Arabic': 'aeb_Arab', 'Afrikaans': 'afr_Latn', 'South Levantine Arabic': 'ajp_Arab', 'Akan': 'aka_Latn', 'Amharic': 'amh_Ethi', 'North Levantine Arabic': 'apc_Arab', 'Modern Standard Arabic': 'arb_Arab', 'Modern Standard Arabic (Romanized)': 'arb_Latn', 'Najdi Arabic': 'ars_Arab', 'Moroccan Arabic': 'ary_Arab', 'Egyptian Arabic': 'arz_Arab', 'Assamese': 'asm_Beng', 'Asturian': 'ast_Latn', 'Awadhi': 'awa_Deva', 'Central Aymara': 'ayr_Latn', 'South Azerbaijani': 'azb_Arab', 'North Azerbaijani': 'azj_Latn', 'Bashkir': 'bak_Cyrl', 'Bambara': 'bam_Latn', 'Balinese': 'ban_Latn', 'Belarusian': 'bel_Cyrl', 'Bemba': 'bem_Latn', 'Bengali': 'ben_Beng', 'Bhojpuri': 'bho_Deva', 'Banjar (Arabic script)': 'bjn_Arab', 'Banjar (Latin script)': 'bjn_Latn', 'Standard Tibetan': 'bod_Tibt', 'Bosnian': 'bos_Latn', 'Buginese': 'bug_Latn', 'Bulgarian': 'bul_Cyrl', 'Catalan': 'cat_Latn', 'Cebuano': 'ceb_Latn', 'Czech': 'ces_Latn', 'Chokwe': 'cjk_Latn', 'Central Kurdish': 'ckb_Arab', 'Crimean Tatar': 'crh_Latn', 'Welsh': 'cym_Latn', 'Danish': 'dan_Latn', 'German': 'deu_Latn', 'Southwestern Dinka': 'dik_Latn', 'Dyula': 'dyu_Latn', 'Dzongkha': 'dzo_Tibt', 'Greek': 'ell_Grek', 'English': 'eng_Latn', 'Esperanto': 'epo_Latn', 'Estonian': 'est_Latn', 'Basque': 'eus_Latn', 'Ewe': 'ewe_Latn', 'Faroese': 'fao_Latn', 'Fijian': 'fij_Latn', 'Finnish': 'fin_Latn', 'Fon': 'fon_Latn', 'French': 'fra_Latn', 'Friulian': 'fur_Latn', 'Nigerian Fulfulde': 'fuv_Latn', 'Scottish Gaelic': 'gla_Latn', 'Irish': 'gle_Latn', 'Galician': 'glg_Latn', 'Guarani': 'grn_Latn', 'Gujarati': 'guj_Gujr', 'Haitian Creole': 'hat_Latn', 'Hausa': 'hau_Latn', 'Hebrew': 'heb_Hebr', 'Hindi': 'hin_Deva', 'Chhattisgarhi': 'hne_Deva', 'Croatian': 'hrv_Latn', 'Hungarian': 'hun_Latn', 'Armenian': 'hye_Armn', 'Igbo': 'ibo_Latn', 'Ilocano': 'ilo_Latn', 'Indonesian': 'ind_Latn', 'Icelandic': 'isl_Latn', 'Italian': 'ita_Latn', 'Javanese': 'jav_Latn', 'Japanese': 'jpn_Jpan', 'Kabyle': 'kab_Latn', 'Jingpho': 'kac_Latn', 'Kamba': 'kam_Latn', 'Kannada': 'kan_Knda', 'Kashmiri (Arabic script)': 'kas_Arab', 'Kashmiri (Devanagari script)': 'kas_Deva', 'Georgian': 'kat_Geor', 'Central Kanuri (Arabic script)': 'knc_Arab', 'Central Kanuri (Latin script)': 'knc_Latn', 'Kazakh': 'kaz_Cyrl', 'Kabiyè': 'kbp_Latn', 'Kabuverdianu': 'kea_Latn', 'Khmer': 'khm_Khmr', 'Kikuyu': 'kik_Latn', 'Kinyarwanda': 'kin_Latn', 'Kyrgyz': 'kir_Cyrl', 'Kimbundu': 'kmb_Latn', 'Northern Kurdish': 'kmr_Latn', 'Kikongo': 'kon_Latn', 'Korean': 'kor_Hang', 'Lao': 'lao_Laoo', 'Ligurian': 'lij_Latn', 'Limburgish': 'lim_Latn', 'Lingala': 'lin_Latn', 'Lithuanian': 'lit_Latn', 'Lombard': 'lmo_Latn', 'Latgalian': 'ltg_Latn', 'Luxembourgish': 'ltz_Latn', 'Luba-Kasai': 'lua_Latn', 'Ganda': 'lug_Latn', 'Luo': 'luo_Latn', 'Mizo': 'lus_Latn', 'Standard Latvian': 'lvs_Latn', 'Magahi': 'mag_Deva', 'Maithili': 'mai_Deva', 'Malayalam': 'mal_Mlym', 'Marathi': 'mar_Deva', 'Minangkabau (Arabic script)': 'min_Arab', 'Minangkabau (Latin script)': 'min_Latn', 'Macedonian': 'mkd_Cyrl', 'Plateau Malagasy': 'plt_Latn', 'Maltese': 'mlt_Latn', 'Meitei (Bengali script)': 'mni_Beng', 'Halh Mongolian': 'khk_Cyrl', 'Mossi': 'mos_Latn', 'Maori': 'mri_Latn', 'Burmese': 'mya_Mymr', 'Dutch': 'nld_Latn', 'Norwegian Nynorsk': 'nno_Latn', 'Norwegian Bokmål': 'nob_Latn', 'Nepali': 'npi_Deva', 'Northern Sotho': 'nso_Latn', 'Nuer': 'nus_Latn', 'Nyanja': 'nya_Latn', 'Occitan': 'oci_Latn', 'West Central Oromo': 'gaz_Latn', 'Odia': 'ory_Orya', 'Pangasinan': 'pag_Latn', 'Eastern Panjabi': 'pan_Guru', 'Papiamento': 'pap_Latn', 'Western Persian': 'pes_Arab', 'Polish': 'pol_Latn', 'Portuguese': 'por_Latn', 'Dari': 'prs_Arab', 'Southern Pashto': 'pbt_Arab', 'Ayacucho Quechua': 'quy_Latn', 'Romanian': 'ron_Latn', 'Rundi': 'run_Latn', 'Russian': 'rus_Cyrl', 'Sango': 'sag_Latn', 'Sanskrit': 'san_Deva', 'Santali': 'sat_Olck', 'Sicilian': 'scn_Latn', 'Shan': 'shn_Mymr', 'Sinhala': 'sin_Sinh', 'Slovak': 'slk_Latn', 'Slovenian': 'slv_Latn', 'Samoan': 'smo_Latn', 'Shona': 'sna_Latn', 'Sindhi': 'snd_Arab', 'Somali': 'som_Latn', 'Southern Sotho': 'sot_Latn', 'Spanish': 'spa_Latn', 'Tosk Albanian': 'als_Latn', 'Sardinian': 'srd_Latn', 'Serbian': 'srp_Cyrl', 'Swati': 'ssw_Latn', 'Sundanese': 'sun_Latn', 'Swedish': 'swe_Latn', 'Swahili': 'swh_Latn', 'Silesian': 'szl_Latn', 'Tamil': 'tam_Taml', 'Tatar': 'tat_Cyrl', 'Telugu': 'tel_Telu', 'Tajik': 'tgk_Cyrl', 'Tagalog': 'tgl_Latn', 'Thai': 'tha_Thai', 'Tigrinya': 'tir_Ethi', 'Tamasheq (Latin script)': 'taq_Latn', 'Tamasheq (Tifinagh script)': 'taq_Tfng', 'Tok Pisin': 'tpi_Latn', 'Tswana': 'tsn_Latn', 'Tsonga': 'tso_Latn', 'Turkmen': 'tuk_Latn', 'Tumbuka': 'tum_Latn', 'Turkish': 'tur_Latn', 'Twi': 'twi_Latn', 'Central Atlas Tamazight': 'tzm_Tfng', 'Uyghur': 'uig_Arab', 'Ukrainian': 'ukr_Cyrl', 'Umbundu': 'umb_Latn', 'Urdu': 'urd_Arab', 'Northern Uzbek': 'uzn_Latn', 'Venetian': 'vec_Latn', 'Vietnamese': 'vie_Latn', 'Waray': 'war_Latn', 'Wolof': 'wol_Latn', 'Xhosa': 'xho_Latn', 'Eastern Yiddish': 'ydd_Hebr', 'Yoruba': 'yor_Latn', 'Yue Chinese': 'yue_Hant', 'Chinese (Simplified)': 'zho_Hans', 'Chinese (Traditional)': 'zho_Hant', 'Standard Malay': 'zsm_Latn', 'Zulu': 'zul_Latn'}\nFLORES_LANGS_INV = {v: k for k, v in FLORES_LANGS.items()}\n\nFLORES_NEW_TO_OLD = {'afr_Latn': 'afr', 'amh_Ethi': 'amh', 'arb_Arab': 'ara', 'asm_Beng': 'asm', 'ast_Latn': 'ast', 'azj_Latn': 'azj', 'bel_Cyrl': 'bel', 'ben_Beng': 'ben', 'bos_Latn': 'bos', 'bul_Cyrl': 'bul', 'cat_Latn': 'cat', 'ceb_Latn': 'ceb', 'ces_Latn': 'ces', 'ckb_Arab': 'ckb', 'cym_Latn': 'cym', 'dan_Latn': 'dan', 'deu_Latn': 'deu', 'ell_Grek': 'ell', 'eng_Latn': 'eng', 'est_Latn': 'est', 'fin_Latn': 'fin', 'fra_Latn': 'fra', 'fuv_Latn': 'ful', 'gle_Latn': 'gle', 'glg_Latn': 'glg', 'guj_Gujr': 'guj', 'hau_Latn': 'hau', 'heb_Hebr': 'heb', 'hin_Deva': 'hin', 'hrv_Latn': 'hrv', 'hun_Latn': 'hun', 'hye_Armn': 'hye', 'ibo_Latn': 'ibo', 'ind_Latn': 'ind', 'isl_Latn': 'isl', 'ita_Latn': 'ita', 'jav_Latn': 'jav', 'jpn_Jpan': 'jpn', 'kam_Latn': 'kam', 'kan_Knda': 'kan', 'kat_Geor': 'kat', 'kaz_Cyrl': 'kaz', 'khm_Khmr': 'khm', 'kir_Cyrl': 'kir', 'kor_Hang': 'kor', 'lao_Laoo': 'lao', 'lij_Latn': 'Latvian', 'lim_Latn': 'kea', 'lin_Latn': 'lin', 'lit_Latn': 'lit', 'ltz_Latn': 'ltz', 'lug_Latn': 'lug', 'luo_Latn': 'luo', 'lvs_Latn': 'lav', 'mal_Mlym': 'mal', 'mar_Deva': 'mar', 'mkd_Cyrl': 'mkd', 'mlt_Latn': 'mlt', 'khk_Cyrl': 'mon', 'mri_Latn': 'mri', 'mya_Mymr': 'mya', 'nld_Latn': 'nld', 'nob_Latn': 'nob', 'npi_Deva': 'npi', 'nso_Latn': 'nso', 'nya_Latn': 'nya', 'oci_Latn': 'oci', 'gaz_Latn': 'orm', 'ory_Orya': 'ory', 'pan_Guru': 'pan', 'pes_Arab': 'fas', 'pol_Latn': 'pol', 'por_Latn': 'por', 'pbt_Arab': 'pus', 'ron_Latn': 'ron', 'rus_Cyrl': 'rus', 'slk_Latn': 'slk', 'sna_Latn': 'sna', 'snd_Arab': 'snd', 'som_Latn': 'som', 'spa_Latn': 'spa', 'srp_Cyrl': 'srp', 'swe_Latn': 'swe', 'swh_Latn': 'swh', 'tam_Taml': 'tam', 'tel_Telu': 'tel', 'tgk_Cyrl': 'tgk', 'tgl_Latn': 'tgl', 'tha_Thai': 'tha', 'tur_Latn': 'tur', 'ukr_Cyrl': 'ukr', 'umb_Latn': 'umb', 'urd_Arab': 'urd', 'uzn_Latn': 'uzb', 'vie_Latn': 'vie', 'wol_Latn': 'wol', 'xho_Latn': 'xho', 'yor_Latn': 'yor', 'zho_Hans': 'zho_simpl', 'zho_Hant': 'zho_trad', 'zsm_Latn': 'msa', 'zul_Latn': 'zul'}\n\n# Mapping from all kinds of language names to the same standardized codes\nLANGS_TO_FLORES_CODE = {}\n\nfor name, code in FLORES_LANGS.items():\n    LANGS_TO_FLORES_CODE[name.lower()] = code\n    LANGS_TO_FLORES_CODE[code.lower()] = code\n    # This may lead to some incorrectly assigned scripts\n    LANGS_TO_FLORES_CODE[code.split(\"_\")[0]] = code\n    for name2, code2 in FLORES_LANGS.items():\n        if code == code2: continue\n        #TRAIN_DATASETS.append((\"facebook/flores\", f\"{code}-{code2}\"))\n\nME_LANGUAGES = [\"en\", \"da\", \"de\", \"nl\", \"sv\", \"bg\", \"cs\", \"hr\", \"pl\", \"sk\", \"sl\", \"es\", \"fr\", \"it\", \"pt\", \"ro\", \"et\", \"fi\", \"hu\", \"lt\", \"lv\", \"el\", \"mt\"]\nfor l1 in ME_LANGUAGES:\n    for l2 in ME_LANGUAGES:\n        if l1 == l2: continue\n        TRAIN_DATASETS.append((\"Muennighoff/multi_eurlex\", f\"{l1}-{l2}\"))\n\nfor new_code, old_code in FLORES_NEW_TO_OLD.items():\n    LANGS_TO_FLORES_CODE[old_code] = new_code\n    LANGS_TO_FLORES_CODE[new_code] = new_code\n\n    try:\n        name = languages.get(part3=old_code)\n        LANGS_TO_FLORES_CODE[name.part1] = new_code\n        LANGS_TO_FLORES_CODE[name.name.lower()] = new_code\n        LANGS_TO_FLORES_CODE[name.name.lower().split(\" \")[0]] = new_code\n    except KeyError:\n        print(f\"Could not find iso3 code for {old_code}.\")\n\n# Add programming languages\nLANGS_TO_FLORES_CODE[\"python\"] = \"py\"\nLANGS_TO_FLORES_CODE[\"javascript\"] = \"js\"\nLANGS_TO_FLORES_CODE[\"java\"] = \"java\"\nLANGS_TO_FLORES_CODE[\"cpp\"] = \"cpp\"\nLANGS_TO_FLORES_CODE[\"c\"] = \"c\"\nLANGS_TO_FLORES_CODE[\"go\"] = \"go\"\nLANGS_TO_FLORES_CODE[\"rust\"] = \"rust\"\n\nDS_TO_LANG = {\n    \"python\": \"python\",\n    'Muennighoff/mbpp': 'python',\n    'openai_humaneval': 'python',\n    \"great_code\": \"python\",\n    \"neural_code_search\": \"python\",\n    \"codeparrot/codecomplex\": \"java\",\n    \"codeparrot/github-jupyter-text-code-pairs\": \"jupyter-notebook\",\n    \"codeparrot/apps\": \"python\",\n    \"Fraser/python-state-changes\": \"python\",\n    \"codeparrot/xlcost-text-to-code\": \"python\",\n    \"teven/code_contests\": \"python\",\n    \"teven/code_docstring_corpus\": \"python\",\n    \"clue\": \"zho_Hans\",\n    \"cmn\": \"zho_Hans\", # == zho\n    \"cmn_Hans\": \"zho_Hans\", # == zho\n    \"cmn_Hant\": \"zho_Hant\", # == zho\n    \"zh\": \"zho_Hans\", # == zho\n    \"jp\": \"jpn_Jpan\", # == jpn\n    \"npi\": \"npi_Deva\", # == npe\n    \"ory\": \"ory_Orya\", # == ori\n    \"swh\": \"swh_Latn\", # == swa\n    \"sw\": \"swh_Latn\", # == swa\n    \"eu\": \"eus_Latn\", # == eus\n    \"qu\": \"que_Latn\", # == que\n    \"tr\": \"tur_Latn\", # == tur\n    \"vi\": \"vie_Latn\", # == vie\n    \"ta\": \"tam_Taml\", # == tam\n    \"te\": \"tel_Telu\", # == tel\n    \"th\": \"tha_Thai\", # == tha\n    \"ht\": \"hat_Latn\", # == hat\n    \"wuu\": \"wuu_Hans\", # == wuu\n    \"yue_Hans\": \"yue_Hans\", # == yue\n    \"wuu_Hans\": \"wuu_Hans\", # == wuu\n    \"srp_Latn\": \"srp_Latn\", # == srp\n    \"nor\": \"nor_Latn\", # == Norwegian; Macro language\n    \"yid\": \"yid_Hebr\", # Yiddish; Macro\n    \"tigrinya\": \"tir_Ethi\", # == tir\n    \"kirundi\": \"run_Latn\", # == rundi\n    \"punjabi\": \"pan_Guru\", # == panjabi\n    \"chinese_simplified\": \"zho_Hans\",\n    \"chinese_traditional\": \"zho_Hant\",\n    \"chinese\": \"zho_Hans\",\n    \"farsi\": \"pes_Arab\",\n    \"bangla\": \"ben_Beng\",\n    \"Ghanaian Pidgin English\": \"gpe_Latn\",\n    \"python\": \"python\",\n    \"castilian\": \"spa_Latn\",\n    \"serbian_latin\": \"srp_Latn\",\n    \"pashto\": \"pbt_Arab\",\n    \"azerbaijani\": \"aze_Latn\",\n    \"scottish_gaelic\": \"gla_Latn\",\n    \"gaelic\": \"gla_Latn\",\n    \"romano-serbian\": \"rsb_Latn\",\n    \"sinhalese\": \"sin_Sinh\",\n    \"serbian_cyrillic\": \"srp_Cyrl\",\n    \"pidgin\": \"pcm_Latn\",\n    \"kiswahili\": \"swh_Latn\",\n    \"uighur\": 'uig_Arab',\n    \"fur\": \"fur_Latn\",\n    \"albanian\": \"sqi_Latn\",\n    \"quechua\": \"quy_Latn\",\n    \"Cornish\": \"cor_Latn\",\n    \"flemish\": \"nld_Latn\",\n    \"chuvash\": \"chv_Cyrl\",\n    \"modern greek\": \"ell_Grek\",\n    \"western frisian\": \"fry_Latn\",\n    \"interlingua\": \"ina_Latn\",\n    \"kurdish\": \"kur_Latn\",\n    \"java\": \"java\",\n    ### Languages not in flores ###\n    \"ain\": \"ain_Latn\",\n    \"ain_Latn\": \"ain_Latn\",\n    \"ber\": \"ber_Latn\",\n    \"ber_Latn\": \"ber_Latn\",\n    \"ber_Tfng\": \"ber_Tfng\",\n    \"ber_Arab\": \"ber_Arab\",\n    \"arq\": \"arq_Arab\",\n    \"arq_Arab\": \"arq_Arab\",\n    \"avk\": \"avk_Latn\",\n    \"avk_Latn\": \"avk_Latn\",\n    \"awa\": \"awa_Deva\",\n    \"awa_Deva\": \"awa_Deva\",\n    \"aze\": \"aze_Latn\",\n    \"aze_Latn\": \"aze_Latn\",\n    \"bre\": \"bre_Latn\",\n    \"bre_Latn\": \"bre_Latn\",\n    \"bua\": \"bua_Cyrl\",\n    \"bua_Cyrl\": \"bua_Cyrl\",\n    \"cbk\": \"cbk_Latn\",\n    \"cbk_Latn\": \"cbk_Latn\",\n    \"cha\": \"cha_Latn\",\n    \"cha_Latn\": \"cha_Latn\",\n    # They all intermingle Katakana/Hiragana/Kanji, but they are guaranteed to have the individual style; I.e. Kana is guaranteed to have katakana in each sample\n    \"jpn_Hira\": \"jpn_Hira\",\n    \"jpn_Kana\": \"jpn_Kana\",\n    \"jpn_Hani\": \"jpn_Hani\",\n    \"lat\": \"lat_Latn\",\n    \"lat_Latn\": \"lat_Latn\",\n    \"dsb\": \"dsb_Latn\",\n    \"dsb_Latn\": \"dsb_Latn\",\n    \"fry\": \"fry_Latn\",\n    \"fry_Latn\": \"fry_Latn\",\n    \"hoc\": \"hoc_Latn\",\n    \"hoc_Deva\": \"hoc_Deva\",\n    \"hoc_Latn\": \"hoc_Latn\",\n    \"frr\": \"frr_Latn\",\n    \"frr_Latn\": \"frr_Latn\",\n    \"jbo\": \"jbo_Latn\",\n    \"jbo_Latn\": \"jbo_Latn\",\n    \"tlh\": \"tlh_Latn\",\n    \"tlh_Latn\": \"tlh_Latn\",\n    \"lfn\": \"lfn_Latn\",\n    \"lfn_Latn\": \"lfn_Latn\",\n    \"lfn_Cyrl\": \"lfn_Cyrl\",\n    \"vol\": \"vol_Latn\",\n    \"vol_Latn\": \"vol_Latn\",\n    \"tzl\": \"tzl_Latn\",\n    \"tzl_Latn\": \"tzl_Latn\",\n    \"gos\": \"gos_Latn\",\n    \"gos_Latn\": \"gos_Latn\",\n    \"hbs\": \"hbs_Latn\",\n    \"hbs_Latn\": \"hbs_Latn\",\n    \"hrx\": \"hrx_Latn\",\n    \"hrx_Latn\": \"hrx_Latn\",\n    \"hsb\": \"hsb_Latn\",\n    \"hsb_Latn\": \"hsb_Latn\",\n    \"xal\": \"xal_Cyrl\",\n    \"xal_Cyrl\": \"xal_Cyrl\",\n    \"toki\": \"toki_Latn\",\n    \"toki_Latn\": \"toki_Latn\",\n    \"tok_Latn\": \"tok_Latn\",\n    \"sah\": \"sah_Cyrl\",\n    \"sah_Cyrl\": \"sah_Cyrl\",\n    \"kur_Latn\": \"kur_Latn\",\n    \"ido\": \"ido_Latn\",\n    \"ido_Latn\": \"ido_Latn\",\n    \"kdr_Latn\": \"kdr_Latn\",\n    \"kdr_Cyrl\": \"kdr_Cyrl\",\n    \"kzj\": \"kzj_Latn\",\n    \"kzj_Latn\": \"kzj_Latn\",\n    \"lad_Latn\": \"lad_Latn\",\n    \"ota_Arab\": \"ota_Arab\",\n    \"ota_Latn\": \"ota_Latn\",\n    \"uzb_Latn\": \"uzb_Latn\",\n    \"chm\": \"chm_Cyrl\",\n    \"chv\": \"chv_Cyrl\",\n    \"cor\": \"cor_Latn\",\n    \"dtp\": \"dtp_Latn\",\n    \"egl\": \"egl_Latn\",\n    \"fkv\": \"fkv_Latn\",\n    \"gcf\": \"gcf_Latn\",\n    \"got\": \"got_Goth\",\n    \"grc\": \"grc_Grek\",\n    \"gsw\": \"gsw_Latn\",\n    \"ile\": \"ile_Latn\",\n    \"ina\": \"ina_Latn\",\n    \"ina_Latn\": \"ina_Latn\",\n    \"kha\": \"kha_Latn\",\n    \"kur\": \"kur_Latn\",\n    \"lad\": \"lad_Latn\",\n    \"nds\": \"nds_Latn\",\n    \"nov\": \"nov_Latn\",\n    \"nst\": \"nst_Latn\",\n    \"orv\": \"orv_Cyrl\",\n    \"ota\": \"ota_Arab\",\n    \"pam\": \"pam_Latn\",\n    \"pcd\": \"pcd_Latn\",\n    \"pms\": \"pms_Latn\",\n    \"prg\": \"prg_Latn\",\n    \"que\": \"que_Latn\",\n    \"rom\": \"rom_Latn\",\n    \"sqi\": \"sqi_Latn\",\n    \"swa\": \"swa_Latn\",\n    \"swg\": \"swg_Latn\",\n    \"zza\": \"zza_Latn\",\n    \"sl\": \"slv_Latn\",\n    **LANGS_TO_FLORES_CODE,\n    **{d: \"eng_Latn\" for (d,s) in TRAIN_DATASETS_EN},\n}\n\n# Add names\nFLORES_LANGS_INV[\"uzb_Latn\"] = \"Uzbek (Latin script)\"\nFLORES_LANGS_INV[\"ota_Arab\"] = \"Ottoman Turkish\"\nFLORES_LANGS_INV[\"ota_Latn\"] = \"Ottoman Turkish (Latin script)\"\nFLORES_LANGS_INV[\"lad_Latn\"] = \"Ladino\"\nFLORES_LANGS_INV[\"kzj_Latn\"] = \"Coastal Kadazan\"\nFLORES_LANGS_INV[\"kdr_Latn\"] = \"Karaim (Latin script)\"\nFLORES_LANGS_INV[\"kdr_Cyrl\"] = \"Karaim (Cyrillic script)\"\nFLORES_LANGS_INV[\"ido_Latn\"] = \"Ido\"\nFLORES_LANGS_INV[\"kur_Latn\"] = \"Kurdish (Latin script)\"\nFLORES_LANGS_INV[\"yue_Hans\"] = \"Yue Chinese (Simplified)\"\nFLORES_LANGS_INV[\"sah_Cyrl\"] = \"Yakut\"\nFLORES_LANGS_INV[\"tok_Latn\"] = \"Toki Pona\"\nFLORES_LANGS_INV[\"toki_Latn\"] = \"Toki Pona\"\nFLORES_LANGS_INV[\"toki\"] = \"Toki Pona\"\nFLORES_LANGS_INV[\"xal\"] = \"Kalmyk\"\nFLORES_LANGS_INV[\"ain\"] = \"Ainu\"\nFLORES_LANGS_INV[\"ain_Latn\"] = \"Ainu (Latin script)\"\nFLORES_LANGS_INV[\"ber\"] = \"Berber\"\nFLORES_LANGS_INV[\"ber_Latn\"] = \"Berber (Latin script)\"\nFLORES_LANGS_INV[\"ber_Tfng\"] = \"Berber (Tifinagh script)\"\nFLORES_LANGS_INV[\"ber_Arab\"] = \"Berber (Arabic script)\"\nFLORES_LANGS_INV[\"arq_Arab\"] = \"Algerian Arabic\"\nFLORES_LANGS_INV[\"avk_Latn\"] = \"Kotava\"\nFLORES_LANGS_INV[\"awa_Deva\"] = \"Awadhi\"\nFLORES_LANGS_INV[\"aze_Latn\"] = \"Azerbaijani (South or North; Latin script)\"\nFLORES_LANGS_INV[\"bre_Latn\"] = \"Breton\"\nFLORES_LANGS_INV[\"bua_Cyrl\"] = \"Buryat\"\nFLORES_LANGS_INV[\"cbk_Latn\"] = \"Chavacano\"\nFLORES_LANGS_INV[\"cha_Latn\"] = \"Chamorro\"\nFLORES_LANGS_INV[\"jpn_Hira\"] = \"Japanese (Hiragana)\"\nFLORES_LANGS_INV[\"jpn_Kana\"] = \"Japanese (Katakana)\"\nFLORES_LANGS_INV[\"jpn_Hani\"] = \"Japanese (Kanji)\"\nFLORES_LANGS_INV[\"lat_Latn\"] = \"Latin\"\nFLORES_LANGS_INV[\"dsb_Latn\"] = \"Lower Sorbian\"\nFLORES_LANGS_INV[\"hsb_Latn\"] = \"Upper Sorbian\"\nFLORES_LANGS_INV[\"fry_Latn\"] = \"Frisian\"\nFLORES_LANGS_INV[\"hoc_Deva\"] = \"Ho (Devanagari script)\"\nFLORES_LANGS_INV[\"hoc_Latn\"] = \"Ho (Latin script)\"\nFLORES_LANGS_INV[\"frr_Latn\"] = \"Northern Frisian\"\nFLORES_LANGS_INV[\"jbo_Latn\"] = \"Lojban\"\nFLORES_LANGS_INV[\"nor_Latn\"] = \"Norwegian\"\nFLORES_LANGS_INV[\"yid_Hebr\"] = \"Yiddish\"\nFLORES_LANGS_INV[\"tlh_Latn\"] = \"Klingon\"\nFLORES_LANGS_INV[\"lfn_Latn\"] = \"Lingua Franca Nova\"\nFLORES_LANGS_INV[\"lfn_Cyrl\"] = \"Lingua Franca Nova (Cyrillic script)\"\nFLORES_LANGS_INV[\"vol_Latn\"] = \"Volapük\"\nFLORES_LANGS_INV[\"tzl_Latn\"] = \"Talossan\"\nFLORES_LANGS_INV[\"srp_Latn\"] = \"Serbian (Latin script)\"\nFLORES_LANGS_INV[\"gos_Latn\"] = \"Gronings\"\nFLORES_LANGS_INV[\"hbs_Latn\"] = \"Serbo-Croatian\" # Macro\nFLORES_LANGS_INV[\"hrx_Latn\"] = \"Hunsrik\"\nFLORES_LANGS_INV[\"ile_Latn\"] = \"Interlingue\"\nFLORES_LANGS_INV[\"ina_Latn\"] = \"Interlingua (International Auxiliary Language Association)\"\n\n# From https://github.com/Helsinki-NLP/LanguageCodes/blob/e2d30a81e2aba5cb6af2c45369433e4a295aa52c/iso639\nwith open(\"tatoebalangs.txt\", \"r\") as f:\n    for line in f.readlines()[1:]:\n        parts = line.split(\"\\t\")\n        code, name = parts[0], parts[-2]\n        if code not in DS_TO_LANG:\n            print(code, name)\n            assert code\n            DS_TO_LANG[code] = code\n        if code not in FLORES_LANGS_INV:\n            FLORES_LANGS_INV[code] = name\n            assert code\n            assert name\n\n# Add all that's in FLORES_LANGS_INV but not in DS_TO_LANG\nfor code, name in FLORES_LANGS_INV.items():\n    if code not in DS_TO_LANG:\n        print(code, name)\n        assert code\n        DS_TO_LANG[code] = code\n    if name not in DS_TO_LANG:\n        DS_TO_LANG[name] = code\n\nDS_TO_LANG[\"python\"] = \"python\"\nDS_TO_LANG = {k.lower(): v for k,v in DS_TO_LANG.items() if ((\"_\" in v) or (v in (\"python\", \"java\", \"jupyter-notebook\")))}\nassert \"python\" in DS_TO_LANG\n# To create maps\n\"\"\"\nimport json\nwith open(\"xp3x_name_to_code.json\", \"w\") as f:\n    json.dump(DS_TO_LANG, f, ensure_ascii=False)\n\nimport json\nwith open(\"xp3x_code_to_name.json\", \"w\") as f:\n    json.dump(FLORES_LANGS_INV, f, ensure_ascii=False)\n\nprint(DS_TO_LANG)\nexit()\n\"\"\"\n\n### DATASET CREATION ###\n\n# Copied from promptsource.utils\ndef removeHyphen(example):\n    example_clean = {}\n    for key in example.keys():\n        if \"-\" in key:\n            new_key = key.replace(\"-\", \"_\")\n            example_clean[new_key] = example[key]\n        else:\n            example_clean[key] = example[key]\n    example = example_clean\n    return example\n\ndef apply_template(dataset, template, strip_connection=True):\n    def map_fn(ex):\n        ex = removeHyphen(ex)\n        try:\n            inputs_and_targets = template.apply(\n                ex, \n                strip_connection=strip_connection,\n                truncate=True,\n            )\n        # Skip ValueError(\"Prompt did not produce an input and at least one target.\")\n        # which happens for some prompts with if else clauses based on inputs producing occasional\n        # empty targets\n        except ValueError as e:\n            print(f\"Skipping example {ex} because of error {e}\")\n            return {\"inputs\": \"\", \"targets\": \"\"}\n        if len(inputs_and_targets) == 2:\n            # Note that the signature changed in promptsource \n            # In 0.1.0 template.apply returned two strings; In >0.3.0 it retuns a str & list\n            inputs, targets = inputs_and_targets\n            if len(targets) > 1:\n                # Safer to skip, as could be a bug\n                print(f\"Found targets longer than 1. Inputs: {inputs} ; Targets {targets}. Skipping.\")\n                return {\"inputs\": \"\", \"targets\": \"\"}\n            targets = targets[0]\n            return {\"inputs\": inputs, \"targets\": targets}\n        # When template results in an empty example, template.apply returns [\"\"]\n        # Also, if the template gets split wrong, len can be > 2\n        # We will filter these out later\n        else:\n            # inputs is a str by default & targets a str\n            return {\"inputs\": \"\", \"targets\": \"\"}\n\n    def filter_fn(ex):\n        return len(ex[\"inputs\"]) > 0 and len(ex[\"targets\"]) > 0\n\n    original_columns = dataset.column_names\n    dataset = dataset.map(map_fn).filter(filter_fn)\n    # map keeps original columns, remove them\n    return dataset.remove_columns(set(original_columns) - {\"inputs\", \"targets\"})\n\ndef add_language_name_wikilingua(example):\n    example[\"source_language_name\"] = languages.get(alpha2=example[\"source_language\"]).name\n    example[\"target_language_name\"] = languages.get(alpha2=example[\"target_language\"]).name\n    return example\n\ndef add_language_name_flores(example, subset_name):\n    l1, l2 = subset_name.split(\"-\")\n    example[\"source_language_name\"] = FLORES_LANGS_INV[l1]\n    example[\"target_language_name\"] = FLORES_LANGS_INV[l2]\n    return example\n\ndef add_language_name_tatoeba(example, inv=False):\n    l1, l2 = example[\"sourceLang\"], example[\"targetlang\"]\n    try:\n        l1 = languages.get(part3=l1).name\n    except:\n        try:\n            l1 = languages.get(part3=l1.split(\"_\")[0]).name\n        except:\n            l1 = FLORES_LANGS_INV[l1]\n    try:\n        l2 = languages.get(part3=l2).name\n    except:\n        try:\n            l2 = languages.get(part3=l2.split(\"_\")[0]).name\n        except:\n            l2 = FLORES_LANGS_INV[l2]\n\n    if inv:\n        example[\"source_language_name\"] = l2\n        example[\"target_language_name\"] = l1\n    else:\n        example[\"source_language_name\"] = l1\n        example[\"target_language_name\"] = l2\n    return example\n\ndef add_language_name_wmt22(example, inv=False):\n    l1, l2 = list(example[\"translation\"].keys())\n    lang1 = languages.get(part3=l1).name\n    lang2 = languages.get(part3=l2).name\n    if inv:\n        example[\"source_language_name\"] = lang2\n        example[\"target_language_name\"] = lang1\n        example[\"source\"] = example[\"translation\"][l2]\n        example[\"target\"] = example[\"translation\"][l1]\n    else:\n        example[\"source_language_name\"] = lang1\n        example[\"target_language_name\"] = lang2\n        example[\"source\"] = example[\"translation\"][l1]\n        example[\"target\"] = example[\"translation\"][l2]\n    return example\n\ndef filter_l1_l2_wikilingua(example, l1, l2):\n    return example[\"source_language\"] == l1 and example[\"target_language\"] == l2\n\ndef filter_empty_solution_apps(example):\n    return bool(example[\"solutions\"])\n\ndef add_solution_apps(example):\n    example[\"solution\"] = random.choice(json.loads(example[\"solutions\"]))\n    return example\n\ndef clean_code_xlcost(example):\n    clean_lines = []\n    cur_indent = 0\n    for line in example[\"code\"].split(\"NEW_LINE\"):\n        cur_indent += line.count(\"INDENT\")\n        cur_indent -= line.count(\"DEDENT\")\n        line = line.replace(\"INDENT\", \"\").replace(\"DEDENT\", \"\")\n        line = line.replace(\"STRNEWLINE\", \"\\n\")\n        line = line.replace(\"TABSYMBOL\", \"\\t\")\n        clean_lines.append(\"\\t\" * cur_indent + line.strip())\n    example[\"code_clean\"] = \"\\n\".join(clean_lines)\n    return example\n\ndef write_to_jsonl_hub(ds):\n\n    ### GET DATASET & LANGUAGE ###\n    ds_name, subset_name = ds\n    is_wikilingua_cross_lingual = (ds_name == \"GEM/wiki_lingua\") and (\"_\") in subset_name\n    \n    lang_dir = DS_TO_LANG.get(ds_name.lower())\n    if lang_dir is None:\n        lang_dir = \"unknown\"\n        if subset_name is not None:\n            lang_dir = DS_TO_LANG.get(subset_name.lower(), None)\n        if ds_name in (\"facebook/flores\", \"Muennighoff/multi_eurlex\"):\n            lang_dir = DS_TO_LANG.get(subset_name.split(\"-\")[-1].lower())\n        elif ds_name == \"Helsinki-NLP/tatoeba_mt\":\n            splitted = subset_name.replace(\"-inverted\", \"\").split(\"-\")\n            if len(splitted) != 2: raise ValueError(\"Unexpected length: \" + subset_name)\n            l1, l2 = splitted\n            if l1 == l2: return     \n            if subset_name.endswith(\"-inverted\"):\n                lang_dir = DS_TO_LANG.get(l1.lower())\n                l_check = l1.lower()     \n            else:\n                lang_dir = DS_TO_LANG.get(l2.lower())\n                l_check = l2.lower()     \n\n            if lang_dir is None:\n                lang_dir = DS_TO_LANG.get(l_check.split(\"_\")[0])\n                if (lang_dir is not None) and (l_check.split(\"_\")[1] == \"latn\"):\n                    lang_dir += \"_Latn\"\n                    FLORES_LANGS_INV[lang_dir] = FLORES_LANGS_INV[l_check.split(\"_\")[0]] + \" (Latin script)\"\n                elif (lang_dir is not None) and (l_check.split(\"_\")[1] == \"cyrl\"):\n                    lang_dir += \"_Cyrl\"\n                    FLORES_LANGS_INV[lang_dir] = FLORES_LANGS_INV[l_check.split(\"_\")[0]] + \" (Cyrillic script)\"\n                elif (lang_dir is not None):\n                    raise ValueError(f\"Unknown script for {l_check}\")\n                else:\n                    raise ValueError(f\"Unknown language for {l_check}\")\n        elif ds_name == \"allenai/wmt22_african\":\n            if subset_name.endswith(\"-inverted\"):\n                lang_dir = DS_TO_LANG.get(subset_name.split(\"-\")[0].lower())\n            else:\n                lang_dir = DS_TO_LANG.get(subset_name.split(\"-\")[1].lower())\n        elif is_wikilingua_cross_lingual or ds_name == \"pasinit/xlwic\":\n            lang_dir = DS_TO_LANG.get(subset_name.split(\"_\")[-1].lower())\n        elif ds_name == \"xquad\":\n            lang_dir = DS_TO_LANG.get(subset_name.split(\".\")[1].lower())\n        elif ds_name == \"mlqa\":\n            # Classify it by the target language for cross-lingual (i.e. what the loss is computed on)\n            lang_dir = DS_TO_LANG.get(subset_name.split(\".\")[1].lower())\n        \n        if (lang_dir is None):\n            raise ValueError(f\"Unknown language for {ds_name}/{subset_name}\")\n\n        print(f\"Using {lang_dir} as language dir for {ds_name}/{subset_name}\")\n    \n    os.makedirs(lang_dir, exist_ok=True)\n\n    if ds_name == \"Helsinki-NLP/tatoeba_mt\":\n        if subset_name.endswith(\"-inverted\"):\n            try:\n                ds = load_dataset(ds_name, subset_name.replace(\"-inverted\", \"\"), ignore_verifications=True)\n            except:\n                print(f\"Failed to load {ds_name}/{subset_name.replace('-inverted', '')}\")\n                return\n            ds = ds.map(lambda x: add_language_name_tatoeba(x, inv=True))\n            ds = ds.rename_column(f\"sourceString\", \"tmp\")\n            ds = ds.rename_column(f\"targetString\", f\"sourceString\")\n            ds = ds.rename_column(f\"tmp\", f\"targetString\")\n        else:\n            # Sometimes has NonMatchingSplitsSizesError hence ignore\n            try:\n                ds = load_dataset(ds_name, subset_name, ignore_verifications=True)\n            except:\n                print(f\"Failed to load {ds_name}/{subset_name}\")\n                return\n            ds = ds.map(lambda x: add_language_name_tatoeba(x, inv=False))\n    elif ds_name == \"allenai/wmt22_african\":\n        if subset_name.endswith(\"-inverted\"):\n            ds = load_dataset(ds_name, subset_name.replace(\"-inverted\", \"\"))\n            ds = ds.map(lambda x: add_language_name_wmt22(x, inv=True))\n        else:\n            ds = load_dataset(ds_name, subset_name)\n            ds = ds.map(lambda x: add_language_name_wmt22(x, inv=False))\n    elif ds_name == \"story_cloze\":\n        ds = load_dataset(ds_name, subset_name, data_dir=STORY_CLOZE_DIR)\n    elif ds_name == \"Muennighoff/xstory_cloze\":\n        ds = load_dataset(ds_name, subset_name, data_dir=XSTORY_CLOZE_DIR)\n    else:\n        ds = load_dataset(ds_name, subset_name)\n\n    if ds_name == \"GEM/wiki_lingua\":\n        # Add names, e.g. Chinese for zh to use them in the jinja prompts\n        ds = ds.map(add_language_name_wikilingua)\n        if is_wikilingua_cross_lingual:\n            # Keep only L1 -> L2 (L2 -> L1 will be a separate dataset)\n            ds = ds.filter(partial(filter_l1_l2_wikilingua, l1=subset_name.split(\"_\")[0], l2=subset_name.split(\"_\")[1]))\n    elif ds_name == \"facebook/flores\":\n        ds = ds.map(lambda x: add_language_name_flores(x, subset_name))\n        l1, l2 = subset_name.split(\"-\")\n        ds = ds.rename_column(f\"sentence_{l1}\", \"source\")\n        ds = ds.rename_column(f\"sentence_{l2}\", \"target\")\n    elif ds_name == \"codeparrot/apps\":\n        ds = ds.filter(filter_empty_solution_apps).map(add_solution_apps)\n    elif ds_name == \"codeparrot/xlcost-text-to-code\":\n        ds = ds.map(clean_code_xlcost)\n\n    ### SELECT SPLITS ###\n    dataset_splits = list(ds.keys())\n    if subset_name.startswith(\"xlwic_en_\"):\n        # Train set is en; val & test are zh\n        dataset_splits.remove(\"train\")\n    elif ds_name == \"teven/code_docstring_corpus\":\n        # Bad quality split\n        dataset_splits.remove(\"class_level\")\n    elif ds_name == \"GEM/wiki_lingua\":\n        # Remove samples\n        dataset_splits.remove(\"sampled_validation\")\n        dataset_splits.remove(\"sampled_test\")\n\n    ### SELECT PROMPTS ###\n    if subset_name is None:\n        prompt_dataset_name = ds_name\n    else:\n        subset_name_prompt = subset_name\n        if USE_ENGLISH_PROMPTS and ds_name in DS_TO_ENG_PROMPT:\n            subset_name_prompt = DS_TO_ENG_PROMPT[ds_name]\n        prompt_dataset_name = f\"{ds_name}/{subset_name_prompt}\"\n\n    prompts = DatasetTemplates(prompt_dataset_name)\n\n    ### PROCESS ###\n\n    for split in dataset_splits:\n        for t_name in prompts.all_template_names:\n            print(f\"Running {ds_name}/{subset_name}/{split}/{t_name}\")\n            if SKIP_PROMPTS.get(prompt_dataset_name, {}).get(split, False):\n                if (\"all\" in SKIP_PROMPTS[prompt_dataset_name][split]) or (t_name in SKIP_PROMPTS[prompt_dataset_name][split]):\n                    print(f\"Skipping DS: {prompt_dataset_name} Split {split} Prompt {t_name}\")\n                    continue\n            \n            out_path = os.path.join(\n                lang_dir, \n                f'xp3_{ds_name}_{subset_name}_{split}_{t_name}.jsonl'.replace(\"/\", \"_\").replace(\" \", \"_\").replace(\"-\", \"_\")\n            )\n            if os.path.exists(out_path):\n                print(\"Skipping as exists: \", out_path)\n                continue\n            \n            assert len(ds[split]) > 0, f\"Got empty: {ds_name}\"\n\n            try:\n                if ds_name == \"allenai/wmt22_african\":\n                    # Sort by laser score, i.e. by increasing confidence & limit samples due to mediocre quality\n                    ds[split] = ds[split].sort(\"laser_score\", reverse=True)\n                    max_range = min(len(ds[split]), MAX_EXAMPLES_PER_DATASET_PROMPT // 2)\n                else:\n                    # Allow 5x buffer for empty examples\n                    max_range = min(len(ds[split]), MAX_EXAMPLES_PER_DATASET_PROMPT * 5)\n                # Shuffle to avoid using the same subset\n                # Leave \\n in-between input & targets for code\n                out_ds = apply_template(\n                    dataset=ds[split].shuffle().select(list(range(max_range))), \n                    template=prompts[t_name],\n                    strip_connection=False if lang_dir == \"code\" else True\n                )\n                # Keep X shortest examples\n                max_range = min(len(out_ds), MAX_EXAMPLES_PER_DATASET_PROMPT)\n                out_ds = out_ds.sort(\"inputs\").select(list(range(max_range)))\n            except Exception as e:\n                print(f\"Skipping due to {e}. DS: {ds_name}/{subset_name} Template: {t_name}\")\n                continue\n            # Do not force ascii to allow chars like é\n            if len(out_ds) > 0:\n                def add_cols(example, keys, values):\n                    for key, value in zip(keys, values):\n                        example[key] = value\n                    return example\n                out_ds = out_ds.map(\n                    lambda x: add_cols(\n                        x, \n                        [\"language\", \"split\", \"template\", \"dataset\", \"config\"], \n                        [lang_dir, split, t_name, ds_name, subset_name]\n                    )\n                )\n                out_ds.to_json(out_path, orient=\"records\", lines=True, force_ascii=False)\n            else:\n                print(f\"Skipping due to empty. DS: {ds_name}/{subset_name} Template: {t_name}\")\n\n# Testing:\n#TRAIN_DATASETS = [\n#    ('xquad', 'xquad.ar'),\n#]\n\n#print(DS_TO_LANG)\n\n#for ds in TRAIN_DATASETS:\n#    write_to_jsonl_hub(ds)\n    \nif __name__ == \"__main__\":\n    with multiprocessing.Pool(processes=multiprocessing.cpu_count()) as pool:\n        pool.map(write_to_jsonl_hub, TRAIN_DATASETS)\n\n",
        "plotstables/contamination/probe_contamination.py": "import nltk \nimport cld3\nfrom multiprocessing import Pool\nimport threading\nfrom concurrent.futures import ThreadPoolExecutor\n\nnltk.download(\"punkt\", quiet=True)\nclass CustomLanguageVars(nltk.tokenize.punkt.PunktLanguageVars):\n\n    _period_context_fmt = r\"\"\"\n        \\S*                          # some word material\n        %(SentEndChars)s             # a potential sentence ending\n        \\s*                       #  <-- THIS is what I changed\n        (?=(?P<after_tok>\n            %(NonWord)s              # either other punctuation\n            |\n            (?P<next_tok>\\S+)     #  <-- Normally you would have \\s+ here\n        ))\"\"\"\n\nsplitter = nltk.load(\"tokenizers/punkt/english.pickle\")\nnltk_splitter = nltk.tokenize.punkt.PunktSentenceTokenizer(\n                    train_text = splitter._params,\n                    lang_vars = CustomLanguageVars())\n\nfrom tqdm import tqdm \nimport json\nimport argparse\n\nparser = argparse.ArgumentParser(description='Chunk')\nparser.add_argument('--start_idx', type=int)\nargs = parser.parse_args()\nlines_total = 50913583\nlines_threads = 64\nlines_interval = lines_total // lines_threads\n\nlines_start_idx = args.start_idx * lines_interval\nlines_end_idx = min(lines_total, (args.start_idx+1) * lines_interval)\n\nbloom_dir = \"/tmp/\"\n\nfile_name = \"roots_1e-1_train\"\nout_file = \"roots_1e-1_meta_mp\"\nimport itertools\nimport os\n\ndef process_lines(line):\n    data = json.loads(line)\n    meta_data = dict( data )\n    meta_data.pop('text')\n    text = data['text']\n    meta_data['cld3_language'] = []\n    meta_data['cld3_confidence'] = []\n    meta_data['cld3_reliable'] = []\n    for sentence in nltk_splitter.tokenize(text):\n        detect_res = cld3.get_language(sentence)\n        meta_data['cld3_language'].append( detect_res.language )\n        meta_data['cld3_confidence'].append( detect_res.probability )\n        meta_data['cld3_reliable'].append( detect_res.is_reliable )\n    return meta_data\n\nline_idx = 0\nline_idxs = list(range(lines_start_idx, lines_end_idx))\nprint(lines_start_idx, lines_end_idx)\nwith open(f'{bloom_dir}/{file_name}.jsonl', 'r', encoding='utf-8') as fin \\\n, open(f'{bloom_dir}/mp/{out_file}_{args.start_idx}.jsonl', \"w\") as fout:\n    lines = itertools.islice(fin, lines_start_idx, lines_end_idx)\n    for line in tqdm(lines):\n        meta_data = process_lines(line)\n        fout.write(f\"{json.dumps(meta_data)}\\n\")\n    ",
        "plotstables/countcode.py": "# pip install -q datasets\nfrom datasets import load_dataset\nds = load_dataset(\"bigscience/xP3\", \"code\", use_auth_token=\"YOUR_AUTH_KEY\")\n\n\ndef count_comments(x):\n    x[\"counts\"] = x[\"targets\"].count(\"#\")\n    return x\ncounts = ds[\"train\"].map(lambda x: count_comments(x))\n\nchar_count = sum([len(t) for t in counts[\"targets\"]])\nchar_avg = char_count / len(counts)\n\ncomment_count = sum(counts[\"counts\"])\ncomment_avg = comment_count / len(counts)\n\nprint(f\"Char Avg {char_avg} ; Comment Avg {comment_avg}\")\n# Char Avg 530.5055696223101 ; Comment Avg 0.8540124473543094\n\n",
        "plotstables/examples/bloom_code_example.py": "# BLOOM\nprint(\"from typing import List\\n\\n\\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\\n    \\\"\\\"\\\" Check if in given list of numbers, are any two numbers closer to each other than\\n    given threshold.\\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\\n    False\\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\\n    True\\n    \\\"\\\"\\\"\\n    if len(numbers) <= 1:\\n        return False\\n    numbers = sorted(numbers)\\n    i = 0\\n    while i < len(numbers) - 1:\\n        # Get distance between current and next elements\\n        distance = numbers[i] - numbers[i + 1]\\n\\n        # Check if distance is closer than threshold\\n        if distance < threshold:\\n            return True\\n        i += 1\\n    return False\")\n# BLOOMZ\nprint(\"from typing import List\\n\\n\\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\\n    \\\"\\\"\\\" Check if in given list of numbers, are any two numbers closer to each other than\\n    given threshold.\\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\\n    False\\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\\n    True\\n    \\\"\\\"\\\"\\n    numbers = sorted(numbers)\\n    return any(numbers[i + 1] - numbers[i] < threshold for i in range(len(numbers) - 1))\")\n\n\n\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    if len(numbers) <= 1:\n        return False\n    numbers = sorted(numbers)\n    i = 0\n    while i < len(numbers) - 1:\n        # Get distance between current and next elements\n        distance = numbers[i] - numbers[i + 1]\n\n        # Check if distance is closer than threshold\n        if distance < threshold:\n            return True\n        i += 1\n    return False\n\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers = sorted(numbers)\n    return any(numbers[i + 1] - numbers[i] < threshold for i in range(len(numbers) - 1))\n",
        "plotstables/levenshtein.py": "# !pip install -q datasets\n# !pip install -q python-Levenshtein\n\nfrom datasets import load_dataset\nfrom Levenshtein import distance as levenshtein_distance\n\n\nlangs = [\"th\", \"tr\", \"el\"]\n\ndef compute_lev(sample):\n    sample[\"levenshtein\"] = levenshtein_distance(sample[\"premise\"], sample[\"hypothesis\"])\n    return sample\n\nfor lang in langs:\n    print(\"Language:\", lang)\n    xnli_th = load_dataset(\"xnli\", lang)\n\n    xnli_th_val = xnli_th[\"validation\"]\n    xnli_th_val_lev = xnli_th_val.map(compute_lev)\n\n    xnli_th_val_lev_laba = xnli_th_val_lev.filter(lambda x: x[\"label\"] == 0)\n    xnli_th_val_lev_labb = xnli_th_val_lev.filter(lambda x: x[\"label\"] == 1)\n    xnli_th_val_lev_labc = xnli_th_val_lev.filter(lambda x: x[\"label\"] == 2)\n\n    laba_avg = sum(xnli_th_val_lev_laba[\"levenshtein\"]) / len(xnli_th_val_lev_laba[\"levenshtein\"])\n    labb_avg = sum(xnli_th_val_lev_labb[\"levenshtein\"]) / len(xnli_th_val_lev_labb[\"levenshtein\"])\n    labc_avg = sum(xnli_th_val_lev_labc[\"levenshtein\"]) / len(xnli_th_val_lev_labc[\"levenshtein\"])\n\n    assert len(xnli_th_val_lev_laba) == len(xnli_th_val_lev_labb) == len(xnli_th_val_lev_labc)\n\n    print(\"Entailment: \", laba_avg)\n    print(\"Neutral: \", labb_avg)\n    print(\"Contradiction: \", labc_avg)\n    print(\"Samples: \", len(xnli_th_val_lev_labc))\n    print(\"-\"*50)\n\n# Output:\n\"\"\"\nLanguage: th\nWARNING:datasets.builder:Found cached dataset xnli (/root/.cache/huggingface/datasets/xnli/th/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd)\n100%\n3/3 [00:00<00:00, 57.44it/s]\nWARNING:datasets.arrow_dataset:Loading cached processed dataset at /root/.cache/huggingface/datasets/xnli/th/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd/cache-5936ac8dd6e492bf.arrow\nWARNING:datasets.arrow_dataset:Loading cached processed dataset at /root/.cache/huggingface/datasets/xnli/th/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd/cache-166b8840e7ce693d.arrow\nWARNING:datasets.arrow_dataset:Loading cached processed dataset at /root/.cache/huggingface/datasets/xnli/th/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd/cache-fa931d7605599d3f.arrow\nWARNING:datasets.arrow_dataset:Loading cached processed dataset at /root/.cache/huggingface/datasets/xnli/th/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd/cache-81b851032ab1083e.arrow\nEntailment:  79.07710843373494\nNeutral:  82.63734939759036\nContradiction:  81.51807228915662\nSamples:  830\n--------------------------------------------------\nLanguage: tr\nWARNING:datasets.builder:Found cached dataset xnli (/root/.cache/huggingface/datasets/xnli/tr/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd)\n100%\n3/3 [00:00<00:00, 63.90it/s]\nWARNING:datasets.arrow_dataset:Loading cached processed dataset at /root/.cache/huggingface/datasets/xnli/tr/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd/cache-83a0fd0b8e2cfe5d.arrow\nWARNING:datasets.arrow_dataset:Loading cached processed dataset at /root/.cache/huggingface/datasets/xnli/tr/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd/cache-f83874828d44e3e4.arrow\nWARNING:datasets.arrow_dataset:Loading cached processed dataset at /root/.cache/huggingface/datasets/xnli/tr/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd/cache-74f594889e89abd6.arrow\nWARNING:datasets.arrow_dataset:Loading cached processed dataset at /root/.cache/huggingface/datasets/xnli/tr/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd/cache-7211cfac9c66d373.arrow\nEntailment:  76.93012048192772\nNeutral:  80.59397590361446\nContradiction:  80.23614457831326\nSamples:  830\n--------------------------------------------------\nLanguage: el\nWARNING:datasets.builder:Found cached dataset xnli (/root/.cache/huggingface/datasets/xnli/el/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd)\n100%\n3/3 [00:00<00:00, 45.74it/s]\nWARNING:datasets.arrow_dataset:Loading cached processed dataset at /root/.cache/huggingface/datasets/xnli/el/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd/cache-839eb2a2fba23232.arrow\nWARNING:datasets.arrow_dataset:Loading cached processed dataset at /root/.cache/huggingface/datasets/xnli/el/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd/cache-62597a0af99af80f.arrow\nWARNING:datasets.arrow_dataset:Loading cached processed dataset at /root/.cache/huggingface/datasets/xnli/el/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd/cache-88535a8382d302a3.arrow\nWARNING:datasets.arrow_dataset:Loading cached processed dataset at /root/.cache/huggingface/datasets/xnli/el/1.1.0/818164464f9c9fd15776ca8a00423b074344c3e929d00a2c1a84aa5a50c928bd/cache-18a6b23de04fdc0c.arrow\nEntailment:  90.89518072289157\nNeutral:  95.09879518072289\nContradiction:  93.93132530120482\nSamples:  830\n--------------------------------------------------\n\"\"\"\n"
    }
}