{
  "model_id": "tokyotech-llm/llama-3-swallow-8b-instruct-v0.1",
  "full_texts": [
    {
      "arxiv_id": "https://r.jina.ai/https://ai.meta.com/blog/meta-llama-3/",
      "full_text": "Title: Introducing Meta Llama 3: The most capable openly available LLM to date\n\nURL Source: https://ai.meta.com/blog/meta-llama-3/\n\nMarkdown Content:\nTakeaways:\n----------\n\nRECOMMENDED READS\n\n*   [5 Steps to Getting Started with Llama 2](https://ai.meta.com/blog/5-steps-to-getting-started-with-llama-2/)\n*   [The Llama Ecosystem: Past, Present, and Future](https://ai.meta.com/blog/llama-2-updates-connect-2023/)\n*   [Introducing Code Llama, a state-of-the-art large language model for coding](https://ai.meta.com/blog/code-llama-large-language-model-coding/)\n*   [Meta and Microsoft Introduce the Next Generation of Llama](https://ai.meta.com/blog/llama-2/)\n\n*   Today, we’re introducing Meta Llama 3, the next generation of our state-of-the-art open source large language model.\n*   Llama 3 models will soon be available on AWS, Databricks, Google Cloud, Hugging Face, Kaggle, IBM WatsonX, Microsoft Azure, NVIDIA NIM, and Snowflake, and with support from hardware platforms offered by AMD, AWS, Dell, Intel, NVIDIA, and Qualcomm.\n*   We’re dedicated to developing Llama 3 in a responsible way, and we’re offering various resources to help others use it responsibly as well. This includes introducing new trust and safety tools with Llama Guard 2, Code Shield, and CyberSec Eval 2.\n*   In the coming months, we expect to introduce new capabilities, longer context windows, additional model sizes, and enhanced performance, and we’ll share the Llama 3 research paper.\n*   Meta AI, built with Llama 3 technology, is now one of the world’s leading AI assistants that can boost your intelligence and lighten your load—helping you learn, get things done, create content, and connect to make the most out of every moment. You can try Meta AI [here](https://meta.ai/).\n\nToday, we’re excited to share the first two models of the next generation of Llama, Meta Llama 3, available for broad use. This release features pretrained and instruction-fine-tuned language models with 8B and 70B parameters that can support a broad range of use cases. This next generation of Llama demonstrates state-of-the-art performance on a wide range of industry benchmarks and offers new capabilities, including improved reasoning. We believe these are the best open source models of their class, period. In support of our longstanding open approach, we’re putting Llama 3 in the hands of the community. We want to kickstart the next wave of innovation in AI across the stack—from applications to developer tools to evals to inference optimizations and more. We can’t wait to see what you build and look forward to your feedback.\n\nOur goals for Llama 3\n---------------------\n\nWith Llama 3, we set out to build the best open models that are on par with the best proprietary models available today. We wanted to address developer feedback to increase the overall helpfulness of Llama 3 and are doing so while continuing to play a leading role on responsible use and deployment of LLMs. We are embracing the open source ethos of releasing early and often to enable the community to get access to these models while they are still in development. The text-based models we are releasing today are the first in the Llama 3 collection of models. Our goal in the near future is to make Llama 3 multilingual and multimodal, have longer context, and continue to improve overall performance across core LLM capabilities such as reasoning and coding.\n\nState-of-the-art performance\n----------------------------\n\nOur new 8B and 70B parameter Llama 3 models are a major leap over Llama 2 and establish a new state-of-the-art for LLM models at those scales. Thanks to improvements in pretraining and post-training, our pretrained and instruction-fine-tuned models are the best models existing today at the 8B and 70B parameter scale. Improvements in our post-training procedures substantially reduced false refusal rates, improved alignment, and increased diversity in model responses. We also saw greatly improved capabilities like reasoning, code generation, and instruction following making Llama 3 more steerable.\n\n![Image 1](https://scontent-sof1-1.xx.fbcdn.net/v/t39.2365-6/438037375_405784438908376_6082258861354187544_n.png?_nc_cat=106&ccb=1-7&_nc_sid=e280be&_nc_ohc=209I7dqBrQ0Q7kNvwFfE7Af&_nc_oc=Adl4tObWKPqqq2872YmSXm1nVA4CZtoE2maApHSCtpKDVBPqFl8spdc1bwT17yZStjh4pF_T0a7ZfgvmHbdBHgyc&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=ShlSg_E4t1EXrc1vYCSxGA&oh=00_AfaaX_0-BA-z_Gy-OxDbnrz-yzpF4CI2KarN4M-Wl5dF3Q&oe=68E5398A)\n\n*Please see [evaluation details](https://github.com/meta-llama/llama3/blob/main/eval_details.md) for setting and parameters with which these evaluations are calculated.\n\nIn the development of Llama 3, we looked at model performance on standard benchmarks and also sought to optimize for performance for real-world scenarios. To this end, we developed a new high-quality human evaluation set. This evaluation set contains 1,800 prompts that cover 12 key use cases: asking for advice, brainstorming, classification, closed question answering, coding, creative writing, extraction, inhabiting a character/persona, open question answering, reasoning, rewriting, and summarization. To prevent accidental overfitting of our models on this evaluation set, even our own modeling teams do not have access to it. The chart below shows aggregated results of our human evaluations across of these categories and prompts against Claude Sonnet, Mistral Medium, and GPT-3.5.\n\n![Image 2](https://scontent-sof1-2.xx.fbcdn.net/v/t39.2365-6/438998263_1368970367138244_7396600838045603809_n.png?_nc_cat=111&ccb=1-7&_nc_sid=e280be&_nc_ohc=_k4DsicDCgYQ7kNvwF96X-c&_nc_oc=Admqt9RXW8GCmaveRmzFU8d95lmTAc-5HdWuzR2wrltPFxEMdeqVr65B_wN5alxHvoEt9TQc-j7Jf8gWsh4Ij0__&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=ShlSg_E4t1EXrc1vYCSxGA&oh=00_AfZT03tngvCVwxvIuHUGIFhYlbUelpWF5eNlqiQrJjomlw&oe=68E51ECF)\n\nPreference rankings by human annotators based on this evaluation set highlight the strong performance of our 70B instruction-following model compared to competing models of comparable size in real-world scenarios.\n\nOur pretrained model also establishes a new state-of-the-art for LLM models at those scales.\n\n![Image 3](https://scontent-sof1-2.xx.fbcdn.net/v/t39.2365-6/439014085_432870519293677_8138616034495713484_n.png?_nc_cat=109&ccb=1-7&_nc_sid=e280be&_nc_ohc=uGEYfYP0q50Q7kNvwEwMj7f&_nc_oc=Adl-gXHWbcTlKfun0nBhyss404OPdfHzsxoFA6LgvdeJEOY8W4wyuP8OoWMP8WVwsAhd8LULKFdxdJkK2_h8vuaK&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=ShlSg_E4t1EXrc1vYCSxGA&oh=00_AfbOjUsuUH0eiECHaFxWoaY5OEYWqSJuVMDv1tIOrQMneQ&oe=68E540B4)\n\n*Please see [evaluation details](https://github.com/meta-llama/llama3/blob/main/eval_details.md) for setting and parameters with which these evaluations are calculated.\n\nTo develop a great language model, we believe it’s important to innovate, scale, and optimize for simplicity. We adopted this design philosophy throughout the Llama 3 project with a focus on four key ingredients: the model architecture, the pretraining data, scaling up pretraining, and instruction fine-tuning.\n\nModel architecture\n------------------\n\nIn line with our design philosophy, we opted for a relatively standard decoder-only transformer architecture in Llama 3. Compared to Llama 2, we made several key improvements. Llama 3 uses a tokenizer with a vocabulary of 128K tokens that encodes language much more efficiently, which leads to substantially improved model performance. To improve the inference efficiency of Llama 3 models, we’ve adopted grouped query attention (GQA) across both the 8B and 70B sizes. We trained the models on sequences of 8,192 tokens, using a mask to ensure self-attention does not cross document boundaries.\n\nTraining data\n-------------\n\nTo train the best language model, the curation of a large, high-quality training dataset is paramount. In line with our design principles, we invested heavily in pretraining data. Llama 3 is pretrained on over 15T tokens that were all collected from publicly available sources. Our training dataset is seven times larger than that used for Llama 2, and it includes four times more code. To prepare for upcoming multilingual use cases, over 5% of the Llama 3 pretraining dataset consists of high-quality non-English data that covers over 30 languages. However, we do not expect the same level of performance in these languages as in English.\n\nTo ensure Llama 3 is trained on data of the highest quality, we developed a series of data-filtering pipelines. These pipelines include using heuristic filters, NSFW filters, semantic deduplication approaches, and text classifiers to predict data quality. We found that previous generations of Llama are surprisingly good at identifying high-quality data, hence we used Llama 2 to generate the training data for the text-quality classifiers that are powering Llama 3.\n\nWe also performed extensive experiments to evaluate the best ways of mixing data from different sources in our final pretraining dataset. These experiments enabled us to select a data mix that ensures that Llama 3 performs well across use cases including trivia questions, STEM, coding, historical knowledge, _etc._\n\nScaling up pretraining\n----------------------\n\nTo effectively leverage our pretraining data in Llama 3 models, we put substantial effort into scaling up pretraining. Specifically, we have developed a series of detailed scaling laws for downstream benchmark evaluations. These scaling laws enable us to select an optimal data mix and to make informed decisions on how to best use our training compute. Importantly, scaling laws allow us to predict the performance of our largest models on key tasks (for example, code generation as evaluated on the HumanEval benchmark—see above) before we actually train the models. This helps us ensure strong performance of our final models across a variety of use cases and capabilities.\n\nWe made several new observations on scaling behavior during the development of Llama 3. For example, while the Chinchilla-optimal amount of training compute for an 8B parameter model corresponds to ~200B tokens, we found that model performance continues to improve even after the model is trained on two orders of magnitude more data. Both our 8B and 70B parameter models continued to improve log-linearly after we trained them on up to 15T tokens. Larger models can match the performance of these smaller models with less training compute, but smaller models are generally preferred because they are much more efficient during inference.\n\nTo train our largest Llama 3 models, we combined three types of parallelization: data parallelization, model parallelization, and pipeline parallelization. Our most efficient implementation achieves a compute utilization of over 400 TFLOPS per GPU when trained on 16K GPUs simultaneously. We performed training runs on two custom-built [24K GPU clusters](https://engineering.fb.com/2024/03/12/data-center-engineering/building-metas-genai-infrastructure/). To maximize GPU uptime, we developed an advanced new training stack that automates error detection, handling, and maintenance. We also greatly improved our hardware reliability and detection mechanisms for silent data corruption, and we developed new scalable storage systems that reduce overheads of checkpointing and rollback. Those improvements resulted in an overall effective training time of more than 95%. Combined, these improvements increased the efficiency of Llama 3 training by ~three times compared to Llama 2.\n\nInstruction fine-tuning\n-----------------------\n\nTo fully unlock the potential of our pretrained models in chat use cases, we innovated on our approach to instruction-tuning as well. Our approach to post-training is a combination of supervised fine-tuning (SFT), rejection sampling, proximal policy optimization (PPO), and direct preference optimization (DPO). The quality of the prompts that are used in SFT and the preference rankings that are used in PPO and DPO has an outsized influence on the performance of aligned models. Some of our biggest improvements in model quality came from carefully curating this data and performing multiple rounds of quality assurance on annotations provided by human annotators.\n\nLearning from preference rankings via PPO and DPO also greatly improved the performance of Llama 3 on reasoning and coding tasks. We found that if you ask a model a reasoning question that it struggles to answer, the model will sometimes produce the right reasoning trace: The model knows how to produce the right answer, but it does not know how to select it. Training on preference rankings enables the model to learn how to select it.\n\nBuilding with Llama 3\n---------------------\n\nOur vision is to enable developers to customize Llama 3 to support relevant use cases and to make it easier to adopt best practices and improve the open ecosystem. With this release, we’re providing new trust and safety tools including updated [components](https://github.com/meta-llama/PurpleLlama) with both Llama Guard 2 and Cybersec Eval 2, and the introduction of Code Shield—an inference time guardrail for filtering insecure code produced by LLMs.\n\nWe’ve also co-developed Llama 3 with [torchtune](https://github.com/pytorch/torchtune), the new PyTorch-native library for easily authoring, fine-tuning, and experimenting with LLMs. torchtune provides memory efficient and hackable training recipes written entirely in PyTorch. The library is integrated with popular platforms such as Hugging Face, Weights & Biases, and EleutherAI and even supports Executorch for enabling efficient inference to be run on a wide variety of mobile and edge devices. For everything from prompt engineering to using Llama 3 with LangChain we have a comprehensive [getting started guide](https://llama.meta.com/get-started/) and takes you from downloading Llama 3 all the way to deployment at scale within your generative AI application.\n\nA system-level approach to responsibility\n-----------------------------------------\n\nWe have designed Llama 3 models to be maximally helpful while ensuring an industry leading approach to responsibly deploying them. To achieve this, we have adopted [a new, system-level approach](https://ai.meta.com/blog/meta-llama-3-meta-ai-responsibility/) to the responsible development and deployment of Llama. We envision Llama models as part of a broader system that puts the developer in the driver’s seat. Llama models will serve as a foundational piece of a system that developers design with their unique end goals in mind.\n\n![Image 4](https://scontent-sof1-2.xx.fbcdn.net/v/t39.2365-6/438922663_1135166371264105_805978695964769385_n.png?_nc_cat=107&ccb=1-7&_nc_sid=e280be&_nc_ohc=n4-j8mVMNCEQ7kNvwEIp8nT&_nc_oc=AdnAHAGVu3uep3dUIO4_4L1rAE9ISDReVxF2vOr3yclk0dEl5nr-iOJCEDWqrbwIH5YTjldeX1UnE0wtW9H4t6fY&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=ShlSg_E4t1EXrc1vYCSxGA&oh=00_AfYrEpbsirc1Tn8e9APkzKbO625jpyepljZOe_m8GWCTkw&oe=68E5275E)\n\nInstruction fine-tuning also plays a major role in ensuring the safety of our models. Our instruction-fine-tuned models have been red-teamed (tested) for safety through internal and external efforts. ​​Our red teaming approach leverages human experts and automation methods to generate adversarial prompts that try to elicit problematic responses. For instance, we apply comprehensive testing to assess risks of misuse related to Chemical, Biological, Cyber Security, and other risk areas. All of these efforts are iterative and used to inform safety fine-tuning of the models being released. You can read more about our efforts in the [model card](https://github.com/meta-llama/llama3/blob/main/MODEL_CARD.md).\n\nLlama Guard models are meant to be a foundation for prompt and response safety and can easily be fine-tuned to create a new taxonomy depending on application needs. As a starting point, the new Llama Guard 2 uses the recently [announced](https://mlcommons.org/2024/04/mlc-aisafety-v0-5-poc/) MLCommons taxonomy, in an effort to support the emergence of industry standards in this important area. Additionally, CyberSecEval 2 expands on its predecessor by adding measures of an LLM’s propensity to allow for abuse of its code interpreter, offensive cybersecurity capabilities, and susceptibility to prompt injection attacks (learn more in [our technical paper](https://ai.meta.com/research/publications/cyberseceval-2-a-wide-ranging-cybersecurity-evaluation-suite-for-large-language-models/)). Finally, we’re introducing Code Shield which adds support for inference-time filtering of insecure code produced by LLMs. This offers mitigation of risks around insecure code suggestions, code interpreter abuse prevention, and secure command execution.\n\nWith the speed at which the generative AI space is moving, we believe an open approach is an important way to bring the ecosystem together and mitigate these potential harms. As part of that, we’re updating our [Responsible Use Guide](https://llama.meta.com/responsible-use-guide) (RUG) that provides a comprehensive guide to responsible development with LLMs. As we outlined in the RUG, we recommend that all inputs and outputs be checked and filtered in accordance with content guidelines appropriate to the application. Additionally, many cloud service providers offer content moderation APIs and other tools for responsible deployment, and we encourage developers to also consider using these options.\n\nDeploying Llama 3 at scale\n--------------------------\n\nLlama 3 will soon be available on all major platforms including cloud providers, model API providers, and much more. Llama 3 will be [everywhere](https://llama.meta.com/get-started/).\n\nOur benchmarks show the tokenizer offers improved token efficiency, yielding up to 15% fewer tokens compared to Llama 2. Also, Group Query Attention (GQA) now has been added to Llama 3 8B as well. As a result, we observed that despite the model having 1B more parameters compared to Llama 2 7B, the improved tokenizer efficiency and GQA contribute to maintaining the inference efficiency on par with Llama 2 7B.\n\nFor examples of how to leverage all of these capabilities, check out [Llama Recipes](https://github.com/meta-llama/llama-recipes) which contains all of our open source code that can be leveraged for everything from fine-tuning to deployment to model evaluation.\n\nWhat’s next for Llama 3?\n------------------------\n\nThe Llama 3 8B and 70B models mark the beginning of what we plan to release for Llama 3. And there’s a lot more to come.\n\nOur largest models are over 400B parameters and, while these models are still training, our team is excited about how they’re trending. Over the coming months, we’ll release multiple models with new capabilities including multimodality, the ability to converse in multiple languages, a much longer context window, and stronger overall capabilities. We will also publish a detailed research paper once we are done training Llama 3.\n\nTo give you a sneak preview for where these models are today as they continue training, we thought we could share some snapshots of how our largest LLM model is trending. Please note that this data is based on an early checkpoint of Llama 3 that is still training and these capabilities are not supported as part of the models released today.\n\n![Image 5](https://scontent-sof1-1.xx.fbcdn.net/v/t39.2365-6/439015366_1603174683862748_5008894608826037916_n.png?_nc_cat=105&ccb=1-7&_nc_sid=e280be&_nc_ohc=EnJpIQtqfWgQ7kNvwEEQmMI&_nc_oc=Admrc6aU-J040Mj7DLFGX14ZZVaIJTbC6l9oY4V8ZxPBntqicTE1eL250MilyjQYfSmx2-rVov24sQLY4Lf4IZX6&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=ShlSg_E4t1EXrc1vYCSxGA&oh=00_AfaHTYjcW2Lt_4zsRTO3EOKbZoKDKt4DCRZiwmagI3fwjQ&oe=68E5426A)\n\n*Please see [evaluation details](https://github.com/meta-llama/llama3/blob/main/eval_details.md) for setting and parameters with which these evaluations are calculated.\n\nWe’re committed to the continued growth and development of an open AI ecosystem for releasing our models responsibly. We have long believed that openness leads to better, safer products, faster innovation, and a healthier overall market. This is good for Meta, and it is good for society. We’re taking a community-first approach with Llama 3, and starting today, these models are available on the leading cloud, hosting, and hardware platforms with many more to come.\n\nTry Meta Llama 3 today\n----------------------\n\nWe’ve integrated our latest models into Meta AI, which we believe is the world’s leading AI assistant. It’s now built with Llama 3 technology and it’s available in more countries across our apps.\n\nYou can use Meta AI on Facebook, Instagram, WhatsApp, Messenger, and [the web](https://meta.ai/) to get things done, learn, create, and connect with the things that matter to you. You can read more about the Meta AI experience [here](https://about.fb.com/news/2024/04/meta-ai-assistant-built-with-llama-3/).\n\nVisit the[Llama 3 website](https://llama.meta.com/llama3) to download the models and reference the[Getting Started Guide](https://llama.meta.com/get-started/) for the latest list of all available platforms.\n\nYou’ll also soon be able to test multimodal Meta AI on our Ray-Ban Meta smart glasses.\n\nAs always, we look forward to seeing all the amazing products and experiences you will build with Meta Llama 3.\n",
      "fetch_method": "jina-reader"
    },
    {
      "arxiv_id": "https://r.jina.ai/https://ai.meta.com/blog/",
      "full_text": "Title: AI at Meta Blog\n\nURL Source: https://ai.meta.com/blog/\n\nMarkdown Content:\nAI at Meta Blog\n\n===============\n\n[](https://ai.meta.com/blog/# \"Go up one level\")[![Image 10: Meta](https://scontent-sof1-2.xx.fbcdn.net/v/t39.8562-6/252294889_575082167077436_6034106545912333281_n.svg/meta-logo-primary_standardsize.svg?_nc_cat=1&ccb=1-7&_nc_sid=e280be&_nc_ohc=ueHbDPX7R-8Q7kNvwF89HoM&_nc_oc=AdnYo7P7wgXYxeE7-Z8qaAu4twTlXIiIWaFj6hNn_WIGyrEi3wKfBFJLUqFja4KmTha2NDNAUUVV2GdnqK9XHYpI&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_Afbu9shxThOhrr9dRDTRxw2z9jjFApmx02s8dm2yBnOVsQ&oe=68D0D539)](https://ai.meta.com/)\n*   [Meta AI](https://ai.meta.com/blog/#) \n*   [AI Research](https://ai.meta.com/blog/#) \n*   [The Latest](https://ai.meta.com/blog/) \n*   [About](https://ai.meta.com/blog/#) \n*   [Get Llama](https://www.llama.com/?utm_source=ai_meta_site&utm_medium=web&utm_content=AI_nav&utm_campaign=09052025_moment) \n\n*   [Try Meta AI](https://www.meta.ai/?utm_source=ai_meta_site&utm_medium=web&utm_content=AI_nav&utm_campaign=09052025_moment)\n*   [](https://ai.meta.com/blog/# \"Toggle site search\") \n\n[](https://ai.meta.com/blog/# \"Close submenu\")[](https://ai.meta.com/blog/# \"Main menu\")\n\n[BACK](https://ai.meta.com/blog/# \"Go up one level\")\n\n*   [Explore Meta AI](https://ai.meta.com/meta-ai/)\n*   [Get Meta AI](https://ai.meta.com/get-meta-ai/)\n*   [Meta AI Studio](https://ai.meta.com/ai-studio/)\n\n*   [Overview](https://ai.meta.com/research/)\n*   [Projects](https://ai.meta.com/research/#projects)\n*   [Research Areas](https://ai.meta.com/research/#research-areas)\n*   [People](https://ai.meta.com/results/?content_types[0]=person)\n\n*   [Overview](https://ai.meta.com/about/)\n*   [Open Source](https://ai.meta.com/opensourceai/)\n*   [Careers](https://www.metacareers.com/)\n\nClear\n\n*   Clear   \n*   [Meta AI >](https://ai.meta.com/blog/#) \n*   [AI Research >](https://ai.meta.com/blog/#) \n*   [The Latest](https://ai.meta.com/blog/)\n*   [About >](https://ai.meta.com/blog/#) \n*   [Get Llama](https://www.llama.com/?utm_source=ai_meta_site&utm_medium=web&utm_content=AI_nav&utm_campaign=09052025_moment)\n\n[Try Meta AI](https://www.meta.ai/?utm_source=ai_meta_site&utm_medium=web&utm_content=AI_nav&utm_campaign=09052025_moment)\n\nThe latest AI news from Meta\n\n[FEATURED ![Image 11](https://scontent-sof1-1.xx.fbcdn.net/v/t39.2365-6/531962783_1221397443074543_4195342750351180590_n.gif?_nc_cat=108&ccb=1-7&_nc_sid=e280be&_nc_ohc=GlB46AVqYOkQ7kNvwHyz6uB&_nc_oc=AdmJNeMyPnRlPrWk-YHmMB1RIDF7CS0XPR8WOyuBzz80jiVLz1I8aPcJiBKKYnqj1v3Iw56X8LUdeMiLdMAozwy0&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfbKwh8DUZSDTCSkezFOT3EcTB5a3WU_yNTkd7WtZ6qMIA&oe=68E55469)](https://ai.meta.com/blog/dinov3-self-supervised-vision-model/)\n\nOpen Source\n\n[DINOv3: Self-supervised learning for vision at unprecedented scale](https://ai.meta.com/blog/dinov3-self-supervised-vision-model/)\n\nDINOv3 scales self-supervised learning for images to create universal vision backbones that achieve absolute state-of-the-art performance across diverse domains, including web and satellite imagery.\n\nAugust 14, 2025\n\nLatest News\n\n[![Image 12](https://scontent-sof1-1.xx.fbcdn.net/v/t39.2365-6/532059419_1159626692796432_4760051607316339037_n.png?_nc_cat=101&ccb=1-7&_nc_sid=e280be&_nc_ohc=CwJhRqxjpQMQ7kNvwFewBOW&_nc_oc=AdnlWJOrePtCfA21xduN_dAjtNFwAp3HB08Rfl1Rkdy4Mn0adLEcYJklJ9gmJJZ8jSDc_kG3pVHqEvu62es-cfmy&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfZD2069LNDF6uDhBfwniwoqj7p6fhK8tJNAZYodMHmi9g&oe=68E52713)](https://ai.meta.com/blog/llama-oracle-help-students-in-brazil/)\n\nOpen Source\n\n[How Llama and Oracle are helping Instituto PROA kickstart careers for students in Brazil](https://ai.meta.com/blog/llama-oracle-help-students-in-brazil/)\n\nAug 27, 2025\n\n[![Image 13](https://scontent-sof1-1.xx.fbcdn.net/v/t39.2365-6/527921411_2457172288013343_1323178884043439975_n.png?_nc_cat=102&ccb=1-7&_nc_sid=e280be&_nc_ohc=WZX3-qDy86EQ7kNvwF5IF-y&_nc_oc=Adkx2Vsn3LAq6zY46WotP7umLDoIHXxFRbxbAdOkyJ6dCYVbZjI8F8ZitODRBdgOMntVXPmmMcPy8EqmhocwcolP&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfYaOIM6buejQJJyV3ZmrZhYyq4itaqYPqxX29mbrG5ZlA&oe=68E53505)](https://ai.meta.com/blog/nasa-jpl-dino-robot-explorers/)\n\nOpen Source\n\n[Small robots, mighty vision: NASA Jet Propulsion Laboratory's DINOv2-enabled robot rovers and the future of planetary exploration](https://ai.meta.com/blog/nasa-jpl-dino-robot-explorers/)\n\nAug 14, 2025\n\n[![Image 14](https://scontent-sof1-1.xx.fbcdn.net/v/t39.2365-6/532553566_774197078627099_5292500968323138459_n.png?_nc_cat=102&ccb=1-7&_nc_sid=e280be&_nc_ohc=RxrRLoadVcAQ7kNvwHZ0THi&_nc_oc=AdkFGaZSNI5JlRwUck-VJLLFY-y0i3dYoyb-o58zM8RyPQc_IMWq5okAHxpafiZB72uamApFU0Q3l7Em_1j9BFxQ&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfbXAhQ3IfIrt2dmOvXpNXgDrc01j98JcoXZo_eiqCw5kA&oe=68E53835)](https://ai.meta.com/blog/world-resources-institute-dinov3/)\n\nOpen Source\n\n[How DINOv3 is helping World Resources Institute restore forests and farms globally](https://ai.meta.com/blog/world-resources-institute-dinov3/)\n\nAug 14, 2025\n\n[![Image 15](https://scontent-sof1-2.xx.fbcdn.net/v/t39.2365-6/528410853_4083892945184275_6100634806326674200_n.jpg?_nc_cat=110&ccb=1-7&_nc_sid=e280be&_nc_ohc=TMerfRiGwIkQ7kNvwFZV27i&_nc_oc=AdlAzCM_DSLE8TLLFhGxxHfTTgBNRRB7Deljb-67qLnSOrpPEPqJ2k2YkzJ78mG5sAaNPXk4Z8xGha1fO3mj4Krz&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfbbnZy8h4EhRMCdyBn2XHM8h7SA2w1dFxkBlbqsIKuIdA&oe=68E52977)](https://ai.meta.com/blog/llama-helps-biofy-fight-antibiotic-resistance/)\n\nOpen Source\n\n[How Llama helps Biofy Technologies in the fight against antibiotic resistance](https://ai.meta.com/blog/llama-helps-biofy-fight-antibiotic-resistance/)\n\nAug 7, 2025\n\n* * *\n\nMore from AI at Meta\n\nFilter:\n\nAll\n\nFeatured\n\n ML applications\n\n Open source\n\n Research\n\n Computer vision\n\n Hardware\n\n Natural language processing\n\n Speech & Audio\n\n* * *\n\n[![Image 16](https://scontent-sof1-1.xx.fbcdn.net/v/t39.2365-6/525911517_763583199523319_1148911740457961155_n.png?_nc_cat=108&ccb=1-7&_nc_sid=e280be&_nc_ohc=B-4-nJuFFmQQ7kNvwGdSCqq&_nc_oc=Adno68aKlAR0iSvSQ1sxIFhl4wkD1HFhk5XtgZTH_CxUzxZLJH6fFUovcnyMF9eWMQkas7InEsYF1NVH0LuMW_Ue&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=t4NhulSSEfzZc-cVFZz02A&oh=00_Afbi9GAJfEdDXnNkn0enP-RLcXS68Eh0ukK-LnsZ1qW0vg&oe=68E53558)](https://ai.meta.com/blog/upwork-helps-freelancers-with-llama/)\n\nOpen Source\n\n[How Upwork helps freelancers win more work with Llama](https://ai.meta.com/blog/upwork-helps-freelancers-with-llama/)\n\nUpwork, one of the world’s largest work marketplaces, is using Llama to power Uma, its mindful AI, to help freelancers land jobs faster and more confidently.\n\nJuly 31, 2025\n\n[![Image 17](https://scontent-sof1-1.xx.fbcdn.net/v/t39.2365-6/519420961_903925431933844_6571497333803218581_n.png?_nc_cat=100&ccb=1-7&_nc_sid=e280be&_nc_ohc=kkr3UibgKRcQ7kNvwE8rYdw&_nc_oc=AdlPQK9sAYbX3pbUZpfA7LnWC-_P_mCApb5EkBtMYNYNuZ-qm4VMveGpRw9ZJtxPazZqPoZWQL_8t6zZmXt17PjE&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=t4NhulSSEfzZc-cVFZz02A&oh=00_Afbs1oV0Yn5U0UFttxakIhhVx7CqYIRljxcg671rl500LQ&oe=68E55345)](https://ai.meta.com/blog/aws-program-startups-build-with-llama/)\n\nOpen Source\n\n[Joining forces with AWS on a new program to help startups build with Llama](https://ai.meta.com/blog/aws-program-startups-build-with-llama/)\n\nWe're joining forces with Amazon Web Services to announce a new program that will provide resources and support to 30 promising startups in the U.S. that are building with Llama.\n\nJuly 21, 2025\n\n[![Image 18](https://scontent-sof1-1.xx.fbcdn.net/v/t39.2365-6/513299632_1777929793108543_6083053408152212084_n.gif?_nc_cat=105&ccb=1-7&_nc_sid=e280be&_nc_ohc=rP8YTqVGuaEQ7kNvwEnIiZK&_nc_oc=AdlAFXxmPf09jQGwbGPQZkvDHKAbaHaJrIkX-WKxXjHR-OSpJ3-6orG7rSAspgvI5PlHKPEjstX_nduTxaUWxB9N&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=t4NhulSSEfzZc-cVFZz02A&oh=00_AfYnfrYMGHLgcT5rn2sYVBB8ZGb-4Ged45Zm7aBeswVzSw&oe=68E53000)](https://ai.meta.com/blog/seamless-interaction-natural-conversational-dynamics/)\n\nOpen Source\n\n[Modeling natural conversational dynamics with Seamless Interaction](https://ai.meta.com/blog/seamless-interaction-natural-conversational-dynamics/)\nJune 27, 2025\n\n[![Image 19](https://scontent-sof1-2.xx.fbcdn.net/v/t39.2365-6/506435837_623618166663466_4115418445989642949_n.jpg?_nc_cat=103&ccb=1-7&_nc_sid=e280be&_nc_ohc=rffuDOrCFO8Q7kNvwEOO8Yz&_nc_oc=Adle2-b_aWYeXP8Wn69TcBOKpKb5LR-ks_6Wz9OvkuhRJIA7OK2M3AogW0KHGFOK3ozcFFJ2V4thmmWvwUKpD7pi&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=t4NhulSSEfzZc-cVFZz02A&oh=00_AfY9dRuMu76hJAPlV667pZdj43BGhY0Lhq5k2KH2CT0_9g&oe=68E51F84)](https://ai.meta.com/blog/llama-helps-efficiency-anz-bank/)\n\nOpen Source\n\n[How Llama helps drive engineering efficiency at a major Australian bank](https://ai.meta.com/blog/llama-helps-efficiency-anz-bank/)\n\nANZ, one of Australia's Big Four banks, is driving engineering efficiency with Llama.\n\nJune 18, 2025\n\n* * *\n\nLoad more\n\nGet the latest from AI at Meta in your inbox\n\n[Sign up](https://ai.meta.com/subscribe/)\n\n[Our approach](https://ai.meta.com/about)\n\n[About AI at Meta](https://ai.meta.com/about)\n\n[People](https://ai.meta.com/results/?content_types%5B0%5D=person&sort_by=random)\n\n[Careers](https://www.metacareers.com/jobs/?is_leadership=0&sub_teams[0]=Artificial%20Intelligence&is_in_page=0)\n\n[Research](https://ai.meta.com/research)\n\n[Infrastructure](https://ai.meta.com/infrastructure)\n\n[Resources](https://ai.meta.com/resources)\n\n[Demos](https://aidemos.meta.com/)\n\n[Meta AI](https://ai.meta.com/meta-ai/)\n\n[Explore Meta AI](https://ai.meta.com/meta-ai/)\n\n[Get Meta AI](https://ai.meta.com/get-meta-ai/)\n\n[AI Studio](https://ai.meta.com/ai-studio/)\n\n[Latest news](https://ai.meta.com/blog)\n\n[Blog](https://ai.meta.com/blog)\n\n[Newsletter](https://ai.meta.com/subscribe)\n\nFoundational models\n\n[Llama](https://www.llama.com/)\n\n![Image 20](https://scontent-sof1-2.xx.fbcdn.net/v/t39.2365-6/87524316_2677189655726266_6338721200264445952_n.svg?_nc_cat=103&ccb=1-7&_nc_sid=e280be&_nc_ohc=m1oiKPrr3IgQ7kNvwGuiPaU&_nc_oc=AdkZ-aslzpFraALAEofyg5Vzn8atF8Uvzb4xktxFh5G9vLhOTHIFGnkOgD7MhWMS8-PevIikK2uObiAhTh-L2e65&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfaGvh5fP9VnsoEctxX_N8qQYaC8NnySiZ9iQDgwJrkukw&oe=68E53EF8)\n\n![Image 21](https://scontent-sof1-2.xx.fbcdn.net/v/t39.2365-6/85559716_2814260008668824_1992323131183726592_n.svg?_nc_cat=103&ccb=1-7&_nc_sid=e280be&_nc_ohc=0HKqicxU5V8Q7kNvwHVGH6M&_nc_oc=AdlXXl3BkPPVBaU6WHg12ygljCJ0f8GojcFd8JDW6aotuk2YUEiW2Mj6yevzZjGXBNpYD-4c4X0EINFtfAZvmwkB&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfbxTS83QLEq-3OQNQJnf6ehmui_H08N32fHsEVSNv92Hg&oe=68E543CF)\n\n[![Image 22](https://scontent-sof1-1.xx.fbcdn.net/v/t39.8562-6/335682312_964107378293184_3093631164486164913_n.svg?_nc_cat=100&ccb=1-7&_nc_sid=e280be&_nc_ohc=H2xc0aEVR7YQ7kNvwH1Q2fl&_nc_oc=AdlBx5QaxpzrwyTusHfWsQE14u4bMWMLTl3mU04ZbEcQC-7CCfrNK4XJfmze6TlI59_JqQij01QLUzlrnLxz_b_n&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfYfPkarehp2uX3_lYfYBNX9tnRyTt02dRi_0Zj8YLzN8g&oe=68D0C567) ![Image 23](https://scontent-sof1-1.xx.fbcdn.net/v/t39.8562-6/335682312_964107378293184_3093631164486164913_n.svg?_nc_cat=100&ccb=1-7&_nc_sid=e280be&_nc_ohc=H2xc0aEVR7YQ7kNvwH1Q2fl&_nc_oc=AdlBx5QaxpzrwyTusHfWsQE14u4bMWMLTl3mU04ZbEcQC-7CCfrNK4XJfmze6TlI59_JqQij01QLUzlrnLxz_b_n&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfYfPkarehp2uX3_lYfYBNX9tnRyTt02dRi_0Zj8YLzN8g&oe=68D0C567)](https://www.facebook.com/aiatmeta/)\n\n[![Image 24](https://scontent-sof1-2.xx.fbcdn.net/v/t39.8562-6/336009607_1870102080040414_6753977241281150924_n.svg?_nc_cat=103&ccb=1-7&_nc_sid=e280be&_nc_ohc=zfwi0m_RmvYQ7kNvwHali1X&_nc_oc=AdkZoKCjgYgVD0oA6ku4Q-EcpADMRA3B8-2rPGLm_oKQF6ZsU24_v9aDYLsGX-SnLszpvA4eqU5JoAJJtIrINjr2&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfZXJDWaI7qKPgVPBnumevqH6BeI-E_fYsDdcu9dZGNlhA&oe=68D0BDA2) ![Image 25](https://scontent-sof1-2.xx.fbcdn.net/v/t39.8562-6/336009607_1870102080040414_6753977241281150924_n.svg?_nc_cat=103&ccb=1-7&_nc_sid=e280be&_nc_ohc=zfwi0m_RmvYQ7kNvwHali1X&_nc_oc=AdkZoKCjgYgVD0oA6ku4Q-EcpADMRA3B8-2rPGLm_oKQF6ZsU24_v9aDYLsGX-SnLszpvA4eqU5JoAJJtIrINjr2&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfZXJDWaI7qKPgVPBnumevqH6BeI-E_fYsDdcu9dZGNlhA&oe=68D0BDA2)](https://twitter.com/aiatmeta/)\n\n[![Image 26](https://scontent-sof1-2.xx.fbcdn.net/v/t39.8562-6/336289415_1541032296405649_2165099305308791297_n.svg?_nc_cat=109&ccb=1-7&_nc_sid=e280be&_nc_ohc=2Hh4WVIjUfoQ7kNvwGjxHIA&_nc_oc=AdkLjLTF7rFZPZ7lCaXyN6MfT0F1baW4BHM6qGHcmbvHMr6Ec_KQ-oau9RYVfMvM4Pgf7vv95NY4WLe2V7JWW4bE&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_Afb9larZE1UHDnxxUPKPOhsxndwy3uRW5wjWglKMmOceOA&oe=68D0B13B) ![Image 27](https://scontent-sof1-2.xx.fbcdn.net/v/t39.8562-6/336289415_1541032296405649_2165099305308791297_n.svg?_nc_cat=109&ccb=1-7&_nc_sid=e280be&_nc_ohc=2Hh4WVIjUfoQ7kNvwGjxHIA&_nc_oc=AdkLjLTF7rFZPZ7lCaXyN6MfT0F1baW4BHM6qGHcmbvHMr6Ec_KQ-oau9RYVfMvM4Pgf7vv95NY4WLe2V7JWW4bE&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_Afb9larZE1UHDnxxUPKPOhsxndwy3uRW5wjWglKMmOceOA&oe=68D0B13B)](https://www.linkedin.com/showcase/aiatmeta)\n\n[![Image 28](https://scontent-sof1-1.xx.fbcdn.net/v/t39.8562-6/335648731_142576991793348_7786819189843639239_n.svg?_nc_cat=108&ccb=1-7&_nc_sid=e280be&_nc_ohc=R5Ag-htkgxoQ7kNvwFYnm28&_nc_oc=Adn1xsXljDswdbDx8J1SsVx_qjrr0kntbb6X76eBrOXVT8K1XMd3AAbXMKVt8zc-Ffl3ugqfQWGSRLqvfUl2izRR&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfZy_i0MH09i7c__6eAM-GBEmwtx-BjwU4akhV3x9FlQmQ&oe=68D0CAAE) ![Image 29](https://scontent-sof1-1.xx.fbcdn.net/v/t39.8562-6/335648731_142576991793348_7786819189843639239_n.svg?_nc_cat=108&ccb=1-7&_nc_sid=e280be&_nc_ohc=R5Ag-htkgxoQ7kNvwFYnm28&_nc_oc=Adn1xsXljDswdbDx8J1SsVx_qjrr0kntbb6X76eBrOXVT8K1XMd3AAbXMKVt8zc-Ffl3ugqfQWGSRLqvfUl2izRR&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfZy_i0MH09i7c__6eAM-GBEmwtx-BjwU4akhV3x9FlQmQ&oe=68D0CAAE)](https://www.youtube.com/@aiatmeta)\n\nOur approach\n\n[Our approach](https://ai.meta.com/about)[About AI at Meta](https://ai.meta.com/about)[People](https://ai.meta.com/results/?content_types%5B0%5D=person&sort_by=random)[Careers](https://www.metacareers.com/jobs/?is_leadership=0&sub_teams[0]=Artificial%20Intelligence&is_in_page=0)\n\nResearch\n\n[Research](https://ai.meta.com/research)[Infrastructure](https://ai.meta.com/infrastructure)[Resources](https://ai.meta.com/resources)[Demos](https://aidemos.meta.com/)\n\nMeta AI\n\n[Meta AI](https://ai.meta.com/meta-ai/)[Explore Meta AI](https://ai.meta.com/meta-ai/)[Get Meta AI](https://ai.meta.com/get-meta-ai/)[AI Studio](https://ai.meta.com/ai-studio/)\n\nLatest news\n\n[Latest news](https://ai.meta.com/blog)[Blog](https://ai.meta.com/blog)[Newsletter](https://ai.meta.com/subscribe)\n\nFoundational models\n\n[Llama](https://www.llama.com/)\n\n[![Image 30](https://scontent-sof1-1.xx.fbcdn.net/v/t39.8562-6/335682312_964107378293184_3093631164486164913_n.svg?_nc_cat=100&ccb=1-7&_nc_sid=e280be&_nc_ohc=H2xc0aEVR7YQ7kNvwH1Q2fl&_nc_oc=AdlBx5QaxpzrwyTusHfWsQE14u4bMWMLTl3mU04ZbEcQC-7CCfrNK4XJfmze6TlI59_JqQij01QLUzlrnLxz_b_n&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfYfPkarehp2uX3_lYfYBNX9tnRyTt02dRi_0Zj8YLzN8g&oe=68D0C567) ![Image 31](https://scontent-sof1-1.xx.fbcdn.net/v/t39.8562-6/335682312_964107378293184_3093631164486164913_n.svg?_nc_cat=100&ccb=1-7&_nc_sid=e280be&_nc_ohc=H2xc0aEVR7YQ7kNvwH1Q2fl&_nc_oc=AdlBx5QaxpzrwyTusHfWsQE14u4bMWMLTl3mU04ZbEcQC-7CCfrNK4XJfmze6TlI59_JqQij01QLUzlrnLxz_b_n&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfYfPkarehp2uX3_lYfYBNX9tnRyTt02dRi_0Zj8YLzN8g&oe=68D0C567)](https://www.facebook.com/aiatmeta/)\n\n[![Image 32](https://scontent-sof1-2.xx.fbcdn.net/v/t39.8562-6/336009607_1870102080040414_6753977241281150924_n.svg?_nc_cat=103&ccb=1-7&_nc_sid=e280be&_nc_ohc=zfwi0m_RmvYQ7kNvwHali1X&_nc_oc=AdkZoKCjgYgVD0oA6ku4Q-EcpADMRA3B8-2rPGLm_oKQF6ZsU24_v9aDYLsGX-SnLszpvA4eqU5JoAJJtIrINjr2&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfZXJDWaI7qKPgVPBnumevqH6BeI-E_fYsDdcu9dZGNlhA&oe=68D0BDA2) ![Image 33](https://scontent-sof1-2.xx.fbcdn.net/v/t39.8562-6/336009607_1870102080040414_6753977241281150924_n.svg?_nc_cat=103&ccb=1-7&_nc_sid=e280be&_nc_ohc=zfwi0m_RmvYQ7kNvwHali1X&_nc_oc=AdkZoKCjgYgVD0oA6ku4Q-EcpADMRA3B8-2rPGLm_oKQF6ZsU24_v9aDYLsGX-SnLszpvA4eqU5JoAJJtIrINjr2&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfZXJDWaI7qKPgVPBnumevqH6BeI-E_fYsDdcu9dZGNlhA&oe=68D0BDA2)](https://twitter.com/aiatmeta/)\n\n[![Image 34](https://scontent-sof1-2.xx.fbcdn.net/v/t39.8562-6/336289415_1541032296405649_2165099305308791297_n.svg?_nc_cat=109&ccb=1-7&_nc_sid=e280be&_nc_ohc=2Hh4WVIjUfoQ7kNvwGjxHIA&_nc_oc=AdkLjLTF7rFZPZ7lCaXyN6MfT0F1baW4BHM6qGHcmbvHMr6Ec_KQ-oau9RYVfMvM4Pgf7vv95NY4WLe2V7JWW4bE&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_Afb9larZE1UHDnxxUPKPOhsxndwy3uRW5wjWglKMmOceOA&oe=68D0B13B) ![Image 35](https://scontent-sof1-2.xx.fbcdn.net/v/t39.8562-6/336289415_1541032296405649_2165099305308791297_n.svg?_nc_cat=109&ccb=1-7&_nc_sid=e280be&_nc_ohc=2Hh4WVIjUfoQ7kNvwGjxHIA&_nc_oc=AdkLjLTF7rFZPZ7lCaXyN6MfT0F1baW4BHM6qGHcmbvHMr6Ec_KQ-oau9RYVfMvM4Pgf7vv95NY4WLe2V7JWW4bE&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_Afb9larZE1UHDnxxUPKPOhsxndwy3uRW5wjWglKMmOceOA&oe=68D0B13B)](https://www.linkedin.com/showcase/aiatmeta)\n\n[![Image 36](https://scontent-sof1-1.xx.fbcdn.net/v/t39.8562-6/335648731_142576991793348_7786819189843639239_n.svg?_nc_cat=108&ccb=1-7&_nc_sid=e280be&_nc_ohc=R5Ag-htkgxoQ7kNvwFYnm28&_nc_oc=Adn1xsXljDswdbDx8J1SsVx_qjrr0kntbb6X76eBrOXVT8K1XMd3AAbXMKVt8zc-Ffl3ugqfQWGSRLqvfUl2izRR&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfZy_i0MH09i7c__6eAM-GBEmwtx-BjwU4akhV3x9FlQmQ&oe=68D0CAAE) ![Image 37](https://scontent-sof1-1.xx.fbcdn.net/v/t39.8562-6/335648731_142576991793348_7786819189843639239_n.svg?_nc_cat=108&ccb=1-7&_nc_sid=e280be&_nc_ohc=R5Ag-htkgxoQ7kNvwFYnm28&_nc_oc=Adn1xsXljDswdbDx8J1SsVx_qjrr0kntbb6X76eBrOXVT8K1XMd3AAbXMKVt8zc-Ffl3ugqfQWGSRLqvfUl2izRR&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfZy_i0MH09i7c__6eAM-GBEmwtx-BjwU4akhV3x9FlQmQ&oe=68D0CAAE)](https://www.youtube.com/@aiatmeta)\n\n[Privacy Policy](https://www.facebook.com/about/privacy/)\n\n[Terms](https://www.facebook.com/policies/)\n\n[Cookies](https://www.facebook.com/policies/cookies/)\n\nMeta © 2025\n\n[![Image 38](https://scontent-sof1-1.xx.fbcdn.net/v/t39.8562-6/335682312_964107378293184_3093631164486164913_n.svg?_nc_cat=100&ccb=1-7&_nc_sid=e280be&_nc_ohc=H2xc0aEVR7YQ7kNvwH1Q2fl&_nc_oc=AdlBx5QaxpzrwyTusHfWsQE14u4bMWMLTl3mU04ZbEcQC-7CCfrNK4XJfmze6TlI59_JqQij01QLUzlrnLxz_b_n&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfYfPkarehp2uX3_lYfYBNX9tnRyTt02dRi_0Zj8YLzN8g&oe=68D0C567) ![Image 39](https://scontent-sof1-1.xx.fbcdn.net/v/t39.8562-6/335682312_964107378293184_3093631164486164913_n.svg?_nc_cat=100&ccb=1-7&_nc_sid=e280be&_nc_ohc=H2xc0aEVR7YQ7kNvwH1Q2fl&_nc_oc=AdlBx5QaxpzrwyTusHfWsQE14u4bMWMLTl3mU04ZbEcQC-7CCfrNK4XJfmze6TlI59_JqQij01QLUzlrnLxz_b_n&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfYfPkarehp2uX3_lYfYBNX9tnRyTt02dRi_0Zj8YLzN8g&oe=68D0C567)](https://www.facebook.com/aiatmeta/)\n\n[![Image 40](https://scontent-sof1-2.xx.fbcdn.net/v/t39.8562-6/336009607_1870102080040414_6753977241281150924_n.svg?_nc_cat=103&ccb=1-7&_nc_sid=e280be&_nc_ohc=zfwi0m_RmvYQ7kNvwHali1X&_nc_oc=AdkZoKCjgYgVD0oA6ku4Q-EcpADMRA3B8-2rPGLm_oKQF6ZsU24_v9aDYLsGX-SnLszpvA4eqU5JoAJJtIrINjr2&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfZXJDWaI7qKPgVPBnumevqH6BeI-E_fYsDdcu9dZGNlhA&oe=68D0BDA2) ![Image 41](https://scontent-sof1-2.xx.fbcdn.net/v/t39.8562-6/336009607_1870102080040414_6753977241281150924_n.svg?_nc_cat=103&ccb=1-7&_nc_sid=e280be&_nc_ohc=zfwi0m_RmvYQ7kNvwHali1X&_nc_oc=AdkZoKCjgYgVD0oA6ku4Q-EcpADMRA3B8-2rPGLm_oKQF6ZsU24_v9aDYLsGX-SnLszpvA4eqU5JoAJJtIrINjr2&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfZXJDWaI7qKPgVPBnumevqH6BeI-E_fYsDdcu9dZGNlhA&oe=68D0BDA2)](https://twitter.com/aiatmeta/)\n\n[![Image 42](https://scontent-sof1-2.xx.fbcdn.net/v/t39.8562-6/336289415_1541032296405649_2165099305308791297_n.svg?_nc_cat=109&ccb=1-7&_nc_sid=e280be&_nc_ohc=2Hh4WVIjUfoQ7kNvwGjxHIA&_nc_oc=AdkLjLTF7rFZPZ7lCaXyN6MfT0F1baW4BHM6qGHcmbvHMr6Ec_KQ-oau9RYVfMvM4Pgf7vv95NY4WLe2V7JWW4bE&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_Afb9larZE1UHDnxxUPKPOhsxndwy3uRW5wjWglKMmOceOA&oe=68D0B13B) ![Image 43](https://scontent-sof1-2.xx.fbcdn.net/v/t39.8562-6/336289415_1541032296405649_2165099305308791297_n.svg?_nc_cat=109&ccb=1-7&_nc_sid=e280be&_nc_ohc=2Hh4WVIjUfoQ7kNvwGjxHIA&_nc_oc=AdkLjLTF7rFZPZ7lCaXyN6MfT0F1baW4BHM6qGHcmbvHMr6Ec_KQ-oau9RYVfMvM4Pgf7vv95NY4WLe2V7JWW4bE&_nc_zt=14&_nc_ht=scontent-sof1-2.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_Afb9larZE1UHDnxxUPKPOhsxndwy3uRW5wjWglKMmOceOA&oe=68D0B13B)](https://www.linkedin.com/showcase/aiatmeta)\n\n[![Image 44](https://scontent-sof1-1.xx.fbcdn.net/v/t39.8562-6/335648731_142576991793348_7786819189843639239_n.svg?_nc_cat=108&ccb=1-7&_nc_sid=e280be&_nc_ohc=R5Ag-htkgxoQ7kNvwFYnm28&_nc_oc=Adn1xsXljDswdbDx8J1SsVx_qjrr0kntbb6X76eBrOXVT8K1XMd3AAbXMKVt8zc-Ffl3ugqfQWGSRLqvfUl2izRR&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfZy_i0MH09i7c__6eAM-GBEmwtx-BjwU4akhV3x9FlQmQ&oe=68D0CAAE) ![Image 45](https://scontent-sof1-1.xx.fbcdn.net/v/t39.8562-6/335648731_142576991793348_7786819189843639239_n.svg?_nc_cat=108&ccb=1-7&_nc_sid=e280be&_nc_ohc=R5Ag-htkgxoQ7kNvwFYnm28&_nc_oc=Adn1xsXljDswdbDx8J1SsVx_qjrr0kntbb6X76eBrOXVT8K1XMd3AAbXMKVt8zc-Ffl3ugqfQWGSRLqvfUl2izRR&_nc_zt=14&_nc_ht=scontent-sof1-1.xx&_nc_gid=jT_lDRyzwbLkxEusa_4a3A&oh=00_AfZy_i0MH09i7c__6eAM-GBEmwtx-BjwU4akhV3x9FlQmQ&oe=68D0CAAE)](https://www.youtube.com/@aiatmeta)\n",
      "fetch_method": "jina-reader"
    },
    {
      "arxiv_id": "https://huggingface.co/docs/transformers/en/main_classes/pipelines",
      "full_text": " Pipelines Hugging Face Models Datasets Spaces Community Docs Enterprise Pricing Log In Sign Up Transformers documentation Pipelines Transformers 🏡 View all docs AWS Trainium &amp; Inferentia Accelerate Argilla AutoTrain Bitsandbytes Chat UI Dataset viewer Datasets Deploying on AWS Diffusers Distilabel Evaluate Gradio Hub Hub Python Library Huggingface.js Inference Endpoints (dedicated) Inference Providers Kernels LeRobot Leaderboards Lighteval Microsoft Azure Optimum PEFT Safetensors Sentence Transformers TRL Tasks Text Embeddings Inference Text Generation Inference Tokenizers Trackio Transformers Transformers.js smolagents timm Search documentation main v4.56.2 v4.55.4 v4.53.3 v4.52.3 v4.51.3 v4.50.0 v4.49.0 v4.48.2 v4.47.1 v4.46.3 v4.45.2 v4.44.2 v4.43.4 v4.42.4 v4.41.2 v4.40.2 v4.39.3 v4.38.2 v4.37.2 v4.36.1 v4.35.2 v4.34.1 v4.33.3 v4.32.1 v4.31.0 v4.30.0 v4.29.1 v4.28.1 v4.27.2 v4.26.1 v4.25.1 v4.24.0 v4.23.1 v4.22.2 v4.21.3 v4.20.1 v4.19.4 v4.18.0 v4.17.0 v4.16.2 v4.15.0 v4.14.1 v4.13.0 v4.12.5 v4.11.3 v4.10.1 v4.9.2 v4.8.2 v4.7.0 v4.6.0 v4.5.1 v4.4.2 v4.3.3 v4.2.2 v4.1.1 v4.0.1 v3.5.1 v3.4.0 v3.3.1 v3.2.0 v3.1.0 v3.0.2 v2.11.0 v2.10.0 v2.9.1 v2.8.0 v2.7.0 v2.6.0 v2.5.1 v2.4.1 v2.3.0 v2.2.2 v2.1.1 v2.0.0 v1.2.0 v1.1.0 v1.0.0 doc-builder-html AR DE EN ES FR HI IT JA KO PT TE TR ZH Get started Transformers Installation Quickstart Base classes Inference Training Quantization Export to production Resources Contribute API Main Classes Auto Classes Backbones Callbacks Configuration Data Collator Keras callbacks Logging Models Text Generation ONNX Optimization Model outputs PEFT Pipelines Processors Quantization Tokenizer Trainer DeepSpeed ExecuTorch Feature Extractor Image Processor Video Processor Models Internal helpers Reference Join the Hugging Face community and get access to the augmented documentation experience Collaborate on models, datasets and Spaces Faster examples with accelerated inference Switch between documentation themes Sign Up to get started Pipelines The pipelines are a great and easy way to use models for inference. These pipelines are objects that abstract most of the complex code from the library, offering a simple API dedicated to several tasks, including Named Entity Recognition, Masked Language Modeling, Sentiment Analysis, Feature Extraction and Question Answering. See the task summary for examples of use. There are two categories of pipeline abstractions to be aware about: The pipeline() which is the most powerful object encapsulating all other pipelines. Task-specific pipelines are available for audio , computer vision , natural language processing , and multimodal tasks. The pipeline abstraction The pipeline abstraction is a wrapper around all the other available pipelines. It is instantiated as any other pipeline but can provide additional quality of life. Simple call on one item: Copied &gt;&gt;&gt; pipe = pipeline( &quot;text-classification&quot; ) &gt;&gt;&gt; pipe( &quot;This restaurant is awesome&quot; ) [{ &#x27;label&#x27; : &#x27;POSITIVE&#x27; , &#x27;score&#x27; : 0.9998743534088135 }] If you want to use a specific model from the hub you can ignore the task if the model on the hub already defines it: Copied &gt;&gt;&gt; pipe = pipeline(model= &quot;FacebookAI/roberta-large-mnli&quot; ) &gt;&gt;&gt; pipe( &quot;This restaurant is awesome&quot; ) [{ &#x27;label&#x27; : &#x27;NEUTRAL&#x27; , &#x27;score&#x27; : 0.7313136458396912 }] To call a pipeline on many items, you can call it with a list . Copied &gt;&gt;&gt; pipe = pipeline( &quot;text-classification&quot; ) &gt;&gt;&gt; pipe([ &quot;This restaurant is awesome&quot; , &quot;This restaurant is awful&quot; ]) [{ &#x27;label&#x27; : &#x27;POSITIVE&#x27; , &#x27;score&#x27; : 0.9998743534088135 }, { &#x27;label&#x27; : &#x27;NEGATIVE&#x27; , &#x27;score&#x27; : 0.9996669292449951 }] To iterate over full datasets it is recommended to use a dataset directly. This means you don’t need to allocate the whole dataset at once, nor do you need to do batching yourself. This should work just as fast as custom loops on GPU. If it doesn’t don’t hesitate to create an issue. Copied import datasets from transformers import pipeline from transformers.pipelines.pt_utils import KeyDataset from tqdm.auto import tqdm pipe = pipeline( &quot;automatic-speech-recognition&quot; , model= &quot;facebook/wav2vec2-base-960h&quot; , device= 0 ) dataset = datasets.load_dataset( &quot;superb&quot; , name= &quot;asr&quot; , split= &quot;test&quot; ) # KeyDataset (only *pt*) will simply return the item in the dict returned by the dataset item # as we&#x27;re not interested in the *target* part of the dataset. For sentence pair use KeyPairDataset for out in tqdm(pipe(KeyDataset(dataset, &quot;file&quot; ))): print (out) # {&quot;text&quot;: &quot;NUMBER TEN FRESH NELLY IS WAITING ON YOU GOOD NIGHT HUSBAND&quot;} # {&quot;text&quot;: ....} # .... For ease of use, a generator is also possible: Copied from transformers import pipeline pipe = pipeline( &quot;text-classification&quot; ) def data (): while True : # This could come from a dataset, a database, a queue or HTTP request # in a server # Caveat: because this is iterative, you cannot use `num_workers &gt; 1` variable # to use multiple threads to preprocess data. You can still have 1 thread that # does the preprocessing while the main runs the big inference yield &quot;This is a test&quot; for out in pipe(data()): print (out) # {&quot;text&quot;: &quot;NUMBER TEN FRESH NELLY IS WAITING ON YOU GOOD NIGHT HUSBAND&quot;} # {&quot;text&quot;: ....} # .... transformers.pipeline &lt; source &gt; ( task : typing.Optional[str] = None model : typing.Union[str, ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel'), NoneType] = None config : typing.Union[str, transformers.configuration_utils.PretrainedConfig, NoneType] = None tokenizer : typing.Union[str, transformers.tokenization_utils.PreTrainedTokenizer, ForwardRef('PreTrainedTokenizerFast'), NoneType] = None feature_extractor : typing.Union[str, ForwardRef('SequenceFeatureExtractor'), NoneType] = None image_processor : typing.Union[str, transformers.image_processing_utils.BaseImageProcessor, NoneType] = None processor : typing.Union[str, transformers.processing_utils.ProcessorMixin, NoneType] = None framework : typing.Optional[str] = None revision : typing.Optional[str] = None use_fast : bool = True token : typing.Union[str, bool, NoneType] = None device : typing.Union[int, str, ForwardRef('torch.device'), NoneType] = None device_map : typing.Union[str, dict[str, typing.Union[int, str]], NoneType] = None dtype : typing.Union[str, ForwardRef('torch.dtype'), NoneType] = 'auto' trust_remote_code : typing.Optional[bool] = None model_kwargs : typing.Optional[dict[str, typing.Any]] = None pipeline_class : typing.Optional[typing.Any] = None **kwargs : typing.Any ) → Pipeline Parameters task ( str ) &#x2014; The task defining which pipeline will be returned. Currently accepted tasks are: &quot;audio-classification&quot; : will return a AudioClassificationPipeline . &quot;automatic-speech-recognition&quot; : will return a AutomaticSpeechRecognitionPipeline . &quot;depth-estimation&quot; : will return a DepthEstimationPipeline . &quot;document-question-answering&quot; : will return a DocumentQuestionAnsweringPipeline . &quot;feature-extraction&quot; : will return a FeatureExtractionPipeline . &quot;fill-mask&quot; : will return a FillMaskPipeline :. &quot;image-classification&quot; : will return a ImageClassificationPipeline . &quot;image-feature-extraction&quot; : will return an ImageFeatureExtractionPipeline . &quot;image-segmentation&quot; : will return a ImageSegmentationPipeline . &quot;image-text-to-text&quot; : will return a ImageTextToTextPipeline . &quot;image-to-image&quot; : will return a ImageToImagePipeline . &quot;image-to-text&quot; : will return a ImageToTextPipeline . &quot;keypoint-matching&quot; : will return a KeypointMatchingPipeline . &quot;mask-generation&quot; : will return a MaskGenerationPipeline . &quot;object-detection&quot; : will return a ObjectDetectionPipeline . &quot;question-answering&quot; : will return a QuestionAnsweringPipeline . &quot;summarization&quot; : will return a SummarizationPipeline . &quot;table-question-answering&quot; : will return a TableQuestionAnsweringPipeline . &quot;text2text-generation&quot; : will return a Text2TextGenerationPipeline . &quot;text-classification&quot; (alias &quot;sentiment-analysis&quot; available): will return a TextClassificationPipeline . &quot;text-generation&quot; : will return a TextGenerationPipeline :. &quot;text-to-audio&quot; (alias &quot;text-to-speech&quot; available): will return a TextToAudioPipeline :. &quot;token-classification&quot; (alias &quot;ner&quot; available): will return a TokenClassificationPipeline . &quot;translation&quot; : will return a TranslationPipeline . &quot;translation_xx_to_yy&quot; : will return a TranslationPipeline . &quot;video-classification&quot; : will return a VideoClassificationPipeline . &quot;visual-question-answering&quot; : will return a VisualQuestionAnsweringPipeline . &quot;zero-shot-classification&quot; : will return a ZeroShotClassificationPipeline . &quot;zero-shot-image-classification&quot; : will return a ZeroShotImageClassificationPipeline . &quot;zero-shot-audio-classification&quot; : will return a ZeroShotAudioClassificationPipeline . &quot;zero-shot-object-detection&quot; : will return a ZeroShotObjectDetectionPipeline . model ( str or PreTrainedModel or TFPreTrainedModel , optional ) &#x2014; The model that will be used by the pipeline to make predictions. This can be a model identifier or an actual instance of a pretrained model inheriting from PreTrainedModel (for PyTorch) or TFPreTrainedModel (for TensorFlow). If not provided, the default for the task will be loaded. config ( str or PretrainedConfig , optional ) &#x2014; The configuration that will be used by the pipeline to instantiate the model. This can be a model identifier or an actual pretrained model configuration inheriting from PretrainedConfig . If not provided, the default configuration file for the requested model will be used. That means that if model is given, its default configuration will be used. However, if model is not supplied, this task &#x2019;s default model&#x2019;s config is used instead. tokenizer ( str or PreTrainedTokenizer , optional ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This can be a model identifier or an actual pretrained tokenizer inheriting from PreTrainedTokenizer . If not provided, the default tokenizer for the given model will be loaded (if it is a string). If model is not specified or not a string, then the default tokenizer for config is loaded (if it is a string). However, if config is also not given or not a string, then the default tokenizer for the given task will be loaded. feature_extractor ( str or PreTrainedFeatureExtractor , optional ) &#x2014; The feature extractor that will be used by the pipeline to encode data for the model. This can be a model identifier or an actual pretrained feature extractor inheriting from PreTrainedFeatureExtractor . Feature extractors are used for non-NLP models, such as Speech or Vision models as well as multi-modal models. Multi-modal models will also require a tokenizer to be passed. If not provided, the default feature extractor for the given model will be loaded (if it is a string). If model is not specified or not a string, then the default feature extractor for config is loaded (if it is a string). However, if config is also not given or not a string, then the default feature extractor for the given task will be loaded. image_processor ( str or BaseImageProcessor , optional ) &#x2014; The image processor that will be used by the pipeline to preprocess images for the model. This can be a model identifier or an actual image processor inheriting from BaseImageProcessor . Image processors are used for Vision models and multi-modal models that require image inputs. Multi-modal models will also require a tokenizer to be passed. If not provided, the default image processor for the given model will be loaded (if it is a string). If model is not specified or not a string, then the default image processor for config is loaded (if it is a string). processor ( str or ProcessorMixin , optional ) &#x2014; The processor that will be used by the pipeline to preprocess data for the model. This can be a model identifier or an actual processor inheriting from ProcessorMixin . Processors are used for multi-modal models that require multi-modal inputs, for example, a model that requires both text and image inputs. If not provided, the default processor for the given model will be loaded (if it is a string). If model is not specified or not a string, then the default processor for config is loaded (if it is a string). framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. revision ( str , optional , defaults to &quot;main&quot; ) &#x2014; When passing a task name or a string model identifier: The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a git-based system for storing models and other artifacts on huggingface.co, so revision can be any identifier allowed by git. use_fast ( bool , optional , defaults to True ) &#x2014; Whether or not to use a Fast tokenizer if possible (a PreTrainedTokenizerFast ). use_auth_token ( str or bool , optional ) &#x2014; The token to use as HTTP bearer authorization for remote files. If True , will use the token generated when running hf auth login (stored in ~/.huggingface ). device ( int or str or torch.device ) &#x2014; Defines the device ( e.g. , &quot;cpu&quot; , &quot;cuda:1&quot; , &quot;mps&quot; , or a GPU ordinal rank like 1 ) on which this pipeline will be allocated. device_map ( str or dict[str, Union[int, str, torch.device] , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut). When accelerate library is present, set device_map=&quot;auto&quot; to compute the most optimized device_map automatically (see here for more information). Do not use device_map AND device at the same time as they will conflict dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ). trust_remote_code ( bool , optional , defaults to False ) &#x2014; Whether or not to allow for custom code defined on the Hub in their own modeling, configuration, tokenization or even pipeline files. This option should only be set to True for repositories you trust and in which you have read the code, as it will execute code present on the Hub on your local machine. model_kwargs ( dict[str, Any] , optional ) &#x2014; Additional dictionary of keyword arguments passed along to the model&#x2019;s from_pretrained(..., **model_kwargs) function. kwargs ( dict[str, Any] , optional ) &#x2014; Additional keyword arguments passed along to the specific pipeline init (see the documentation for the corresponding pipeline class for possible values). Returns Pipeline A suitable pipeline for the task. Utility factory method to build a Pipeline . A pipeline consists of: One or more components for pre-processing model inputs, such as a tokenizer , image_processor , feature_extractor , or processor . A model that generates predictions from the inputs. Optional post-processing steps to refine the model’s output, which can also be handled by processors. While there are such optional arguments as `tokenizer`, `feature_extractor`, `image_processor`, and `processor`, they shouldn&#39;t be specified all at once. If these components are not provided, `pipeline` will try to load required ones automatically. In case you want to provide these components explicitly, please refer to a specific pipeline in order to get more details regarding what components are required. Examples: Copied &gt;&gt;&gt; from transformers import pipeline, AutoModelForTokenClassification, AutoTokenizer &gt;&gt;&gt; # Sentiment analysis pipeline &gt;&gt;&gt; analyzer = pipeline( &quot;sentiment-analysis&quot; ) &gt;&gt;&gt; # Question answering pipeline, specifying the checkpoint identifier &gt;&gt;&gt; oracle = pipeline( ... &quot;question-answering&quot; , model= &quot;distilbert/distilbert-base-cased-distilled-squad&quot; , tokenizer= &quot;google-bert/bert-base-cased&quot; ... ) &gt;&gt;&gt; # Named entity recognition pipeline, passing in a specific model and tokenizer &gt;&gt;&gt; model = AutoModelForTokenClassification.from_pretrained( &quot;dbmdz/bert-large-cased-finetuned-conll03-english&quot; ) &gt;&gt;&gt; tokenizer = AutoTokenizer.from_pretrained( &quot;google-bert/bert-base-cased&quot; ) &gt;&gt;&gt; recognizer = pipeline( &quot;ner&quot; , model=model, tokenizer=tokenizer) Pipeline batching All pipelines can use batching. This will work whenever the pipeline uses its streaming ability (so when passing lists or Dataset or generator ). Copied from transformers import pipeline from transformers.pipelines.pt_utils import KeyDataset import datasets dataset = datasets.load_dataset( &quot;imdb&quot; , name= &quot;plain_text&quot; , split= &quot;unsupervised&quot; ) pipe = pipeline( &quot;text-classification&quot; , device= 0 ) for out in pipe(KeyDataset(dataset, &quot;text&quot; ), batch_size= 8 , truncation= &quot;only_first&quot; ): print (out) # [{&#x27;label&#x27;: &#x27;POSITIVE&#x27;, &#x27;score&#x27;: 0.9998743534088135}] # Exactly the same output as before, but the content are passed # as batches to the model However, this is not automatically a win for performance. It can be either a 10x speedup or 5x slowdown depending on hardware, data and the actual model being used. Example where it’s mostly a speedup: Copied from transformers import pipeline from torch.utils.data import Dataset from tqdm.auto import tqdm pipe = pipeline( &quot;text-classification&quot; , device= 0 ) class MyDataset ( Dataset ): def __len__ ( self ): return 5000 def __getitem__ ( self, i ): return &quot;This is a test&quot; dataset = MyDataset() for batch_size in [ 1 , 8 , 64 , 256 ]: print ( &quot;-&quot; * 30 ) print ( f&quot;Streaming batch_size= {batch_size} &quot; ) for out in tqdm(pipe(dataset, batch_size=batch_size), total= len (dataset)): pass Copied # On GTX 970 ------------------------------ Streaming no batching 100%|██████████████████████████████████████████████████████████████████████| 5000/5000 [00:26&lt;00:00, 187.52it/s] ------------------------------ Streaming batch_size=8 100%|█████████████████████████████████████████████████████████████████████| 5000/5000 [00:04&lt;00:00, 1205.95it/s] ------------------------------ Streaming batch _size=64 100%|█████████████████████████████████████████████████████████████████████| 5000/5000 [00:02&lt;00:00, 2478.24it/s] ------------------------------ Streaming batch_ size=256 100%|█████████████████████████████████████████████████████████████████████| 5000/5000 [00:01&lt;00:00, 2554.43it/s] (diminishing returns, saturated the GPU) Example where it’s most a slowdown: Copied class MyDataset ( Dataset ): def __len__ ( self ): return 5000 def __getitem__ ( self, i ): if i % 64 == 0 : n = 100 else : n = 1 return &quot;This is a test&quot; * n This is a occasional very long sentence compared to the other. In that case, the whole batch will need to be 400 tokens long, so the whole batch will be [64, 400] instead of [64, 4], leading to the high slowdown. Even worse, on bigger batches, the program simply crashes. Copied ------------------------------ Streaming no batching 100 %|█████████████████████████████████████████████████████████████████████| 1000 / 1000 [ 00 : 05 &lt; 00 : 00 , 183.69 it /s] ------------------------------ Streaming batch_size= 8 100 %|█████████████████████████████████████████████████████████████████████| 1000 / 1000 [ 00 : 03 &lt; 00 : 00 , 265.74 it /s] ------------------------------ Streaming batch_size= 64 100 %|██████████████████████████████████████████████████████████████████████| 1000 / 1000 [ 00 : 26 &lt; 00 : 00 , 37.80 it /s] ------------------------------ Streaming batch_size= 256 0 %| | 0 / 1000 [ 00 : 00 &lt;? , ? it /s] Traceback (most recent call last ): File &quot;/home/nicolas/src/transformers/test.py&quot; , line 42 , in &lt;module&gt; for out in tqdm(pipe(dataset, batch_size= 256 ), total= len (dataset)): .... q = q / math. sqrt (dim_per_head) # (bs, n_heads, q_length, dim_per_head) RuntimeError: CUDA out of memory. Tried to allocate 376.00 MiB (GPU 0 ; 3.95 GiB total capacity; 1.72 GiB already allocated; 354.88 MiB free; 2.46 GiB reserved in total by PyTorch) There are no good (general) solutions for this problem, and your mileage may vary depending on your use cases. Rule of thumb: For users, a rule of thumb is: Measure performance on your load, with your hardware. Measure, measure, and keep measuring. Real numbers are the only way to go. If you are latency constrained (live product doing inference), don’t batch. If you are using CPU, don’t batch. If you are using throughput (you want to run your model on a bunch of static data), on GPU, then: If you have no clue about the size of the sequence_length (“natural” data), by default don’t batch, measure and try tentatively to add it, add OOM checks to recover when it will fail (and it will at some point if you don’t control the sequence_length.) If your sequence_length is super regular, then batching is more likely to be VERY interesting, measure and push it until you get OOMs. The larger the GPU the more likely batching is going to be more interesting As soon as you enable batching, make sure you can handle OOMs nicely. Pipeline chunk batching zero-shot-classification and question-answering are slightly specific in the sense, that a single input might yield multiple forward pass of a model. Under normal circumstances, this would yield issues with batch_size argument. In order to circumvent this issue, both of these pipelines are a bit specific, they are ChunkPipeline instead of regular Pipeline . In short: Copied preprocessed = pipe.preprocess(inputs) model_outputs = pipe.forward(preprocessed) outputs = pipe.postprocess(model_outputs) Now becomes: Copied all_model_outputs = [] for preprocessed in pipe.preprocess(inputs): model_outputs = pipe.forward(preprocessed) all_model_outputs.append(model_outputs) outputs = pipe.postprocess(all_model_outputs) This should be very transparent to your code because the pipelines are used in the same way. This is a simplified view, since the pipeline can handle automatically the batch to ! Meaning you don’t have to care about how many forward passes you inputs are actually going to trigger, you can optimize the batch_size independently of the inputs. The caveats from the previous section still apply. Pipeline FP16 inference Models can be run in FP16 which can be significantly faster on GPU while saving memory. Most models will not suffer noticeable performance loss from this. The larger the model, the less likely that it will. To enable FP16 inference, you can simply pass dtype=torch.float16 or dtype=&#39;float16&#39; to the pipeline constructor. Note that this only works for models with a PyTorch backend. Your inputs will be converted to FP16 internally. Pipeline custom code If you want to override a specific pipeline. Don’t hesitate to create an issue for your task at hand, the goal of the pipeline is to be easy to use and support most cases, so transformers could maybe support your use case. If you want to try simply you can: Subclass your pipeline of choice Copied class MyPipeline ( TextClassificationPipeline ): def postprocess (): # Your code goes here scores = scores * 100 # And here my_pipeline = MyPipeline(model=model, tokenizer=tokenizer, ...) # or if you use *pipeline* function, then: my_pipeline = pipeline(model= &quot;xxxx&quot; , pipeline_class=MyPipeline) That should enable you to do all the custom code you want. Implementing a pipeline Implementing a new pipeline Audio Pipelines available for audio tasks include the following. AudioClassificationPipeline class transformers. AudioClassificationPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. feature_extractor ( SequenceFeatureExtractor ) &#x2014; The feature extractor that will be used by the pipeline to encode data for the model. This object inherits from SequenceFeatureExtractor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Audio classification pipeline using any AutoModelForAudioClassification . This pipeline predicts the class of a raw waveform or an audio file. In case of an audio file, ffmpeg should be installed to support multiple audio formats. Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; classifier = pipeline(model= &quot;superb/wav2vec2-base-superb-ks&quot; ) &gt;&gt;&gt; classifier( &quot;https://huggingface.co/datasets/Narsil/asr_dummy/resolve/main/1.flac&quot; ) [{ &#x27;score&#x27; : 0.997 , &#x27;label&#x27; : &#x27;_unknown_&#x27; }, { &#x27;score&#x27; : 0.002 , &#x27;label&#x27; : &#x27;left&#x27; }, { &#x27;score&#x27; : 0.0 , &#x27;label&#x27; : &#x27;yes&#x27; }, { &#x27;score&#x27; : 0.0 , &#x27;label&#x27; : &#x27;down&#x27; }, { &#x27;score&#x27; : 0.0 , &#x27;label&#x27; : &#x27;stop&#x27; }] Learn more about the basics of using a pipeline in the pipeline tutorial This pipeline can currently be loaded from pipeline() using the following task identifier: &quot;audio-classification&quot; . See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( inputs : typing.Union[numpy.ndarray, bytes, str, dict] **kwargs : typing.Any ) → A list of dict with the following keys Parameters inputs ( np.ndarray or bytes or str or dict ) &#x2014; The inputs is either : str that is the filename of the audio file, the file will be read at the correct sampling rate to get the waveform using ffmpeg . This requires ffmpeg to be installed on the system. bytes it is supposed to be the content of an audio file and is interpreted by ffmpeg in the same way. ( np.ndarray of shape (n, ) of type np.float32 or np.float64 ) Raw audio at the correct sampling rate (no further check will be done) dict form can be used to pass raw audio sampled at arbitrary sampling_rate and let this pipeline do the resampling. The dict must be either be in the format {&quot;sampling_rate&quot;: int, &quot;raw&quot;: np.array} , or {&quot;sampling_rate&quot;: int, &quot;array&quot;: np.array} , where the key &quot;raw&quot; or &quot;array&quot; is used to denote the raw audio waveform. top_k ( int , optional , defaults to None) &#x2014; The number of top labels that will be returned by the pipeline. If the provided number is None or higher than the number of labels available in the model configuration, it will default to the number of labels. function_to_apply( str , optional , defaults to &#x201C;softmax&#x201D;) &#x2014; The function to apply to the model output. By default, the pipeline will apply the softmax function to the output of the model. Valid options: [&#x201C;softmax&#x201D;, &#x201C;sigmoid&#x201D;, &#x201C;none&#x201D;]. Note that passing Python&#x2019;s built-in None will default to &#x201C;softmax&#x201D;, so you need to pass the string &#x201C;none&#x201D; to disable any post-processing. Returns A list of dict with the following keys label ( str ) — The label predicted. score ( float ) — The corresponding probability. Classify the sequence(s) given as inputs. See the AutomaticSpeechRecognitionPipeline documentation for more information. AutomaticSpeechRecognitionPipeline class transformers. AutomaticSpeechRecognitionPipeline &lt; source &gt; ( model : PreTrainedModel feature_extractor : typing.Union[ForwardRef('SequenceFeatureExtractor'), str] = None tokenizer : typing.Optional[transformers.tokenization_utils.PreTrainedTokenizer] = None decoder : typing.Union[ForwardRef('BeamSearchDecoderCTC'), str, NoneType] = None device : typing.Union[int, ForwardRef('torch.device')] = None **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. feature_extractor ( SequenceFeatureExtractor ) &#x2014; The feature extractor that will be used by the pipeline to encode waveform for the model. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . decoder ( pyctcdecode.BeamSearchDecoderCTC , optional ) &#x2014; PyCTCDecode&#x2019;s BeamSearchDecoderCTC can be passed for language model boosted decoding. See Wav2Vec2ProcessorWithLM for more information. chunk_length_s ( float , optional , defaults to 0) &#x2014; The input length for in each chunk. If chunk_length_s = 0 then chunking is disabled (default). For more information on how to effectively use chunk_length_s , please have a look at the ASR chunking blog post . stride_length_s ( float , optional , defaults to chunk_length_s / 6 ) &#x2014; The length of stride on the left and right of each chunk. Used only with chunk_length_s &gt; 0 . This enables the model to see more context and infer letters better than without this context but the pipeline discards the stride bits at the end to make the final reconstitution as perfect as possible. For more information on how to effectively use stride_length_s , please have a look at the ASR chunking blog post . framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. device (Union[ int , torch.device ], optional ) &#x2014; Device ordinal for CPU/GPU supports. Setting this to None will leverage CPU, a positive will run the model on the associated CUDA device id. Pipeline that aims at extracting spoken text contained within some audio. The input can be either a raw waveform or a audio file. In case of the audio file, ffmpeg should be installed for to support multiple audio formats Unless the model you’re using explicitly sets these generation parameters in its configuration files ( generation_config.json ), the following default values will be used: max_new_tokens: 256 num_beams: 5 Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; transcriber = pipeline(model= &quot;openai/whisper-base&quot; ) &gt;&gt;&gt; transcriber( &quot;https://huggingface.co/datasets/Narsil/asr_dummy/resolve/main/1.flac&quot; ) { &#x27;text&#x27; : &#x27; He hoped there would be stew for dinner, turnips and carrots and bruised potatoes and fat mutton pieces to be ladled out in thick, peppered flour-fatten sauce.&#x27; } Learn more about the basics of using a pipeline in the pipeline tutorial __call__ &lt; source &gt; ( inputs : typing.Union[numpy.ndarray, bytes, str, dict] **kwargs : typing.Any ) → Dict Parameters inputs ( np.ndarray or bytes or str or dict ) &#x2014; The inputs is either : str that is either the filename of a local audio file, or a public URL address to download the audio file. The file will be read at the correct sampling rate to get the waveform using ffmpeg . This requires ffmpeg to be installed on the system. bytes it is supposed to be the content of an audio file and is interpreted by ffmpeg in the same way. ( np.ndarray of shape (n, ) of type np.float32 or np.float64 ) Raw audio at the correct sampling rate (no further check will be done) dict form can be used to pass raw audio sampled at arbitrary sampling_rate and let this pipeline do the resampling. The dict must be in the format {&quot;sampling_rate&quot;: int, &quot;raw&quot;: np.array} with optionally a &quot;stride&quot;: (left: int, right: int) than can ask the pipeline to treat the first left samples and last right samples to be ignored in decoding (but used at inference to provide more context to the model). Only use stride with CTC models. return_timestamps ( optional , str or bool ) &#x2014; Only available for pure CTC models (Wav2Vec2, HuBERT, etc) and the Whisper model. Not available for other sequence-to-sequence models. For CTC models, timestamps can take one of two formats: &quot;char&quot; : the pipeline will return timestamps along the text for every character in the text. For instance, if you get [{&quot;text&quot;: &quot;h&quot;, &quot;timestamp&quot;: (0.5, 0.6)}, {&quot;text&quot;: &quot;i&quot;, &quot;timestamp&quot;: (0.7, 0.9)}] , then it means the model predicts that the letter &#x201C;h&#x201D; was spoken after 0.5 and before 0.6 seconds. &quot;word&quot; : the pipeline will return timestamps along the text for every word in the text. For instance, if you get [{&quot;text&quot;: &quot;hi &quot;, &quot;timestamp&quot;: (0.5, 0.9)}, {&quot;text&quot;: &quot;there&quot;, &quot;timestamp&quot;: (1.0, 1.5)}] , then it means the model predicts that the word &#x201C;hi&#x201D; was spoken after 0.5 and before 0.9 seconds. For the Whisper model, timestamps can take one of two formats: &quot;word&quot; : same as above for word-level CTC timestamps. Word-level timestamps are predicted through the dynamic-time warping (DTW) algorithm, an approximation to word-level timestamps by inspecting the cross-attention weights. True : the pipeline will return timestamps along the text for segments of words in the text. For instance, if you get [{&quot;text&quot;: &quot; Hi there!&quot;, &quot;timestamp&quot;: (0.5, 1.5)}] , then it means the model predicts that the segment &#x201C;Hi there!&#x201D; was spoken after 0.5 and before 1.5 seconds. Note that a segment of text refers to a sequence of one or more words, rather than individual words as with word-level timestamps. generate_kwargs ( dict , optional ) &#x2014; The dictionary of ad-hoc parametrization of generate_config to be used for the generation call. For a complete overview of generate, check the following guide . Returns Dict A dictionary with the following keys: text ( str ): The recognized text. chunks ( optional(, list[Dict] ) When using return_timestamps , the chunks will become a list containing all the various text chunks identified by the model, e.g.* [&#123;\"text\": \"hi \", \"timestamp\": (0.5, 0.9)&#125;, &#123;\"text\": \"there\", \"timestamp\": (1.0, 1.5)&#125;] . The original full text can roughly be recovered by doing \"\".join(chunk[\"text\"] for chunk in output[\"chunks\"]) . Transcribe the audio sequence(s) given as inputs to text. See the AutomaticSpeechRecognitionPipeline documentation for more information. TextToAudioPipeline class transformers. TextToAudioPipeline &lt; source &gt; ( *args vocoder = None sampling_rate = None no_processor = True **kwargs ) Text-to-audio generation pipeline using any AutoModelForTextToWaveform or AutoModelForTextToSpectrogram . This pipeline generates an audio file from an input text and optional other conditional inputs. Unless the model you’re using explicitly sets these generation parameters in its configuration files ( generation_config.json ), the following default values will be used: max_new_tokens: 256 Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; pipe = pipeline(model= &quot;suno/bark-small&quot; ) &gt;&gt;&gt; output = pipe( &quot;Hey it&#x27;s HuggingFace on the phone!&quot; ) &gt;&gt;&gt; audio = output[ &quot;audio&quot; ] &gt;&gt;&gt; sampling_rate = output[ &quot;sampling_rate&quot; ] Learn more about the basics of using a pipeline in the pipeline tutorial You can specify parameters passed to the model by using TextToAudioPipeline.__call__.forward_params or TextToAudioPipeline.__call__.generate_kwargs . Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; music_generator = pipeline(task= &quot;text-to-audio&quot; , model= &quot;facebook/musicgen-small&quot; , framework= &quot;pt&quot; ) &gt;&gt;&gt; # diversify the music generation by adding randomness with a high temperature and set a maximum music length &gt;&gt;&gt; generate_kwargs = { ... &quot;do_sample&quot; : True , ... &quot;temperature&quot; : 0.7 , ... &quot;max_new_tokens&quot; : 35 , ... } &gt;&gt;&gt; outputs = music_generator( &quot;Techno music with high melodic riffs&quot; , generate_kwargs=generate_kwargs) This pipeline can currently be loaded from pipeline() using the following task identifiers: &quot;text-to-speech&quot; or &quot;text-to-audio&quot; . See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( text_inputs : typing.Union[str, list[str]] **forward_params ) → A dict or a list of dict Parameters text_inputs ( str or list[str] ) &#x2014; The text(s) to generate. forward_params ( dict , optional ) &#x2014; Parameters passed to the model generation/forward method. forward_params are always passed to the underlying model. generate_kwargs ( dict , optional ) &#x2014; The dictionary of ad-hoc parametrization of generate_config to be used for the generation call. For a complete overview of generate, check the following guide . generate_kwargs are only passed to the underlying model if the latter is a generative model. Returns A dict or a list of dict The dictionaries have two keys: audio ( np.ndarray of shape (nb_channels, audio_length) ) — The generated audio waveform. sampling_rate ( int ) — The sampling rate of the generated audio waveform. Generates speech/audio from the inputs. See the TextToAudioPipeline documentation for more information. ZeroShotAudioClassificationPipeline class transformers. ZeroShotAudioClassificationPipeline &lt; source &gt; ( **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . feature_extractor ( SequenceFeatureExtractor ) &#x2014; The feature extractor that will be used by the pipeline to encode data for the model. This object inherits from SequenceFeatureExtractor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Zero shot audio classification pipeline using ClapModel . This pipeline predicts the class of an audio when you provide an audio and a set of candidate_labels . The default hypothesis_template is : &quot;This is a sound of {}.&quot; . Make sure you update it for your usage. Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; from datasets import load_dataset &gt;&gt;&gt; dataset = load_dataset( &quot;ashraq/esc50&quot; ) &gt;&gt;&gt; audio = next ( iter (dataset[ &quot;train&quot; ][ &quot;audio&quot; ]))[ &quot;array&quot; ] &gt;&gt;&gt; classifier = pipeline(task= &quot;zero-shot-audio-classification&quot; , model= &quot;laion/clap-htsat-unfused&quot; ) &gt;&gt;&gt; classifier(audio, candidate_labels=[ &quot;Sound of a dog&quot; , &quot;Sound of vacuum cleaner&quot; ]) [{ &#x27;score&#x27; : 0.9996 , &#x27;label&#x27; : &#x27;Sound of a dog&#x27; }, { &#x27;score&#x27; : 0.0004 , &#x27;label&#x27; : &#x27;Sound of vaccum cleaner&#x27; }] Learn more about the basics of using a pipeline in the pipeline tutorial This audio classification pipeline can currently be loaded from pipeline() using the following task identifier: &quot;zero-shot-audio-classification&quot; . See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( audios : typing.Union[numpy.ndarray, bytes, str, dict] **kwargs : typing.Any ) Parameters audios ( str , list[str] , np.array or list[np.array] ) &#x2014; The pipeline handles three types of inputs: A string containing a http link pointing to an audio A string containing a local path to an audio An audio loaded in numpy candidate_labels ( list[str] ) &#x2014; The candidate labels for this audio. They will be formatted using hypothesis_template . hypothesis_template ( str , optional , defaults to &quot;This is a sound of {}&quot; ) &#x2014; The format used in conjunction with candidate_labels to attempt the audio classification by replacing the placeholder with the candidate_labels. Pass &#x201D;{}&#x201D; if candidate_labels are already formatted. Assign labels to the audio(s) passed as inputs. Computer vision Pipelines available for computer vision tasks include the following. DepthEstimationPipeline class transformers. DepthEstimationPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Depth estimation pipeline using any AutoModelForDepthEstimation . This pipeline predicts the depth of an image. Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; depth_estimator = pipeline(task= &quot;depth-estimation&quot; , model= &quot;LiheYoung/depth-anything-base-hf&quot; ) &gt;&gt;&gt; output = depth_estimator( &quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot; ) &gt;&gt;&gt; # This is a tensor with the values being the depth expressed in meters for each pixel &gt;&gt;&gt; output[ &quot;predicted_depth&quot; ].shape torch.Size([ 1 , 384 , 384 ]) Learn more about the basics of using a pipeline in the pipeline tutorial This depth estimation pipeline can currently be loaded from pipeline() using the following task identifier: &quot;depth-estimation&quot; . See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( inputs : typing.Union[str, list[str], ForwardRef('Image.Image'), list['Image.Image']] **kwargs : typing.Any ) Parameters inputs ( str , list[str] , PIL.Image or list[PIL.Image] ) &#x2014; The pipeline handles three types of images: A string containing a http link pointing to an image A string containing a local path to an image An image loaded in PIL directly The pipeline accepts either a single image or a batch of images, which must then be passed as a string. Images in a batch must all be in the same format: all as http links, all as local paths, or all as PIL images. parameters ( Dict , optional ) &#x2014; A dictionary of argument names to parameter values, to control pipeline behaviour. The only parameter available right now is timeout , which is the length of time, in seconds, that the pipeline should wait before giving up on trying to download an image. timeout ( float , optional , defaults to None) &#x2014; The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and the call may block forever. Predict the depth(s) of the image(s) passed as inputs. ImageClassificationPipeline class transformers. ImageClassificationPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. function_to_apply ( str , optional , defaults to &quot;default&quot; ) &#x2014; The function to apply to the model outputs in order to retrieve the scores. Accepts four different values: &quot;default&quot; : if the model has a single label, will apply the sigmoid function on the output. If the model has several labels, will apply the softmax function on the output. &quot;sigmoid&quot; : Applies the sigmoid function on the output. &quot;softmax&quot; : Applies the softmax function on the output. &quot;none&quot; : Does not apply any function on the output. Image classification pipeline using any AutoModelForImageClassification . This pipeline predicts the class of an image. Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; classifier = pipeline(model= &quot;microsoft/beit-base-patch16-224-pt22k-ft22k&quot; ) &gt;&gt;&gt; classifier( &quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot; ) [{ &#x27;score&#x27; : 0.442 , &#x27;label&#x27; : &#x27;macaw&#x27; }, { &#x27;score&#x27; : 0.088 , &#x27;label&#x27; : &#x27;popinjay&#x27; }, { &#x27;score&#x27; : 0.075 , &#x27;label&#x27; : &#x27;parrot&#x27; }, { &#x27;score&#x27; : 0.073 , &#x27;label&#x27; : &#x27;parodist, lampooner&#x27; }, { &#x27;score&#x27; : 0.046 , &#x27;label&#x27; : &#x27;poll, poll_parrot&#x27; }] Learn more about the basics of using a pipeline in the pipeline tutorial This image classification pipeline can currently be loaded from pipeline() using the following task identifier: &quot;image-classification&quot; . See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( inputs : typing.Union[str, list[str], ForwardRef('Image.Image'), list['Image.Image']] **kwargs : typing.Any ) Parameters inputs ( str , list[str] , PIL.Image or list[PIL.Image] ) &#x2014; The pipeline handles three types of images: A string containing a http link pointing to an image A string containing a local path to an image An image loaded in PIL directly The pipeline accepts either a single image or a batch of images, which must then be passed as a string. Images in a batch must all be in the same format: all as http links, all as local paths, or all as PIL images. function_to_apply ( str , optional , defaults to &quot;default&quot; ) &#x2014; The function to apply to the model outputs in order to retrieve the scores. Accepts four different values: If this argument is not specified, then it will apply the following functions according to the number of labels: If the model has a single label, will apply the sigmoid function on the output. If the model has several labels, will apply the softmax function on the output. Possible values are: &quot;sigmoid&quot; : Applies the sigmoid function on the output. &quot;softmax&quot; : Applies the softmax function on the output. &quot;none&quot; : Does not apply any function on the output. top_k ( int , optional , defaults to 5) &#x2014; The number of top labels that will be returned by the pipeline. If the provided number is higher than the number of labels available in the model configuration, it will default to the number of labels. timeout ( float , optional , defaults to None) &#x2014; The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and the call may block forever. Assign labels to the image(s) passed as inputs. ImageSegmentationPipeline class transformers. ImageSegmentationPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Image segmentation pipeline using any AutoModelForXXXSegmentation . This pipeline predicts masks of objects and their classes. Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; segmenter = pipeline(model= &quot;facebook/detr-resnet-50-panoptic&quot; ) &gt;&gt;&gt; segments = segmenter( &quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot; ) &gt;&gt;&gt; len (segments) 2 &gt;&gt;&gt; segments[ 0 ][ &quot;label&quot; ] &#x27;bird&#x27; &gt;&gt;&gt; segments[ 1 ][ &quot;label&quot; ] &#x27;bird&#x27; &gt;&gt;&gt; type (segments[ 0 ][ &quot;mask&quot; ]) # This is a black and white mask showing where is the bird on the original image. &lt; class &#x27;PIL.Image.Image&#x27; &gt; &gt;&gt;&gt; segments[ 0 ][ &quot;mask&quot; ].size ( 768 , 512 ) This image segmentation pipeline can currently be loaded from pipeline() using the following task identifier: &quot;image-segmentation&quot; . See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( inputs : typing.Union[str, ForwardRef('Image.Image'), list[str], list['Image.Image']] **kwargs : typing.Any ) Parameters inputs ( str , list[str] , PIL.Image or list[PIL.Image] ) &#x2014; The pipeline handles three types of images: A string containing an HTTP(S) link pointing to an image A string containing a local path to an image An image loaded in PIL directly The pipeline accepts either a single image or a batch of images. Images in a batch must all be in the same format: all as HTTP(S) links, all as local paths, or all as PIL images. subtask ( str , optional ) &#x2014; Segmentation task to be performed, choose [ semantic , instance and panoptic ] depending on model capabilities. If not set, the pipeline will attempt tp resolve in the following order: panoptic , instance , semantic . threshold ( float , optional , defaults to 0.9) &#x2014; Probability threshold to filter out predicted masks. mask_threshold ( float , optional , defaults to 0.5) &#x2014; Threshold to use when turning the predicted masks into binary values. overlap_mask_area_threshold ( float , optional , defaults to 0.5) &#x2014; Mask overlap threshold to eliminate small, disconnected segments. timeout ( float , optional , defaults to None) &#x2014; The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and the call may block forever. Perform segmentation (detect masks &amp; classes) in the image(s) passed as inputs. ImageToImagePipeline class transformers. ImageToImagePipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Image to Image pipeline using any AutoModelForImageToImage . This pipeline generates an image based on a previous image input. Example: Copied &gt;&gt;&gt; from PIL import Image &gt;&gt;&gt; import requests &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; upscaler = pipeline( &quot;image-to-image&quot; , model= &quot;caidas/swin2SR-classical-sr-x2-64&quot; ) &gt;&gt;&gt; img = Image. open (requests.get( &quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot; , stream= True ).raw) &gt;&gt;&gt; img = img.resize(( 64 , 64 )) &gt;&gt;&gt; upscaled_img = upscaler(img) &gt;&gt;&gt; img.size ( 64 , 64 ) &gt;&gt;&gt; upscaled_img.size ( 144 , 144 ) This image to image pipeline can currently be loaded from pipeline() using the following task identifier: &quot;image-to-image&quot; . See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( images : typing.Union[str, list[str], ForwardRef('Image.Image'), list['Image.Image']] **kwargs : typing.Any ) Parameters images ( str , list[str] , PIL.Image or list[PIL.Image] ) &#x2014; The pipeline handles three types of images: A string containing a http link pointing to an image A string containing a local path to an image An image loaded in PIL directly The pipeline accepts either a single image or a batch of images, which must then be passed as a string. Images in a batch must all be in the same format: all as http links, all as local paths, or all as PIL images. timeout ( float , optional , defaults to None) &#x2014; The maximum time in seconds to wait for fetching images from the web. If None, no timeout is used and the call may block forever. Transform the image(s) passed as inputs. KeypointMatchingPipeline class transformers. KeypointMatchingPipeline &lt; source &gt; ( *args **kwargs ) Keypoint matching pipeline using any AutoModelForKeypointMatching . This pipeline matches keypoints between two images. __call__ &lt; source &gt; ( inputs : typing.Union[list[typing.Sequence[typing.Union[ForwardRef('Image.Image'), str]]], typing.Sequence[typing.Union[ForwardRef('Image.Image'), str]]] threshold : float = 0.0 **kwargs : typing.Any ) → Union[list[Match], list[list[Match]]] Parameters inputs ( str , list[str] , PIL.Image or list[PIL.Image] ) &#x2014; The pipeline handles three types of images: A string containing a http link pointing to an image A string containing a local path to an image An image loaded in PIL directly The pipeline accepts either a single pair of images or a batch of image pairs, which must then be passed as a string. Images in a batch must all be in the same format: all as http links, all as local paths, or all as PIL images. threshold ( float , optional , defaults to 0.0) &#x2014; The threshold to use for keypoint matching. Keypoints matched with a lower matching score will be filtered out. A value of 0 means that all matched keypoints will be returned. kwargs &#x2014; timeout ( float , *optional*, defaults to None) The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and the call may block forever. Returns Union[list[Match], list[list[Match]]] A list of matches or a list if a single image pair is provided, or of lists of matches if a batch of image pairs is provided. Each match is a dictionary containing the following keys: keypoint_image_0 ( Keypoint ): The keypoint in the first image (x, y coordinates). keypoint_image_1 ( Keypoint ): The keypoint in the second image (x, y coordinates). score ( float ): The matching score between the two keypoints. Find matches between keypoints in two images. ObjectDetectionPipeline class transformers. ObjectDetectionPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Object detection pipeline using any AutoModelForObjectDetection . This pipeline predicts bounding boxes of objects and their classes. Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; detector = pipeline(model= &quot;facebook/detr-resnet-50&quot; ) &gt;&gt;&gt; detector( &quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot; ) [{ &#x27;score&#x27; : 0.997 , &#x27;label&#x27; : &#x27;bird&#x27; , &#x27;box&#x27; : { &#x27;xmin&#x27; : 69 , &#x27;ymin&#x27; : 171 , &#x27;xmax&#x27; : 396 , &#x27;ymax&#x27; : 507 }}, { &#x27;score&#x27; : 0.999 , &#x27;label&#x27; : &#x27;bird&#x27; , &#x27;box&#x27; : { &#x27;xmin&#x27; : 398 , &#x27;ymin&#x27; : 105 , &#x27;xmax&#x27; : 767 , &#x27;ymax&#x27; : 507 }}] &gt;&gt;&gt; # x, y are expressed relative to the top left hand corner. Learn more about the basics of using a pipeline in the pipeline tutorial This object detection pipeline can currently be loaded from pipeline() using the following task identifier: &quot;object-detection&quot; . See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( *args **kwargs ) Parameters inputs ( str , list[str] , PIL.Image or list[PIL.Image] ) &#x2014; The pipeline handles three types of images: A string containing an HTTP(S) link pointing to an image A string containing a local path to an image An image loaded in PIL directly The pipeline accepts either a single image or a batch of images. Images in a batch must all be in the same format: all as HTTP(S) links, all as local paths, or all as PIL images. threshold ( float , optional , defaults to 0.5) &#x2014; The probability necessary to make a prediction. timeout ( float , optional , defaults to None) &#x2014; The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and the call may block forever. Detect objects (bounding boxes &amp; classes) in the image(s) passed as inputs. VideoClassificationPipeline class transformers. VideoClassificationPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Video classification pipeline using any AutoModelForVideoClassification . This pipeline predicts the class of a video. This video classification pipeline can currently be loaded from pipeline() using the following task identifier: &quot;video-classification&quot; . See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( inputs : typing.Union[str, list[str], NoneType] = None **kwargs ) Parameters inputs ( str , list[str] ) &#x2014; The pipeline handles three types of videos: A string containing a http link pointing to a video A string containing a local path to a video The pipeline accepts either a single video or a batch of videos, which must then be passed as a string. Videos in a batch must all be in the same format: all as http links or all as local paths. top_k ( int , optional , defaults to 5) &#x2014; The number of top labels that will be returned by the pipeline. If the provided number is higher than the number of labels available in the model configuration, it will default to the number of labels. num_frames ( int , optional , defaults to self.model.config.num_frames ) &#x2014; The number of frames sampled from the video to run the classification on. If not provided, will default to the number of frames specified in the model configuration. frame_sampling_rate ( int , optional , defaults to 1) &#x2014; The sampling rate used to select frames from the video. If not provided, will default to 1, i.e. every frame will be used. function_to_apply( str , optional , defaults to &#x201C;softmax&#x201D;) &#x2014; The function to apply to the model output. By default, the pipeline will apply the softmax function to the output of the model. Valid options: [&#x201C;softmax&#x201D;, &#x201C;sigmoid&#x201D;, &#x201C;none&#x201D;]. Note that passing Python&#x2019;s built-in None will default to &#x201C;softmax&#x201D;, so you need to pass the string &#x201C;none&#x201D; to disable any post-processing. Assign labels to the video(s) passed as inputs. ZeroShotImageClassificationPipeline class transformers. ZeroShotImageClassificationPipeline &lt; source &gt; ( **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Zero shot image classification pipeline using CLIPModel . This pipeline predicts the class of an image when you provide an image and a set of candidate_labels . Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; classifier = pipeline(model= &quot;google/siglip-so400m-patch14-384&quot; ) &gt;&gt;&gt; classifier( ... &quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot; , ... candidate_labels=[ &quot;animals&quot; , &quot;humans&quot; , &quot;landscape&quot; ], ... ) [{ &#x27;score&#x27; : 0.965 , &#x27;label&#x27; : &#x27;animals&#x27; }, { &#x27;score&#x27; : 0.03 , &#x27;label&#x27; : &#x27;humans&#x27; }, { &#x27;score&#x27; : 0.005 , &#x27;label&#x27; : &#x27;landscape&#x27; }] &gt;&gt;&gt; classifier( ... &quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot; , ... candidate_labels=[ &quot;black and white&quot; , &quot;photorealist&quot; , &quot;painting&quot; ], ... ) [{ &#x27;score&#x27; : 0.996 , &#x27;label&#x27; : &#x27;black and white&#x27; }, { &#x27;score&#x27; : 0.003 , &#x27;label&#x27; : &#x27;photorealist&#x27; }, { &#x27;score&#x27; : 0.0 , &#x27;label&#x27; : &#x27;painting&#x27; }] Learn more about the basics of using a pipeline in the pipeline tutorial This image classification pipeline can currently be loaded from pipeline() using the following task identifier: &quot;zero-shot-image-classification&quot; . See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( image : typing.Union[str, list[str], ForwardRef('Image.Image'), list['Image.Image']] candidate_labels : list **kwargs : typing.Any ) Parameters image ( str , list[str] , PIL.Image or list[PIL.Image] ) &#x2014; The pipeline handles three types of images: A string containing a http link pointing to an image A string containing a local path to an image An image loaded in PIL directly candidate_labels ( list[str] ) &#x2014; The candidate labels for this image. They will be formatted using hypothesis_template . hypothesis_template ( str , optional , defaults to &quot;This is a photo of {}&quot; ) &#x2014; The format used in conjunction with candidate_labels to attempt the image classification by replacing the placeholder with the candidate_labels. Pass &#x201D;{}&#x201D; if candidate_labels are already formatted. timeout ( float , optional , defaults to None) &#x2014; The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and the call may block forever. Assign labels to the image(s) passed as inputs. ZeroShotObjectDetectionPipeline class transformers. ZeroShotObjectDetectionPipeline &lt; source &gt; ( **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Zero shot object detection pipeline using OwlViTForObjectDetection . This pipeline predicts bounding boxes of objects when you provide an image and a set of candidate_labels . Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; detector = pipeline(model= &quot;google/owlvit-base-patch32&quot; , task= &quot;zero-shot-object-detection&quot; ) &gt;&gt;&gt; detector( ... &quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot; , ... candidate_labels=[ &quot;cat&quot; , &quot;couch&quot; ], ... ) [{ &#x27;score&#x27; : 0.287 , &#x27;label&#x27; : &#x27;cat&#x27; , &#x27;box&#x27; : { &#x27;xmin&#x27; : 324 , &#x27;ymin&#x27; : 20 , &#x27;xmax&#x27; : 640 , &#x27;ymax&#x27; : 373 }}, { &#x27;score&#x27; : 0.254 , &#x27;label&#x27; : &#x27;cat&#x27; , &#x27;box&#x27; : { &#x27;xmin&#x27; : 1 , &#x27;ymin&#x27; : 55 , &#x27;xmax&#x27; : 315 , &#x27;ymax&#x27; : 472 }}, { &#x27;score&#x27; : 0.121 , &#x27;label&#x27; : &#x27;couch&#x27; , &#x27;box&#x27; : { &#x27;xmin&#x27; : 4 , &#x27;ymin&#x27; : 0 , &#x27;xmax&#x27; : 642 , &#x27;ymax&#x27; : 476 }}] &gt;&gt;&gt; detector( ... &quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot; , ... candidate_labels=[ &quot;head&quot; , &quot;bird&quot; ], ... ) [{ &#x27;score&#x27; : 0.119 , &#x27;label&#x27; : &#x27;bird&#x27; , &#x27;box&#x27; : { &#x27;xmin&#x27; : 71 , &#x27;ymin&#x27; : 170 , &#x27;xmax&#x27; : 410 , &#x27;ymax&#x27; : 508 }}] Learn more about the basics of using a pipeline in the pipeline tutorial This object detection pipeline can currently be loaded from pipeline() using the following task identifier: &quot;zero-shot-object-detection&quot; . See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( image : typing.Union[str, ForwardRef('Image.Image'), list[dict[str, typing.Any]]] candidate_labels : typing.Union[str, list[str], NoneType] = None **kwargs : typing.Any ) Parameters image ( str , PIL.Image or list[dict[str, Any]] ) &#x2014; The pipeline handles three types of images: A string containing an http url pointing to an image A string containing a local path to an image An image loaded in PIL directly You can use this parameter to send directly a list of images, or a dataset or a generator like so: Detect objects (bounding boxes &amp; classes) in the image(s) passed as inputs. Natural Language Processing Pipelines available for natural language processing tasks include the following. FillMaskPipeline class transformers. FillMaskPipeline &lt; source &gt; ( model : typing.Union[ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel')] tokenizer : typing.Optional[transformers.tokenization_utils.PreTrainedTokenizer] = None feature_extractor : typing.Optional[ForwardRef('SequenceFeatureExtractor')] = None image_processor : typing.Optional[transformers.image_processing_utils.BaseImageProcessor] = None processor : typing.Optional[transformers.processing_utils.ProcessorMixin] = None modelcard : typing.Optional[transformers.modelcard.ModelCard] = None framework : typing.Optional[str] = None task : str = '' device : typing.Union[int, ForwardRef('torch.device')] = None binary_output : bool = False **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. top_k ( int , optional , defaults to 5) &#x2014; The number of predictions to return. targets ( str or list[str] , optional ) &#x2014; When passed, the model will limit the scores to the passed targets instead of looking up in the whole vocab. If the provided targets are not in the model vocab, they will be tokenized and the first resulting token will be used (with a warning, and that might be slower). tokenizer_kwargs ( dict , optional ) &#x2014; Additional dictionary of keyword arguments passed along to the tokenizer. __call__ &lt; source &gt; ( inputs : typing.Union[str, list[str]] **kwargs : typing.Any ) → A list or a list of list of dict Parameters inputs ( str or list[str] ) &#x2014; One or several texts (or one list of prompts) with masked tokens. targets ( str or list[str] , optional ) &#x2014; When passed, the model will limit the scores to the passed targets instead of looking up in the whole vocab. If the provided targets are not in the model vocab, they will be tokenized and the first resulting token will be used (with a warning, and that might be slower). top_k ( int , optional ) &#x2014; When passed, overrides the number of predictions to return. Returns A list or a list of list of dict Each result comes as list of dictionaries with the following keys: sequence ( str ) — The corresponding input with the mask token prediction. score ( float ) — The corresponding probability. token ( int ) — The predicted token id (to replace the masked one). token_str ( str ) — The predicted token (to replace the masked one). Fill the masked token in the text(s) given as inputs. QuestionAnsweringPipeline class transformers. QuestionAnsweringPipeline &lt; source &gt; ( model : typing.Union[ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel')] tokenizer : PreTrainedTokenizer modelcard : typing.Optional[transformers.modelcard.ModelCard] = None framework : typing.Optional[str] = None task : str = '' **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Question Answering pipeline using any ModelForQuestionAnswering . See the question answering examples for more information. Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; oracle = pipeline(model= &quot;deepset/roberta-base-squad2&quot; ) &gt;&gt;&gt; oracle(question= &quot;Where do I live?&quot; , context= &quot;My name is Wolfgang and I live in Berlin&quot; ) { &#x27;score&#x27; : 0.9191 , &#x27;start&#x27; : 34 , &#x27;end&#x27; : 40 , &#x27;answer&#x27; : &#x27;Berlin&#x27; } Learn more about the basics of using a pipeline in the pipeline tutorial This question answering pipeline can currently be loaded from pipeline() using the following task identifier: &quot;question-answering&quot; . The models that this pipeline can use are models that have been fine-tuned on a question answering task. See the up-to-date list of available models on huggingface.co/models . __call__ &lt; source &gt; ( *args **kwargs ) → A dict or a list of dict Parameters question ( str or list[str] ) &#x2014; One or several question(s) (must be used in conjunction with the context argument). context ( str or list[str] ) &#x2014; One or several context(s) associated with the question(s) (must be used in conjunction with the question argument). top_k ( int , optional , defaults to 1) &#x2014; The number of answers to return (will be chosen by order of likelihood). Note that we return less than top_k answers if there are not enough options available within the context. doc_stride ( int , optional , defaults to 128) &#x2014; If the context is too long to fit with the question for the model, it will be split in several chunks with some overlap. This argument controls the size of that overlap. max_answer_len ( int , optional , defaults to 15) &#x2014; The maximum length of predicted answers (e.g., only answers with a shorter length are considered). max_seq_len ( int , optional , defaults to 384) &#x2014; The maximum length of the total sentence (context + question) in tokens of each chunk passed to the model. The context will be split in several chunks (using doc_stride as overlap) if needed. max_question_len ( int , optional , defaults to 64) &#x2014; The maximum length of the question after tokenization. It will be truncated if needed. handle_impossible_answer ( bool , optional , defaults to False ) &#x2014; Whether or not we accept impossible as an answer. align_to_words ( bool , optional , defaults to True ) &#x2014; Attempts to align the answer to real words. Improves quality on space separated languages. Might hurt on non-space-separated languages (like Japanese or Chinese) Returns A dict or a list of dict Each result comes as a dictionary with the following keys: score ( float ) — The probability associated to the answer. start ( int ) — The character start index of the answer (in the tokenized version of the input). end ( int ) — The character end index of the answer (in the tokenized version of the input). answer ( str ) — The answer to the question. Answer the question(s) given as inputs by using the context(s). create_sample &lt; source &gt; ( question : typing.Union[str, list[str]] context : typing.Union[str, list[str]] ) → One or a list of SquadExample Parameters question ( str or list[str] ) &#x2014; The question(s) asked. context ( str or list[str] ) &#x2014; The context(s) in which we will look for the answer. Returns One or a list of SquadExample The corresponding SquadExample grouping question and context. QuestionAnsweringPipeline leverages the SquadExample internally. This helper method encapsulate all the logic for converting question(s) and context(s) to SquadExample . We currently support extractive question answering. span_to_answer &lt; source &gt; ( text : str start : int end : int ) → Dictionary like `{‘answer’ Parameters text ( str ) &#x2014; The actual context to extract the answer from. start ( int ) &#x2014; The answer starting token index. end ( int ) &#x2014; The answer end token index. Returns Dictionary like `{‘answer’ str, ‘start’: int, ‘end’: int}` When decoding from token probabilities, this method maps token indexes to actual word in the initial context. SummarizationPipeline class transformers. SummarizationPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Summarize news articles and other documents. This summarizing pipeline can currently be loaded from pipeline() using the following task identifier: &quot;summarization&quot; . The models that this pipeline can use are models that have been fine-tuned on a summarization task, which is currently, ’ bart-large-cnn ’, ’ google-t5/t5-small ’, ’ google-t5/t5-base ’, ’ google-t5/t5-large ’, ’ google-t5/t5-3b ’, ’ google-t5/t5-11b ’. See the up-to-date list of available models on huggingface.co/models . For a list of available parameters, see the following documentation Unless the model you’re using explicitly sets these generation parameters in its configuration files ( generation_config.json ), the following default values will be used: max_new_tokens: 256 num_beams: 4 Usage: Copied # use bart in pytorch summarizer = pipeline( &quot;summarization&quot; ) summarizer( &quot;An apple a day, keeps the doctor away&quot; , min_length= 5 , max_length= 20 ) # use t5 in tf summarizer = pipeline( &quot;summarization&quot; , model= &quot;google-t5/t5-base&quot; , tokenizer= &quot;google-t5/t5-base&quot; , framework= &quot;tf&quot; ) summarizer( &quot;An apple a day, keeps the doctor away&quot; , min_length= 5 , max_length= 20 ) __call__ &lt; source &gt; ( *args **kwargs ) → A list or a list of list of dict Parameters documents ( str or list[str] ) &#x2014; One or several articles (or one list of articles) to summarize. return_text ( bool , optional , defaults to True ) &#x2014; Whether or not to include the decoded texts in the outputs return_tensors ( bool , optional , defaults to False ) &#x2014; Whether or not to include the tensors of predictions (as token indices) in the outputs. clean_up_tokenization_spaces ( bool , optional , defaults to False ) &#x2014; Whether or not to clean up the potential extra spaces in the text output. generate_kwargs &#x2014; Additional keyword arguments to pass along to the generate method of the model (see the generate method corresponding to your framework here ). Returns A list or a list of list of dict Each result comes as a dictionary with the following keys: summary_text ( str , present when return_text=True ) — The summary of the corresponding input. summary_token_ids ( torch.Tensor or tf.Tensor , present when return_tensors=True ) — The token ids of the summary. Summarize the text(s) given as inputs. TableQuestionAnsweringPipeline class transformers. TableQuestionAnsweringPipeline &lt; source &gt; ( args_parser = &lt;transformers.pipelines.table_question_answering.TableQuestionAnsweringArgumentHandler object at 0x7f3821cbaf80> *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Table Question Answering pipeline using a ModelForTableQuestionAnswering . This pipeline is only available in PyTorch. Unless the model you’re using explicitly sets these generation parameters in its configuration files ( generation_config.json ), the following default values will be used: max_new_tokens: 256 Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; oracle = pipeline(model= &quot;google/tapas-base-finetuned-wtq&quot; ) &gt;&gt;&gt; table = { ... &quot;Repository&quot; : [ &quot;Transformers&quot; , &quot;Datasets&quot; , &quot;Tokenizers&quot; ], ... &quot;Stars&quot; : [ &quot;36542&quot; , &quot;4512&quot; , &quot;3934&quot; ], ... &quot;Contributors&quot; : [ &quot;651&quot; , &quot;77&quot; , &quot;34&quot; ], ... &quot;Programming language&quot; : [ &quot;Python&quot; , &quot;Python&quot; , &quot;Rust, Python and NodeJS&quot; ], ... } &gt;&gt;&gt; oracle(query= &quot;How many stars does the transformers repository have?&quot; , table=table) { &#x27;answer&#x27; : &#x27;AVERAGE &gt; 36542&#x27; , &#x27;coordinates&#x27; : [( 0 , 1 )], &#x27;cells&#x27; : [ &#x27;36542&#x27; ], &#x27;aggregator&#x27; : &#x27;AVERAGE&#x27; } Learn more about the basics of using a pipeline in the pipeline tutorial This tabular question answering pipeline can currently be loaded from pipeline() using the following task identifier: &quot;table-question-answering&quot; . The models that this pipeline can use are models that have been fine-tuned on a tabular question answering task. See the up-to-date list of available models on huggingface.co/models . __call__ &lt; source &gt; ( *args **kwargs ) → A dictionary or a list of dictionaries containing results Parameters table ( pd.DataFrame or Dict ) &#x2014; Pandas DataFrame or dictionary that will be converted to a DataFrame containing all the table values. See above for an example of dictionary. query ( str or list[str] ) &#x2014; Query or list of queries that will be sent to the model alongside the table. sequential ( bool , optional , defaults to False ) &#x2014; Whether to do inference sequentially or as a batch. Batching is faster, but models like SQA require the inference to be done sequentially to extract relations within sequences, given their conversational nature. padding ( bool , str or PaddingStrategy , optional , defaults to False ) &#x2014; Activates and controls padding. Accepts the following values: True or &apos;longest&apos; : Pad to the longest sequence in the batch (or no padding if only a single sequence if provided). &apos;max_length&apos; : Pad to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. False or &apos;do_not_pad&apos; (default): No padding (i.e., can output a batch with sequences of different lengths). truncation ( bool , str or TapasTruncationStrategy , optional , defaults to False ) &#x2014; Activates and controls truncation. Accepts the following values: True or &apos;drop_rows_to_fit&apos; : Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will truncate row by row, removing rows from the table. False or &apos;do_not_truncate&apos; (default): No truncation (i.e., can output batch with sequence lengths greater than the model maximum admissible input size). Returns A dictionary or a list of dictionaries containing results Each result is a dictionary with the following keys: answer ( str ) — The answer of the query given the table. If there is an aggregator, the answer will be preceded by AGGREGATOR &gt; . coordinates ( list[tuple[int, int]] ) — Coordinates of the cells of the answers. cells ( list[str] ) — List of strings made up of the answer cell values. aggregator ( str ) — If the model has an aggregator, this returns the aggregator. Answers queries according to a table. The pipeline accepts several types of inputs which are detailed below: pipeline(table, query) pipeline(table, [query]) pipeline(table=table, query=query) pipeline(table=table, query=[query]) pipeline({&quot;table&quot;: table, &quot;query&quot;: query}) pipeline({&quot;table&quot;: table, &quot;query&quot;: [query]}) pipeline([{&quot;table&quot;: table, &quot;query&quot;: query}, {&quot;table&quot;: table, &quot;query&quot;: query}]) The table argument should be a dict or a DataFrame built from that dict, containing the whole table: Example: Copied data = { &quot;actors&quot; : [ &quot;brad pitt&quot; , &quot;leonardo di caprio&quot; , &quot;george clooney&quot; ], &quot;age&quot; : [ &quot;56&quot; , &quot;45&quot; , &quot;59&quot; ], &quot;number of movies&quot; : [ &quot;87&quot; , &quot;53&quot; , &quot;69&quot; ], &quot;date of birth&quot; : [ &quot;7 february 1967&quot; , &quot;10 june 1996&quot; , &quot;28 november 1967&quot; ], } This dictionary can be passed in as such, or can be converted to a pandas DataFrame: Example: Copied import pandas as pd table = pd.DataFrame.from_dict(data) TextClassificationPipeline class transformers. TextClassificationPipeline &lt; source &gt; ( **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. return_all_scores ( bool , optional , defaults to False ) &#x2014; Whether to return all prediction scores or just the one of the predicted class. function_to_apply ( str , optional , defaults to &quot;default&quot; ) &#x2014; The function to apply to the model outputs in order to retrieve the scores. Accepts four different values: &quot;default&quot; : if the model has a single label, will apply the sigmoid function on the output. If the model has several labels, will apply the softmax function on the output. In case of regression tasks, will not apply any function on the output. &quot;sigmoid&quot; : Applies the sigmoid function on the output. &quot;softmax&quot; : Applies the softmax function on the output. &quot;none&quot; : Does not apply any function on the output. Text classification pipeline using any ModelForSequenceClassification . See the sequence classification examples for more information. Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; classifier = pipeline(model= &quot;distilbert/distilbert-base-uncased-finetuned-sst-2-english&quot; ) &gt;&gt;&gt; classifier( &quot;This movie is disgustingly good !&quot; ) [{ &#x27;label&#x27; : &#x27;POSITIVE&#x27; , &#x27;score&#x27; : 1.0 }] &gt;&gt;&gt; classifier( &quot;Director tried too much.&quot; ) [{ &#x27;label&#x27; : &#x27;NEGATIVE&#x27; , &#x27;score&#x27; : 0.996 }] Learn more about the basics of using a pipeline in the pipeline tutorial This text classification pipeline can currently be loaded from pipeline() using the following task identifier: &quot;sentiment-analysis&quot; (for classifying sequences according to positive or negative sentiments). If multiple classification labels are available ( model.config.num_labels &gt;= 2 ), the pipeline will run a softmax over the results. If there is a single label, the pipeline will run a sigmoid over the result. In case of regression tasks ( model.config.problem_type == &quot;regression&quot; ), will not apply any function on the output. The models that this pipeline can use are models that have been fine-tuned on a sequence classification task. See the up-to-date list of available models on huggingface.co/models . __call__ &lt; source &gt; ( inputs : typing.Union[str, list[str], dict[str, str], list[dict[str, str]]] **kwargs : typing.Any ) → A list of dict Parameters inputs ( str or list[str] or dict[str] , or list[dict[str]] ) &#x2014; One or several texts to classify. In order to use text pairs for your classification, you can send a dictionary containing {&quot;text&quot;, &quot;text_pair&quot;} keys, or a list of those. top_k ( int , optional , defaults to 1 ) &#x2014; How many results to return. function_to_apply ( str , optional , defaults to &quot;default&quot; ) &#x2014; The function to apply to the model outputs in order to retrieve the scores. Accepts four different values: If this argument is not specified, then it will apply the following functions according to the number of labels: If problem type is regression, will not apply any function on the output. If the model has a single label, will apply the sigmoid function on the output. If the model has several labels, will apply the softmax function on the output. Possible values are: &quot;sigmoid&quot; : Applies the sigmoid function on the output. &quot;softmax&quot; : Applies the softmax function on the output. &quot;none&quot; : Does not apply any function on the output. Returns A list of dict Each result comes as list of dictionaries with the following keys: label ( str ) — The label predicted. score ( float ) — The corresponding probability. If top_k is used, one such dictionary is returned per label. Classify the text(s) given as inputs. TextGenerationPipeline class transformers. TextGenerationPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Language generation pipeline using any ModelWithLMHead or ModelForCausalLM . This pipeline predicts the words that will follow a specified text prompt. When the underlying model is a conversational model, it can also accept one or more chats, in which case the pipeline will operate in chat mode and will continue the chat(s) by adding its response(s). Each chat takes the form of a list of dicts, where each dict contains “role” and “content” keys. Unless the model you’re using explicitly sets these generation parameters in its configuration files ( generation_config.json ), the following default values will be used: max_new_tokens: 256 do_sample: True temperature: 0.7 Examples: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; generator = pipeline(model= &quot;openai-community/gpt2&quot; ) &gt;&gt;&gt; generator( &quot;I can&#x27;t believe you did such a &quot; , do_sample= False ) [{ &#x27;generated_text&#x27; : &quot;I can&#x27;t believe you did such a icky thing to me. I&#x27;m so sorry. I&#x27;m so sorry. I&#x27;m so sorry. I&#x27;m so sorry. I&#x27;m so sorry. I&#x27;m so sorry. I&#x27;m so sorry. I&quot; }] &gt;&gt;&gt; # These parameters will return suggestions, and only the newly created text making it easier for prompting suggestions. &gt;&gt;&gt; outputs = generator( &quot;My tart needs some&quot; , num_return_sequences= 4 , return_full_text= False ) Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; generator = pipeline(model= &quot;HuggingFaceH4/zephyr-7b-beta&quot; ) &gt;&gt;&gt; # Zephyr-beta is a conversational model, so let&#x27;s pass it a chat instead of a single string &gt;&gt;&gt; generator([{ &quot;role&quot; : &quot;user&quot; , &quot;content&quot; : &quot;What is the capital of France? Answer in one word.&quot; }], do_sample= False , max_new_tokens= 2 ) [{ &#x27;generated_text&#x27; : [{ &#x27;role&#x27; : &#x27;user&#x27; , &#x27;content&#x27; : &#x27;What is the capital of France? Answer in one word.&#x27; }, { &#x27;role&#x27; : &#x27;assistant&#x27; , &#x27;content&#x27; : &#x27;Paris&#x27; }]}] Learn more about the basics of using a pipeline in the pipeline tutorial . You can pass text generation parameters to this pipeline to control stopping criteria, decoding strategy, and more. Learn more about text generation parameters in Text generation strategies and Text generation . This language generation pipeline can currently be loaded from pipeline() using the following task identifier: &quot;text-generation&quot; . The models that this pipeline can use are models that have been trained with an autoregressive language modeling objective. See the list of available text completion models and the list of conversational models on [huggingface.co/models]. __call__ &lt; source &gt; ( text_inputs **kwargs ) → A list or a list of lists of dict Parameters text_inputs ( str , list[str] , list[dict[str, str]], or list[list[dict[str, str]]] ) &#x2014; One or several prompts (or one list of prompts) to complete. If strings or a list of string are passed, this pipeline will continue each prompt. Alternatively, a &#x201C;chat&#x201D;, in the form of a list of dicts with &#x201C;role&#x201D; and &#x201C;content&#x201D; keys, can be passed, or a list of such chats. When chats are passed, the model&#x2019;s chat template will be used to format them before passing them to the model. return_tensors ( bool , optional , defaults to False ) &#x2014; Returns the tensors of predictions (as token indices) in the outputs. If set to True , the decoded text is not returned. return_text ( bool , optional ) &#x2014; Returns the decoded texts in the outputs. return_full_text ( bool , optional , defaults to True ) &#x2014; If set to False only added text is returned, otherwise the full text is returned. Cannot be specified at the same time as return_text . clean_up_tokenization_spaces ( bool , optional , defaults to True ) &#x2014; Whether or not to clean up the potential extra spaces in the text output. continue_final_message( bool , optional ) &#x2014; This indicates that you want the model to continue the last message in the input chat rather than starting a new one, allowing you to &#x201C;prefill&#x201D; its response. By default this is True when the final message in the input chat has the assistant role and False otherwise, but you can manually override that behaviour by setting this flag. prefix ( str , optional ) &#x2014; Prefix added to prompt. handle_long_generation ( str , optional ) &#x2014; By default, this pipelines does not handle long generation (ones that exceed in one form or the other the model maximum length). There is no perfect way to address this (more info : https://github.com/huggingface/transformers/issues/14033#issuecomment-948385227 ). This provides common strategies to work around that problem depending on your use case. None : default strategy where nothing in particular happens &quot;hole&quot; : Truncates left of input, and leaves a gap wide enough to let generation happen (might truncate a lot of the prompt and not suitable when generation exceed the model capacity) tokenizer_encode_kwargs ( dict , optional ) &#x2014; Additional keyword arguments to pass along to the encoding step of the tokenizer. If the text input is a chat, it is passed to apply_chat_template . Otherwise, it is passed to __call__ . generate_kwargs ( dict , optional ) &#x2014; Additional keyword arguments to pass along to the generate method of the model (see the generate method corresponding to your framework here ). Returns A list or a list of lists of dict Returns one of the following dictionaries (cannot return a combination of both generated_text and generated_token_ids ): generated_text ( str , present when return_text=True ) — The generated text. generated_token_ids ( torch.Tensor or tf.Tensor , present when return_tensors=True ) — The token ids of the generated text. Complete the prompt(s) given as inputs. Text2TextGenerationPipeline class transformers. Text2TextGenerationPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Pipeline for text to text generation using seq2seq models. Unless the model you’re using explicitly sets these generation parameters in its configuration files ( generation_config.json ), the following default values will be used: max_new_tokens: 256 num_beams: 4 Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; generator = pipeline(model= &quot;mrm8488/t5-base-finetuned-question-generation-ap&quot; ) &gt;&gt;&gt; generator( ... &quot;answer: Manuel context: Manuel has created RuPERTa-base with the support of HF-Transformers and Google&quot; ... ) [{ &#x27;generated_text&#x27; : &#x27;question: Who created the RuPERTa-base?&#x27; }] Learn more about the basics of using a pipeline in the pipeline tutorial . You can pass text generation parameters to this pipeline to control stopping criteria, decoding strategy, and more. Learn more about text generation parameters in Text generation strategies and Text generation . This Text2TextGenerationPipeline pipeline can currently be loaded from pipeline() using the following task identifier: &quot;text2text-generation&quot; . The models that this pipeline can use are models that have been fine-tuned on a translation task. See the up-to-date list of available models on huggingface.co/models . For a list of available parameters, see the following documentation Usage: Copied text2text_generator = pipeline( &quot;text2text-generation&quot; ) text2text_generator( &quot;question: What is 42 ? context: 42 is the answer to life, the universe and everything&quot; ) __call__ &lt; source &gt; ( *args : typing.Union[str, list[str]] **kwargs : typing.Any ) → A list or a list of list of dict Parameters args ( str or list[str] ) &#x2014; Input text for the encoder. return_tensors ( bool , optional , defaults to False ) &#x2014; Whether or not to include the tensors of predictions (as token indices) in the outputs. return_text ( bool , optional , defaults to True ) &#x2014; Whether or not to include the decoded texts in the outputs. clean_up_tokenization_spaces ( bool , optional , defaults to False ) &#x2014; Whether or not to clean up the potential extra spaces in the text output. truncation ( TruncationStrategy , optional , defaults to TruncationStrategy.DO_NOT_TRUNCATE ) &#x2014; The truncation strategy for the tokenization within the pipeline. TruncationStrategy.DO_NOT_TRUNCATE (default) will never truncate, but it is sometimes desirable to truncate the input to fit the model&#x2019;s max_length instead of throwing an error down the line. generate_kwargs &#x2014; Additional keyword arguments to pass along to the generate method of the model (see the generate method corresponding to your framework here ). Returns A list or a list of list of dict Each result comes as a dictionary with the following keys: generated_text ( str , present when return_text=True ) — The generated text. generated_token_ids ( torch.Tensor or tf.Tensor , present when return_tensors=True ) — The token ids of the generated text. Generate the output text(s) using text(s) given as inputs. check_inputs &lt; source &gt; ( input_length : int min_length : int max_length : int ) Checks whether there might be something wrong with given input with regard to the model. TokenClassificationPipeline class transformers. TokenClassificationPipeline &lt; source &gt; ( args_parser = &lt;transformers.pipelines.token_classification.TokenClassificationArgumentHandler object at 0x7f3821ce18d0> *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. ignore_labels ( list[str] , defaults to [&quot;O&quot;] ) &#x2014; A list of labels to ignore. grouped_entities ( bool , optional , defaults to False ) &#x2014; DEPRECATED, use aggregation_strategy instead. Whether or not to group the tokens corresponding to the same entity together in the predictions or not. stride ( int , optional ) &#x2014; If stride is provided, the pipeline is applied on all the text. The text is split into chunks of size model_max_length. Works only with fast tokenizers and aggregation_strategy different from NONE . The value of this argument defines the number of overlapping tokens between chunks. In other words, the model will shift forward by tokenizer.model_max_length - stride tokens each step. aggregation_strategy ( str , optional , defaults to &quot;none&quot; ) &#x2014; The strategy to fuse (or not) tokens based on the model prediction. &#x201C;none&#x201D; : Will simply not do any aggregation and simply return raw results from the model &#x201C;simple&#x201D; : Will attempt to group entities following the default schema. (A, B-TAG), (B, I-TAG), (C, I-TAG), (D, B-TAG2) (E, B-TAG2) will end up being [{&#x201C;word&#x201D;: ABC, &#x201C;entity&#x201D;: &#x201C;TAG&#x201D;}, {&#x201C;word&#x201D;: &#x201C;D&#x201D;, &#x201C;entity&#x201D;: &#x201C;TAG2&#x201D;}, {&#x201C;word&#x201D;: &#x201C;E&#x201D;, &#x201C;entity&#x201D;: &#x201C;TAG2&#x201D;}] Notice that two consecutive B tags will end up as different entities. On word based languages, we might end up splitting words undesirably : Imagine Microsoft being tagged as [{&#x201C;word&#x201D;: &#x201C;Micro&#x201D;, &#x201C;entity&#x201D;: &#x201C;ENTERPRISE&#x201D;}, {&#x201C;word&#x201D;: &#x201C;soft&#x201D;, &#x201C;entity&#x201D;: &#x201C;NAME&#x201D;}]. Look for FIRST, MAX, AVERAGE for ways to mitigate that and disambiguate words (on languages that support that meaning, which is basically tokens separated by a space). These mitigations will only work on real words, &#x201C;New york&#x201D; might still be tagged with two different entities. &#x201C;first&#x201D; : (works only on word based models) Will use the SIMPLE strategy except that words, cannot end up with different tags. Words will simply use the tag of the first token of the word when there is ambiguity. &#x201C;average&#x201D; : (works only on word based models) Will use the SIMPLE strategy except that words, cannot end up with different tags. scores will be averaged first across tokens, and then the maximum label is applied. &#x201C;max&#x201D; : (works only on word based models) Will use the SIMPLE strategy except that words, cannot end up with different tags. Word entity will simply be the token with the maximum score. Named Entity Recognition pipeline using any ModelForTokenClassification . See the named entity recognition examples for more information. Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; token_classifier = pipeline(model= &quot;Jean-Baptiste/camembert-ner&quot; , aggregation_strategy= &quot;simple&quot; ) &gt;&gt;&gt; sentence = &quot;Je m&#x27;appelle jean-baptiste et je vis à montréal&quot; &gt;&gt;&gt; tokens = token_classifier(sentence) &gt;&gt;&gt; tokens [{ &#x27;entity_group&#x27; : &#x27;PER&#x27; , &#x27;score&#x27; : 0.9931 , &#x27;word&#x27; : &#x27;jean-baptiste&#x27; , &#x27;start&#x27; : 12 , &#x27;end&#x27; : 26 }, { &#x27;entity_group&#x27; : &#x27;LOC&#x27; , &#x27;score&#x27; : 0.998 , &#x27;word&#x27; : &#x27;montréal&#x27; , &#x27;start&#x27; : 38 , &#x27;end&#x27; : 47 }] &gt;&gt;&gt; token = tokens[ 0 ] &gt;&gt;&gt; # Start and end provide an easy way to highlight words in the original text. &gt;&gt;&gt; sentence[token[ &quot;start&quot; ] : token[ &quot;end&quot; ]] &#x27; jean-baptiste&#x27; &gt;&gt;&gt; # Some models use the same idea to do part of speech. &gt;&gt;&gt; syntaxer = pipeline(model= &quot;vblagoje/bert-english-uncased-finetuned-pos&quot; , aggregation_strategy= &quot;simple&quot; ) &gt;&gt;&gt; syntaxer( &quot;My name is Sarah and I live in London&quot; ) [{ &#x27;entity_group&#x27; : &#x27;PRON&#x27; , &#x27;score&#x27; : 0.999 , &#x27;word&#x27; : &#x27;my&#x27; , &#x27;start&#x27; : 0 , &#x27;end&#x27; : 2 }, { &#x27;entity_group&#x27; : &#x27;NOUN&#x27; , &#x27;score&#x27; : 0.997 , &#x27;word&#x27; : &#x27;name&#x27; , &#x27;start&#x27; : 3 , &#x27;end&#x27; : 7 }, { &#x27;entity_group&#x27; : &#x27;AUX&#x27; , &#x27;score&#x27; : 0.994 , &#x27;word&#x27; : &#x27;is&#x27; , &#x27;start&#x27; : 8 , &#x27;end&#x27; : 10 }, { &#x27;entity_group&#x27; : &#x27;PROPN&#x27; , &#x27;score&#x27; : 0.999 , &#x27;word&#x27; : &#x27;sarah&#x27; , &#x27;start&#x27; : 11 , &#x27;end&#x27; : 16 }, { &#x27;entity_group&#x27; : &#x27;CCONJ&#x27; , &#x27;score&#x27; : 0.999 , &#x27;word&#x27; : &#x27;and&#x27; , &#x27;start&#x27; : 17 , &#x27;end&#x27; : 20 }, { &#x27;entity_group&#x27; : &#x27;PRON&#x27; , &#x27;score&#x27; : 0.999 , &#x27;word&#x27; : &#x27;i&#x27; , &#x27;start&#x27; : 21 , &#x27;end&#x27; : 22 }, { &#x27;entity_group&#x27; : &#x27;VERB&#x27; , &#x27;score&#x27; : 0.998 , &#x27;word&#x27; : &#x27;live&#x27; , &#x27;start&#x27; : 23 , &#x27;end&#x27; : 27 }, { &#x27;entity_group&#x27; : &#x27;ADP&#x27; , &#x27;score&#x27; : 0.999 , &#x27;word&#x27; : &#x27;in&#x27; , &#x27;start&#x27; : 28 , &#x27;end&#x27; : 30 }, { &#x27;entity_group&#x27; : &#x27;PROPN&#x27; , &#x27;score&#x27; : 0.999 , &#x27;word&#x27; : &#x27;london&#x27; , &#x27;start&#x27; : 31 , &#x27;end&#x27; : 37 }] Learn more about the basics of using a pipeline in the pipeline tutorial This token recognition pipeline can currently be loaded from pipeline() using the following task identifier: &quot;ner&quot; (for predicting the classes of tokens in a sequence: person, organisation, location or miscellaneous). The models that this pipeline can use are models that have been fine-tuned on a token classification task. See the up-to-date list of available models on huggingface.co/models . __call__ &lt; source &gt; ( inputs : typing.Union[str, list[str]] **kwargs : typing.Any ) → A list or a list of list of dict Parameters inputs ( str or List[str] ) &#x2014; One or several texts (or one list of texts) for token classification. Can be pre-tokenized when is_split_into_words=True . Returns A list or a list of list of dict Each result comes as a list of dictionaries (one for each token in the corresponding input, or each entity if this pipeline was instantiated with an aggregation_strategy) with the following keys: word ( str ) — The token/word classified. This is obtained by decoding the selected tokens. If you want to have the exact string in the original sentence, use start and end . score ( float ) — The corresponding probability for entity . entity ( str ) — The entity predicted for that token/word (it is named entity_group when aggregation_strategy is not \"none\" . index ( int , only present when aggregation_strategy=\"none\" ) — The index of the corresponding token in the sentence. start ( int , optional ) — The index of the start of the corresponding entity in the sentence. Only exists if the offsets are available within the tokenizer end ( int , optional ) — The index of the end of the corresponding entity in the sentence. Only exists if the offsets are available within the tokenizer Classify each token of the text(s) given as inputs. aggregate_words &lt; source &gt; ( entities : list aggregation_strategy : AggregationStrategy ) Override tokens from a given word that disagree to force agreement on word boundaries. Example: micro|soft| com|pany| B-ENT I-NAME I-ENT I-ENT will be rewritten with first strategy as microsoft| company| B-ENT I-ENT gather_pre_entities &lt; source &gt; ( sentence : str input_ids : ndarray scores : ndarray offset_mapping : typing.Optional[list[tuple[int, int]]] special_tokens_mask : ndarray aggregation_strategy : AggregationStrategy word_ids : typing.Optional[list[typing.Optional[int]]] = None word_to_chars_map : typing.Optional[list[tuple[int, int]]] = None ) Fuse various numpy arrays into dicts with all the information needed for aggregation group_entities &lt; source &gt; ( entities : list ) Parameters entities ( dict ) &#x2014; The entities predicted by the pipeline. Find and group together the adjacent tokens with the same entity predicted. group_sub_entities &lt; source &gt; ( entities : list ) Parameters entities ( dict ) &#x2014; The entities predicted by the pipeline. Group together the adjacent tokens with the same entity predicted. TranslationPipeline class transformers. TranslationPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Translates from one language to another. This translation pipeline can currently be loaded from pipeline() using the following task identifier: &quot;translation_xx_to_yy&quot; . The models that this pipeline can use are models that have been fine-tuned on a translation task. See the up-to-date list of available models on huggingface.co/models . For a list of available parameters, see the following documentation Unless the model you’re using explicitly sets these generation parameters in its configuration files ( generation_config.json ), the following default values will be used: max_new_tokens: 256 num_beams: 4 Usage: Copied en_fr_translator = pipeline( &quot;translation_en_to_fr&quot; ) en_fr_translator( &quot;How old are you?&quot; ) __call__ &lt; source &gt; ( *args **kwargs ) → A list or a list of list of dict Parameters args ( str or list[str] ) &#x2014; Texts to be translated. return_tensors ( bool , optional , defaults to False ) &#x2014; Whether or not to include the tensors of predictions (as token indices) in the outputs. return_text ( bool , optional , defaults to True ) &#x2014; Whether or not to include the decoded texts in the outputs. clean_up_tokenization_spaces ( bool , optional , defaults to False ) &#x2014; Whether or not to clean up the potential extra spaces in the text output. src_lang ( str , optional ) &#x2014; The language of the input. Might be required for multilingual models. Will not have any effect for single pair translation models tgt_lang ( str , optional ) &#x2014; The language of the desired output. Might be required for multilingual models. Will not have any effect for single pair translation models generate_kwargs &#x2014; Additional keyword arguments to pass along to the generate method of the model (see the generate method corresponding to your framework here ). Returns A list or a list of list of dict Each result comes as a dictionary with the following keys: translation_text ( str , present when return_text=True ) — The translation. translation_token_ids ( torch.Tensor or tf.Tensor , present when return_tensors=True ) — The token ids of the translation. Translate the text(s) given as inputs. ZeroShotClassificationPipeline class transformers. ZeroShotClassificationPipeline &lt; source &gt; ( args_parser = &lt;transformers.pipelines.zero_shot_classification.ZeroShotClassificationArgumentHandler object at 0x7f3821b9c460> *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. NLI-based zero-shot classification pipeline using a ModelForSequenceClassification trained on NLI (natural language inference) tasks. Equivalent of text-classification pipelines, but these models don’t require a hardcoded number of potential classes, they can be chosen at runtime. It usually means it’s slower but it is much more flexible. Any combination of sequences and labels can be passed and each combination will be posed as a premise/hypothesis pair and passed to the pretrained model. Then, the logit for entailment is taken as the logit for the candidate label being valid. Any NLI model can be used, but the id of the entailment label must be included in the model config’s :attr: ~transformers.PretrainedConfig.label2id . Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; oracle = pipeline(model= &quot;facebook/bart-large-mnli&quot; ) &gt;&gt;&gt; oracle( ... &quot;I have a problem with my iphone that needs to be resolved asap!!&quot; , ... candidate_labels=[ &quot;urgent&quot; , &quot;not urgent&quot; , &quot;phone&quot; , &quot;tablet&quot; , &quot;computer&quot; ], ... ) { &#x27;sequence&#x27; : &#x27;I have a problem with my iphone that needs to be resolved asap!!&#x27; , &#x27;labels&#x27; : [ &#x27;urgent&#x27; , &#x27;phone&#x27; , &#x27;computer&#x27; , &#x27;not urgent&#x27; , &#x27;tablet&#x27; ], &#x27;scores&#x27; : [ 0.504 , 0.479 , 0.013 , 0.003 , 0.002 ]} &gt;&gt;&gt; oracle( ... &quot;I have a problem with my iphone that needs to be resolved asap!!&quot; , ... candidate_labels=[ &quot;english&quot; , &quot;german&quot; ], ... ) { &#x27;sequence&#x27; : &#x27;I have a problem with my iphone that needs to be resolved asap!!&#x27; , &#x27;labels&#x27; : [ &#x27;english&#x27; , &#x27;german&#x27; ], &#x27;scores&#x27; : [ 0.814 , 0.186 ]} Learn more about the basics of using a pipeline in the pipeline tutorial This NLI pipeline can currently be loaded from pipeline() using the following task identifier: &quot;zero-shot-classification&quot; . The models that this pipeline can use are models that have been fine-tuned on an NLI task. See the up-to-date list of available models on huggingface.co/models . __call__ &lt; source &gt; ( sequences : typing.Union[str, list[str]] *args **kwargs ) → A dict or a list of dict Parameters sequences ( str or list[str] ) &#x2014; The sequence(s) to classify, will be truncated if the model input is too large. candidate_labels ( str or list[str] ) &#x2014; The set of possible class labels to classify each sequence into. Can be a single label, a string of comma-separated labels, or a list of labels. hypothesis_template ( str , optional , defaults to &quot;This example is {}.&quot; ) &#x2014; The template used to turn each label into an NLI-style hypothesis. This template must include a {} or similar syntax for the candidate label to be inserted into the template. For example, the default template is &quot;This example is {}.&quot; With the candidate label &quot;sports&quot; , this would be fed into the model like &quot;&lt;cls&gt; sequence to classify &lt;sep&gt; This example is sports . &lt;sep&gt;&quot; . The default template works well in many cases, but it may be worthwhile to experiment with different templates depending on the task setting. multi_label ( bool , optional , defaults to False ) &#x2014; Whether or not multiple candidate labels can be true. If False , the scores are normalized such that the sum of the label likelihoods for each sequence is 1. If True , the labels are considered independent and probabilities are normalized for each candidate by doing a softmax of the entailment score vs. the contradiction score. Returns A dict or a list of dict Each result comes as a dictionary with the following keys: sequence ( str ) — The sequence for which this is the output. labels ( list[str] ) — The labels sorted by order of likelihood. scores ( list[float] ) — The probabilities for each of the labels. Classify the sequence(s) given as inputs. See the ZeroShotClassificationPipeline documentation for more information. Multimodal Pipelines available for multimodal tasks include the following. DocumentQuestionAnsweringPipeline class transformers. DocumentQuestionAnsweringPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Document Question Answering pipeline using any AutoModelForDocumentQuestionAnswering . The inputs/outputs are similar to the (extractive) question answering pipeline; however, the pipeline takes an image (and optional OCR’d words/boxes) as input instead of text context. Unless the model you’re using explicitly sets these generation parameters in its configuration files ( generation_config.json ), the following default values will be used: max_new_tokens: 256 Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; document_qa = pipeline(model= &quot;impira/layoutlm-document-qa&quot; ) &gt;&gt;&gt; document_qa( ... image= &quot;https://huggingface.co/spaces/impira/docquery/resolve/2359223c1837a7587402bda0f2643382a6eefeab/invoice.png&quot; , ... question= &quot;What is the invoice number?&quot; , ... ) [{ &#x27;score&#x27; : 0.425 , &#x27;answer&#x27; : &#x27;us-001&#x27; , &#x27;start&#x27; : 16 , &#x27;end&#x27; : 16 }] Learn more about the basics of using a pipeline in the pipeline tutorial This document question answering pipeline can currently be loaded from pipeline() using the following task identifier: &quot;document-question-answering&quot; . The models that this pipeline can use are models that have been fine-tuned on a document question answering task. See the up-to-date list of available models on huggingface.co/models . __call__ &lt; source &gt; ( image : typing.Union[ForwardRef('Image.Image'), str, list[dict[str, typing.Any]]] question : typing.Optional[str] = None word_boxes : typing.Optional[tuple[str, list[float]]] = None **kwargs : typing.Any ) → A dict or a list of dict Parameters image ( str or PIL.Image ) &#x2014; The pipeline handles three types of images: A string containing a http link pointing to an image A string containing a local path to an image An image loaded in PIL directly The pipeline accepts either a single image or a batch of images. If given a single image, it can be broadcasted to multiple questions. question ( str ) &#x2014; A question to ask of the document. word_boxes ( list[str, tuple[float, float, float, float]] , optional ) &#x2014; A list of words and bounding boxes (normalized 0-&gt;1000). If you provide this optional input, then the pipeline will use these words and boxes instead of running OCR on the image to derive them for models that need them (e.g. LayoutLM). This allows you to reuse OCR&#x2019;d results across many invocations of the pipeline without having to re-run it each time. top_k ( int , optional , defaults to 1) &#x2014; The number of answers to return (will be chosen by order of likelihood). Note that we return less than top_k answers if there are not enough options available within the context. doc_stride ( int , optional , defaults to 128) &#x2014; If the words in the document are too long to fit with the question for the model, it will be split in several chunks with some overlap. This argument controls the size of that overlap. max_answer_len ( int , optional , defaults to 15) &#x2014; The maximum length of predicted answers (e.g., only answers with a shorter length are considered). max_seq_len ( int , optional , defaults to 384) &#x2014; The maximum length of the total sentence (context + question) in tokens of each chunk passed to the model. The context will be split in several chunks (using doc_stride as overlap) if needed. max_question_len ( int , optional , defaults to 64) &#x2014; The maximum length of the question after tokenization. It will be truncated if needed. handle_impossible_answer ( bool , optional , defaults to False ) &#x2014; Whether or not we accept impossible as an answer. lang ( str , optional ) &#x2014; Language to use while running OCR. Defaults to english. tesseract_config ( str , optional ) &#x2014; Additional flags to pass to tesseract while running OCR. timeout ( float , optional , defaults to None) &#x2014; The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and the call may block forever. Returns A dict or a list of dict Each result comes as a dictionary with the following keys: score ( float ) — The probability associated to the answer. start ( int ) — The start word index of the answer (in the OCR’d version of the input or provided word_boxes ). end ( int ) — The end word index of the answer (in the OCR’d version of the input or provided word_boxes ). answer ( str ) — The answer to the question. words ( list[int] ) — The index of each word/box pair that is in the answer Answer the question(s) given as inputs by using the document(s). A document is defined as an image and an optional list of (word, box) tuples which represent the text in the document. If the word_boxes are not provided, it will use the Tesseract OCR engine (if available) to extract the words and boxes automatically for LayoutLM-like models which require them as input. For Donut, no OCR is run. You can invoke the pipeline several ways: pipeline(image=image, question=question) pipeline(image=image, question=question, word_boxes=word_boxes) pipeline([{&quot;image&quot;: image, &quot;question&quot;: question}]) pipeline([{&quot;image&quot;: image, &quot;question&quot;: question, &quot;word_boxes&quot;: word_boxes}]) FeatureExtractionPipeline class transformers. FeatureExtractionPipeline &lt; source &gt; ( model : typing.Union[ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel')] tokenizer : typing.Optional[transformers.tokenization_utils.PreTrainedTokenizer] = None feature_extractor : typing.Optional[ForwardRef('SequenceFeatureExtractor')] = None image_processor : typing.Optional[transformers.image_processing_utils.BaseImageProcessor] = None processor : typing.Optional[transformers.processing_utils.ProcessorMixin] = None modelcard : typing.Optional[transformers.modelcard.ModelCard] = None framework : typing.Optional[str] = None task : str = '' device : typing.Union[int, ForwardRef('torch.device')] = None binary_output : bool = False **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) tokenize_kwargs ( dict , optional ) &#x2014; Additional dictionary of keyword arguments passed along to the tokenizer. return_tensors ( bool , optional ) &#x2014; If True , returns a tensor according to the specified framework, otherwise returns a list. Feature extraction pipeline uses no model head. This pipeline extracts the hidden states from the base transformer, which can be used as features in downstream tasks. Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; extractor = pipeline(model= &quot;google-bert/bert-base-uncased&quot; , task= &quot;feature-extraction&quot; ) &gt;&gt;&gt; result = extractor( &quot;This is a simple test.&quot; , return_tensors= True ) &gt;&gt;&gt; result.shape # This is a tensor of shape [1, sequence_length, hidden_dimension] representing the input string. torch.Size([ 1 , 8 , 768 ]) Learn more about the basics of using a pipeline in the pipeline tutorial This feature extraction pipeline can currently be loaded from pipeline() using the task identifier: &quot;feature-extraction&quot; . All models may be used for this pipeline. See a list of all models, including community-contributed models on huggingface.co/models . __call__ &lt; source &gt; ( *args : typing.Union[str, list[str]] **kwargs : typing.Any ) → A nested list of float Parameters args ( str or list[str] ) &#x2014; One or several texts (or one list of texts) to get the features of. Returns A nested list of float The features computed by the model. Extract the features of the input(s) text. ImageFeatureExtractionPipeline class transformers. ImageFeatureExtractionPipeline &lt; source &gt; ( model : typing.Union[ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel')] tokenizer : typing.Optional[transformers.tokenization_utils.PreTrainedTokenizer] = None feature_extractor : typing.Optional[ForwardRef('SequenceFeatureExtractor')] = None image_processor : typing.Optional[transformers.image_processing_utils.BaseImageProcessor] = None processor : typing.Optional[transformers.processing_utils.ProcessorMixin] = None modelcard : typing.Optional[transformers.modelcard.ModelCard] = None framework : typing.Optional[str] = None task : str = '' device : typing.Union[int, ForwardRef('torch.device')] = None binary_output : bool = False **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. image_processor_kwargs ( dict , optional ) &#x2014; Additional dictionary of keyword arguments passed along to the image processor e.g. {&#x201C;size&#x201D;: {&#x201C;height&#x201D;: 100, &#x201C;width&#x201D;: 100}&#x200C;} pool ( bool , optional , defaults to False ) &#x2014; Whether or not to return the pooled output. If False , the model will return the raw hidden states. Image feature extraction pipeline uses no model head. This pipeline extracts the hidden states from the base transformer, which can be used as features in downstream tasks. Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; extractor = pipeline(model= &quot;google/vit-base-patch16-224&quot; , task= &quot;image-feature-extraction&quot; ) &gt;&gt;&gt; result = extractor( &quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot; , return_tensors= True ) &gt;&gt;&gt; result.shape # This is a tensor of shape [1, sequence_lenth, hidden_dimension] representing the input image. torch.Size([ 1 , 197 , 768 ]) Learn more about the basics of using a pipeline in the pipeline tutorial This image feature extraction pipeline can currently be loaded from pipeline() using the task identifier: &quot;image-feature-extraction&quot; . All vision models may be used for this pipeline. See a list of all models, including community-contributed models on huggingface.co/models . __call__ &lt; source &gt; ( *args : typing.Union[str, ForwardRef('Image.Image'), list['Image.Image'], list[str]] **kwargs : typing.Any ) → A nested list of float Parameters images ( str , list[str] , PIL.Image or list[PIL.Image] ) &#x2014; The pipeline handles three types of images: A string containing a http link pointing to an image A string containing a local path to an image An image loaded in PIL directly The pipeline accepts either a single image or a batch of images, which must then be passed as a string. Images in a batch must all be in the same format: all as http links, all as local paths, or all as PIL images. timeout ( float , optional , defaults to None) &#x2014; The maximum time in seconds to wait for fetching images from the web. If None, no timeout is used and the call may block forever. Returns A nested list of float The features computed by the model. Extract the features of the input(s). ImageToTextPipeline class transformers. ImageToTextPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Image To Text pipeline using a AutoModelForVision2Seq . This pipeline predicts a caption for a given image. Unless the model you’re using explicitly sets these generation parameters in its configuration files ( generation_config.json ), the following default values will be used: max_new_tokens: 256 Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; captioner = pipeline(model= &quot;ydshieh/vit-gpt2-coco-en&quot; ) &gt;&gt;&gt; captioner( &quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot; ) [{ &#x27;generated_text&#x27; : &#x27;two birds are standing next to each other &#x27; }] Learn more about the basics of using a pipeline in the pipeline tutorial This image to text pipeline can currently be loaded from pipeline() using the following task identifier: “image-to-text”. See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( inputs : typing.Union[str, list[str], ForwardRef('Image.Image'), list['Image.Image']] **kwargs ) → A list or a list of list of dict Parameters inputs ( str , list[str] , PIL.Image or list[PIL.Image] ) &#x2014; The pipeline handles three types of images: A string containing a HTTP(s) link pointing to an image A string containing a local path to an image An image loaded in PIL directly The pipeline accepts either a single image or a batch of images. max_new_tokens ( int , optional ) &#x2014; The amount of maximum tokens to generate. By default it will use generate default. generate_kwargs ( Dict , optional ) &#x2014; Pass it to send all of these arguments directly to generate allowing full control of this function. timeout ( float , optional , defaults to None) &#x2014; The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and the call may block forever. Returns A list or a list of list of dict Each result comes as a dictionary with the following key: generated_text ( str ) — The generated text. Assign labels to the image(s) passed as inputs. ImageTextToTextPipeline class transformers. ImageTextToTextPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. processor ( ProcessorMixin ) &#x2014; The processor that will be used by the pipeline to encode data for the model. This object inherits from ProcessorMixin . Processor is a composite object that might contain tokenizer , feature_extractor , and image_processor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Image-text-to-text pipeline using an AutoModelForImageTextToText . This pipeline generates text given an image and text. When the underlying model is a conversational model, it can also accept one or more chats, in which case the pipeline will operate in chat mode and will continue the chat(s) by adding its response(s). Each chat takes the form of a list of dicts, where each dict contains “role” and “content” keys. Unless the model you’re using explicitly sets these generation parameters in its configuration files ( generation_config.json ), the following default values will be used: max_new_tokens: 256 Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; pipe = pipeline(task= &quot;image-text-to-text&quot; , model= &quot;Salesforce/blip-image-captioning-base&quot; ) &gt;&gt;&gt; pipe( &quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot; , text= &quot;A photo of&quot; ) [{ &#x27;generated_text&#x27; : &#x27;a photo of two birds&#x27; }] Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; pipe = pipeline( &quot;image-text-to-text&quot; , model= &quot;llava-hf/llava-interleave-qwen-0.5b-hf&quot; ) &gt;&gt;&gt; messages = [ &gt;&gt;&gt; { &gt;&gt;&gt; &quot;role&quot; : &quot;user&quot; , &gt;&gt;&gt; &quot;content&quot; : [ &gt;&gt;&gt; { &gt;&gt;&gt; &quot;type&quot; : &quot;image&quot; , &gt;&gt;&gt; &quot;url&quot; : &quot;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&quot; , &gt;&gt;&gt; }, &gt;&gt;&gt; { &quot;type&quot; : &quot;text&quot; , &quot;text&quot; : &quot;Describe this image.&quot; }, &gt;&gt;&gt; ], &gt;&gt;&gt; }, &gt;&gt;&gt; { &gt;&gt;&gt; &quot;role&quot; : &quot;assistant&quot; , &gt;&gt;&gt; &quot;content&quot; : [ &gt;&gt;&gt; { &quot;type&quot; : &quot;text&quot; , &quot;text&quot; : &quot;There is a dog and&quot; }, &gt;&gt;&gt; ], &gt;&gt;&gt; }, &gt;&gt;&gt; ] &gt;&gt;&gt; pipe(text=messages, max_new_tokens= 20 , return_full_text= False ) [{ &#x27;input_text&#x27; : [{ &#x27;role&#x27; : &#x27;user&#x27; , &#x27;content&#x27; : [{ &#x27;type&#x27; : &#x27;image&#x27; , &#x27;url&#x27; : &#x27;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&#x27; }, { &#x27;type&#x27; : &#x27;text&#x27; , &#x27;text&#x27; : &#x27;Describe this image.&#x27; }]}, { &#x27;role&#x27; : &#x27;assistant&#x27; , &#x27;content&#x27; : [{ &#x27;type&#x27; : &#x27;text&#x27; , &#x27;text&#x27; : &#x27;There is a dog and&#x27; }]}], &#x27;generated_text&#x27; : &#x27; a person in the image. The dog is sitting on the sand, and the person is sitting on&#x27; }] Learn more about the basics of using a pipeline in the pipeline tutorial This image-text to text pipeline can currently be loaded from pipeline() using the following task identifier: “image-text-to-text”. See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( images : typing.Union[str, list[str], list[list[str]], ForwardRef('Image.Image'), list['Image.Image'], list[list['Image.Image']], list[dict], NoneType] = None text : typing.Union[str, list[str], list[dict], NoneType] = None **kwargs ) → A list or a list of list of dict Parameters images ( str , list[str] , PIL.Image, list[PIL.Image] , list[dict[str, Union[str, PIL.Image]]]`) &#x2014; The pipeline handles three types of images: A string containing a HTTP(s) link pointing to an image A string containing a local path to an image An image loaded in PIL directly The pipeline accepts either a single image or a batch of images. Finally, this pipeline also supports the chat format (see text ) containing images and text in this argument. text (str, list[str], list[dict[str, Union[str, PIL.Image]]] ) &#x2014; The text to be used for generation. If a list of strings is passed, the length of the list should be the same as the number of images. Text can also follow the chat format: a list of dictionaries where each dictionary represents a message in a conversation. Each dictionary should have two keys: &#x2018;role&#x2019; and &#x2018;content&#x2019;. &#x2018;role&#x2019; should be one of &#x2018;user&#x2019;, &#x2018;system&#x2019; or &#x2018;assistant&#x2019;. &#x2018;content&#x2019; should be a list of dictionary containing the text of the message and the type of the message. The type of the message can be either &#x2018;text&#x2019; or &#x2018;image&#x2019;. If the type is &#x2018;image&#x2019;, no text is needed. return_tensors ( bool , optional , defaults to False ) &#x2014; Returns the tensors of predictions (as token indices) in the outputs. If set to True , the decoded text is not returned. return_text ( bool , optional ) &#x2014; Returns the decoded texts in the outputs. return_full_text ( bool , optional , defaults to True ) &#x2014; If set to False only added text is returned, otherwise the full text is returned. Cannot be specified at the same time as return_text . clean_up_tokenization_spaces ( bool , optional , defaults to True ) &#x2014; Whether or not to clean up the potential extra spaces in the text output. continue_final_message( bool , optional ) &#x2014; This indicates that you want the model to continue the last message in the input chat rather than starting a new one, allowing you to &#x201C;prefill&#x201D; its response. By default this is True when the final message in the input chat has the assistant role and False otherwise, but you can manually override that behaviour by setting this flag. Returns A list or a list of list of dict Each result comes as a dictionary with the following key (cannot return a combination of both generated_text and generated_token_ids ): generated_text ( str , present when return_text=True ) — The generated text. generated_token_ids ( torch.Tensor , present when return_tensors=True ) — The token ids of the generated text. input_text ( str ) — The input text. Generate a text given text and the image(s) passed as inputs. MaskGenerationPipeline class transformers. MaskGenerationPipeline &lt; source &gt; ( **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. points_per_batch ( optional , int, default to 64) &#x2014; Sets the number of points run simultaneously by the model. Higher numbers may be faster but use more GPU memory. output_bboxes_mask ( bool , optional , default to False ) &#x2014; Whether or not to output the bounding box predictions. output_rle_masks ( bool , optional , default to False ) &#x2014; Whether or not to output the masks in RLE format Automatic mask generation for images using SamForMaskGeneration . This pipeline predicts binary masks for an image, given an image. It is a ChunkPipeline because you can separate the points in a mini-batch in order to avoid OOM issues. Use the points_per_batch argument to control the number of points that will be processed at the same time. Default is 64 . The pipeline works in 3 steps: preprocess : A grid of 1024 points evenly separated is generated along with bounding boxes and point labels. For more details on how the points and bounding boxes are created, check the _generate_crop_boxes function. The image is also preprocessed using the image_processor . This function yields a minibatch of points_per_batch . forward : feeds the outputs of preprocess to the model. The image embedding is computed only once. Calls both self.model.get_image_embeddings and makes sure that the gradients are not computed, and the tensors and models are on the same device. postprocess : The most important part of the automatic mask generation happens here. Three steps are induced: image_processor.postprocess_masks (run on each minibatch loop): takes in the raw output masks, resizes them according to the image size, and transforms there to binary masks. image_processor.filter_masks (on each minibatch loop): uses both pred_iou_thresh and stability_scores . Also applies a variety of filters based on non maximum suppression to remove bad masks. image_processor.postprocess_masks_for_amg applies the NSM on the mask to only keep relevant ones. Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; generator = pipeline(model= &quot;facebook/sam-vit-base&quot; , task= &quot;mask-generation&quot; ) &gt;&gt;&gt; outputs = generator( ... &quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot; , ... ) &gt;&gt;&gt; outputs = generator( ... &quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/parrots.png&quot; , points_per_batch= 128 ... ) Learn more about the basics of using a pipeline in the pipeline tutorial This segmentation pipeline can currently be loaded from pipeline() using the following task identifier: &quot;mask-generation&quot; . See the list of available models on huggingface.co/models . __call__ &lt; source &gt; ( image : typing.Union[str, ForwardRef('Image.Image'), list[str], list['Image.Image']] *args : typing.Any **kwargs : typing.Any ) → Dict Parameters image ( str , List[str] , PIL.Image or List[PIL.Image] ) &#x2014; Image or list of images. mask_threshold ( float , optional , defaults to 0.0) &#x2014; Threshold to use when turning the predicted masks into binary values. pred_iou_thresh ( float , optional , defaults to 0.88) &#x2014; A filtering threshold in [0,1] applied on the model&#x2019;s predicted mask quality. stability_score_thresh ( float , optional , defaults to 0.95) &#x2014; A filtering threshold in [0,1] , using the stability of the mask under changes to the cutoff used to binarize the model&#x2019;s mask predictions. stability_score_offset ( int , optional , defaults to 1) &#x2014; The amount to shift the cutoff when calculated the stability score. crops_nms_thresh ( float , optional , defaults to 0.7) &#x2014; The box IoU cutoff used by non-maximal suppression to filter duplicate masks. crops_n_layers ( int , optional , defaults to 0) &#x2014; If crops_n_layers&gt;0 , mask prediction will be run again on crops of the image. Sets the number of layers to run, where each layer has 2**i_layer number of image crops. crop_overlap_ratio ( float , optional , defaults to 512 / 1500 ) &#x2014; Sets the degree to which crops overlap. In the first crop layer, crops will overlap by this fraction of the image length. Later layers with more crops scale down this overlap. crop_n_points_downscale_factor ( int , optional , defaults to 1 ) &#x2014; The number of points-per-side sampled in layer n is scaled down by crop_n_points_downscale_factor**n. timeout ( float , optional , defaults to None) &#x2014; The maximum time in seconds to wait for fetching images from the web. If None, no timeout is set and the call may block forever. Returns Dict A dictionary with the following keys: mask ( PIL.Image ) — A binary mask of the detected object as a PIL Image of shape (width, height) of the original image. Returns a mask filled with zeros if no object is found. score ( optional float ) — Optionally, when the model is capable of estimating a confidence of the “object” described by the label and the mask. Generates binary segmentation masks VisualQuestionAnsweringPipeline class transformers. VisualQuestionAnsweringPipeline &lt; source &gt; ( *args **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. Visual Question Answering pipeline using a AutoModelForVisualQuestionAnswering . This pipeline is currently only available in PyTorch. Unless the model you’re using explicitly sets these generation parameters in its configuration files ( generation_config.json ), the following default values will be used: max_new_tokens: 256 Example: Copied &gt;&gt;&gt; from transformers import pipeline &gt;&gt;&gt; oracle = pipeline(model= &quot;dandelin/vilt-b32-finetuned-vqa&quot; ) &gt;&gt;&gt; image_url = &quot;https://huggingface.co/datasets/Narsil/image_dummy/raw/main/lena.png&quot; &gt;&gt;&gt; oracle(question= &quot;What is she wearing ?&quot; , image=image_url) [{ &#x27;score&#x27; : 0.948 , &#x27;answer&#x27; : &#x27;hat&#x27; }, { &#x27;score&#x27; : 0.009 , &#x27;answer&#x27; : &#x27;fedora&#x27; }, { &#x27;score&#x27; : 0.003 , &#x27;answer&#x27; : &#x27;clothes&#x27; }, { &#x27;score&#x27; : 0.003 , &#x27;answer&#x27; : &#x27;sun hat&#x27; }, { &#x27;score&#x27; : 0.002 , &#x27;answer&#x27; : &#x27;nothing&#x27; }] &gt;&gt;&gt; oracle(question= &quot;What is she wearing ?&quot; , image=image_url, top_k= 1 ) [{ &#x27;score&#x27; : 0.948 , &#x27;answer&#x27; : &#x27;hat&#x27; }] &gt;&gt;&gt; oracle(question= &quot;Is this a person ?&quot; , image=image_url, top_k= 1 ) [{ &#x27;score&#x27; : 0.993 , &#x27;answer&#x27; : &#x27;yes&#x27; }] &gt;&gt;&gt; oracle(question= &quot;Is this a man ?&quot; , image=image_url, top_k= 1 ) [{ &#x27;score&#x27; : 0.996 , &#x27;answer&#x27; : &#x27;no&#x27; }] Learn more about the basics of using a pipeline in the pipeline tutorial This visual question answering pipeline can currently be loaded from pipeline() using the following task identifiers: &quot;visual-question-answering&quot;, &quot;vqa&quot; . The models that this pipeline can use are models that have been fine-tuned on a visual question answering task. See the up-to-date list of available models on huggingface.co/models . __call__ &lt; source &gt; ( image : typing.Union[ForwardRef('Image.Image'), str, list['Image.Image'], list[str], ForwardRef('KeyDataset')] question : typing.Union[str, list[str], NoneType] = None **kwargs ) → A dictionary or a list of dictionaries containing the result. The dictionaries contain the following keys Parameters image ( str , list[str] , PIL.Image , list[PIL.Image] or KeyDataset ) &#x2014; The pipeline handles three types of images: A string containing a http link pointing to an image A string containing a local path to an image An image loaded in PIL directly The pipeline accepts either a single image or a batch of images. If given a single image, it can be broadcasted to multiple questions. For dataset: the passed in dataset must be of type transformers.pipelines.pt_utils.KeyDataset Example: Returns A dictionary or a list of dictionaries containing the result. The dictionaries contain the following keys label ( str ) — The label identified by the model. score ( int ) — The score attributed by the model for that label. Answers open-ended questions about images. The pipeline accepts several types of inputs which are detailed below: pipeline(image=image, question=question) pipeline({&quot;image&quot;: image, &quot;question&quot;: question}) pipeline([{&quot;image&quot;: image, &quot;question&quot;: question}]) pipeline([{&quot;image&quot;: image, &quot;question&quot;: question}, {&quot;image&quot;: image, &quot;question&quot;: question}]) Parent class: Pipeline class transformers. Pipeline &lt; source &gt; ( model : typing.Union[ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel')] tokenizer : typing.Optional[transformers.tokenization_utils.PreTrainedTokenizer] = None feature_extractor : typing.Optional[ForwardRef('SequenceFeatureExtractor')] = None image_processor : typing.Optional[transformers.image_processing_utils.BaseImageProcessor] = None processor : typing.Optional[transformers.processing_utils.ProcessorMixin] = None modelcard : typing.Optional[transformers.modelcard.ModelCard] = None framework : typing.Optional[str] = None task : str = '' device : typing.Union[int, ForwardRef('torch.device')] = None binary_output : bool = False **kwargs ) Parameters model ( PreTrainedModel or TFPreTrainedModel ) &#x2014; The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from PreTrainedModel for PyTorch and TFPreTrainedModel for TensorFlow. tokenizer ( PreTrainedTokenizer ) &#x2014; The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from PreTrainedTokenizer . feature_extractor ( SequenceFeatureExtractor ) &#x2014; The feature extractor that will be used by the pipeline to encode data for the model. This object inherits from SequenceFeatureExtractor . image_processor ( BaseImageProcessor ) &#x2014; The image processor that will be used by the pipeline to encode data for the model. This object inherits from BaseImageProcessor . processor ( ProcessorMixin ) &#x2014; The processor that will be used by the pipeline to encode data for the model. This object inherits from ProcessorMixin . Processor is a composite object that might contain tokenizer , feature_extractor , and image_processor . modelcard ( str or ModelCard , optional ) &#x2014; Model card attributed to the model for this pipeline. framework ( str , optional ) &#x2014; The framework to use, either &quot;pt&quot; for PyTorch or &quot;tf&quot; for TensorFlow. The specified framework must be installed. If no framework is specified, will default to the one currently installed. If no framework is specified and both frameworks are installed, will default to the framework of the model , or to PyTorch if no model is provided. task ( str , defaults to &quot;&quot; ) &#x2014; A task-identifier for the pipeline. num_workers ( int , optional , defaults to 8) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the number of workers to be used. batch_size ( int , optional , defaults to 1) &#x2014; When the pipeline will use DataLoader (when passing a dataset, on GPU for a Pytorch model), the size of the batch to use, for inference this is not always beneficial, please read Batching with pipelines . args_parser ( ArgumentHandler , optional ) &#x2014; Reference to the object in charge of parsing supplied pipeline parameters. device ( int , optional , defaults to -1) &#x2014; Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on the associated CUDA device id. You can pass native torch.device or a str too dtype ( str or torch.dtype , optional ) &#x2014; Sent directly as model_kwargs (just a simpler shortcut) to use the available precision for this model ( torch.float16 , torch.bfloat16 , &#x2026; or &quot;auto&quot; ) binary_output ( bool , optional , defaults to False ) &#x2014; Flag indicating if the output the pipeline should happen in a serialized format (i.e., pickle) or as the raw output data e.g. text. The Pipeline class is the class from which all pipelines inherit. Refer to this class for methods shared across different pipelines. Base class implementing pipelined operations. Pipeline workflow is defined as a sequence of the following operations: Input -&gt; Tokenization -&gt; Model Inference -&gt; Post-Processing (task dependent) -&gt; Output Pipeline supports running on CPU or GPU through the device argument (see below). Some pipeline, like for instance FeatureExtractionPipeline ( &#39;feature-extraction&#39; ) output large tensor object as nested-lists. In order to avoid dumping such large structure as textual data we provide the binary_output constructor argument. If set to True , the output will be stored in the pickle format. check_model_type &lt; source &gt; ( supported_models : typing.Union[list[str], dict] ) Parameters supported_models ( list[str] or dict ) &#x2014; The list of models supported by the pipeline, or a dictionary with model class values. Check if the model class is in supported by the pipeline. device_placement &lt; source &gt; ( ) Context Manager allowing tensor allocation on the user-specified device in framework agnostic way. Examples: Copied # Explicitly ask for tensor allocation on CUDA device :0 pipe = pipeline(..., device= 0 ) with pipe.device_placement(): # Every framework specific tensor allocation will be done on the request device output = pipe(...) ensure_tensor_on_device &lt; source &gt; ( **inputs ) → dict[str, torch.Tensor] Parameters inputs (keyword arguments that should be torch.Tensor , the rest is ignored) &#x2014; The tensors to place on self.device . Recursive on lists only . &#x2014; Returns dict[str, torch.Tensor] The same as inputs but on the proper device. Ensure PyTorch tensors are on the specified device. postprocess &lt; source &gt; ( model_outputs : ModelOutput **postprocess_parameters : dict ) Postprocess will receive the raw outputs of the _forward method, generally tensors, and reformat them into something more friendly. Generally it will output a list or a dict or results (containing just strings and numbers). predict &lt; source &gt; ( X ) Scikit / Keras interface to transformers’ pipelines. This method will forward to call (). preprocess &lt; source &gt; ( input_ : typing.Any **preprocess_parameters : dict ) Preprocess will take the input_ of a specific pipeline and return a dictionary of everything necessary for _forward to run properly. It should contain at least one tensor, but might have arbitrary other items. push_to_hub &lt; source &gt; ( repo_id : str use_temp_dir : typing.Optional[bool] = None commit_message : typing.Optional[str] = None private : typing.Optional[bool] = None token : typing.Union[bool, str, NoneType] = None max_shard_size : typing.Union[str, int, NoneType] = '5GB' create_pr : bool = False safe_serialization : bool = True revision : typing.Optional[str] = None commit_description : typing.Optional[str] = None tags : typing.Optional[list[str]] = None **deprecated_kwargs ) Parameters repo_id ( str ) &#x2014; The name of the repository you want to push your pipe to. It should contain your organization name when pushing to a given organization. use_temp_dir ( bool , optional ) &#x2014; Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub. Will default to True if there is no directory named like repo_id , False otherwise. commit_message ( str , optional ) &#x2014; Message to commit while pushing. Will default to &quot;Upload pipe&quot; . private ( bool , optional ) &#x2014; Whether to make the repo private. If None (default), the repo will be public unless the organization&#x2019;s default is private. This value is ignored if the repo already exists. token ( bool or str , optional ) &#x2014; The token to use as HTTP bearer authorization for remote files. If True , will use the token generated when running hf auth login (stored in ~/.huggingface ). Will default to True if repo_url is not specified. max_shard_size ( int or str , optional , defaults to &quot;5GB&quot; ) &#x2014; Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size lower than this size. If expressed as a string, needs to be digits followed by a unit (like &quot;5MB&quot; ). We default it to &quot;5GB&quot; so that users can easily load models on free-tier Google Colab instances without any CPU OOM issues. create_pr ( bool , optional , defaults to False ) &#x2014; Whether or not to create a PR with the uploaded files or directly commit. safe_serialization ( bool , optional , defaults to True ) &#x2014; Whether or not to convert the model weights in safetensors format for safer serialization. revision ( str , optional ) &#x2014; Branch to push the uploaded files to. commit_description ( str , optional ) &#x2014; The description of the commit that will be created tags ( list[str] , optional ) &#x2014; List of tags to push on the Hub. Upload the pipeline file to the 🤗 Model Hub. Examples: Copied from transformers import pipeline pipe = pipeline( &quot;google-bert/bert-base-cased&quot; ) # Push the pipe to your namespace with the name &quot;my-finetuned-bert&quot;. pipe.push_to_hub( &quot;my-finetuned-bert&quot; ) # Push the pipe to an organization with the name &quot;my-finetuned-bert&quot;. pipe.push_to_hub( &quot;huggingface/my-finetuned-bert&quot; ) save_pretrained &lt; source &gt; ( save_directory : typing.Union[str, os.PathLike] safe_serialization : bool = True **kwargs ) Parameters save_directory ( str or os.PathLike ) &#x2014; A path to the directory where to saved. It will be created if it doesn&#x2019;t exist. safe_serialization ( str ) &#x2014; Whether to save the model using safetensors or the traditional way for PyTorch or Tensorflow. kwargs ( dict[str, Any] , optional ) &#x2014; Additional key word arguments passed along to the push_to_hub() method. Save the pipeline’s model and tokenizer. transform &lt; source &gt; ( X ) Scikit / Keras interface to transformers’ pipelines. This method will forward to call (). &lt; &gt; Update on GitHub ← PEFT Processors → Pipelines The pipeline abstraction Pipeline batching Pipeline chunk batching Pipeline F P16 inference Pipeline custom code Implementing a pipeline Audio Audio Classification Pipeline Automatic Speech Recognition Pipeline Text To Audio Pipeline Zero Shot Audio Classification Pipeline Computer vision Depth Estimation Pipeline Image Classification Pipeline Image Segmentation Pipeline Image To Image Pipeline Keypoint Matching Pipeline Object Detection Pipeline Video Classification Pipeline Zero Shot Image Classification Pipeline Zero Shot Object Detection Pipeline Natural Language Processing Fill Mask Pipeline Question Answering Pipeline Summarization Pipeline Table Question Answering Pipeline Text Classification Pipeline Text Generation Pipeline Text2 Text Generation Pipeline Token Classification Pipeline Translation Pipeline Zero Shot Classification Pipeline Multimodal Document Question Answering Pipeline Feature Extraction Pipeline Image Feature Extraction Pipeline Image To Text Pipeline Image Text To Text Pipeline Mask Generation Pipeline Visual Question Answering Pipeline Parent class: Pipeline ",
      "fetch_method": "direct-html"
    }
  ]
}