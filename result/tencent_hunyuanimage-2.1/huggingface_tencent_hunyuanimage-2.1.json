{
    "model_id": "tencent/hunyuanimage-2.1",
    "files": [
        ".gitattributes",
        "LICENSE",
        "NOTICE",
        "README.md",
        "README_CN.md",
        "assets/comparison.png",
        "assets/demo.png",
        "assets/framework_overall.png",
        "assets/framework_prompt_rewrite.png",
        "assets/gsb.png",
        "assets/logo.png",
        "assets/reprompt.png",
        "assets/show_cases.png",
        "checkpoints-download.md",
        "config.json",
        "dit/hunyuanimage-refiner.safetensors",
        "dit/hunyuanimage-refiner_fp8.safetensors",
        "dit/hunyuanimage-refiner_fp8_scale.safetensors",
        "dit/hunyuanimage2.1-distilled.safetensors",
        "dit/hunyuanimage2.1-distilled_fp8.safetensors",
        "dit/hunyuanimage2.1-distilled_fp8_scale.safetensors",
        "dit/hunyuanimage2.1.safetensors",
        "dit/hunyuanimage2.1_fp8.safetensors",
        "dit/hunyuanimage2.1_fp8_scale.safetensors",
        "reprompt/chat_template.jinja",
        "reprompt/config.json",
        "reprompt/generation_config.json",
        "reprompt/hy.tiktoken",
        "reprompt/model-00001-of-00004.safetensors",
        "reprompt/model-00002-of-00004.safetensors",
        "reprompt/model-00003-of-00004.safetensors",
        "reprompt/model-00004-of-00004.safetensors",
        "reprompt/model.safetensors.index.json",
        "reprompt/special_tokens_map.json",
        "reprompt/tokenization_hy.py",
        "reprompt/tokenizer_config.json",
        "requirements.txt",
        "vae/vae_2_1/config.json",
        "vae/vae_2_1/pytorch_model.ckpt",
        "vae/vae_refiner/config.json",
        "vae/vae_refiner/pytorch_model.pt"
    ],
    "readme": "---\nlibrary_name: HunyuanImage-2.1\nlicense: other\nlicense_name: tencent-hunyuan-community\nlicense_link: https://github.com/Tencent-Hunyuan/HunyuanImage-2.1/blob/master/LICENSE\nlanguage:\n  - en\n  - zh\ntags:\n  - text-to-image\npipeline_tag: text-to-image\nextra_gated_eu_disallowed: true\n---\n\n[‰∏≠ÊñáÈòÖËØª](./README_CN.md)\n\n<p align=\"center\">\n  <img src=\"./assets/logo.png\"  height=100>\n</p>\n\n<div align=\"center\">\n\n# HunyuanImage-2.1: An Efficient Diffusion Model for High-Resolution (2K) Text-to-Image Generation‚Äã\n\n</div>\n\n<div align=\"center\">\n  <a href=https://github.com/Tencent-Hunyuan/HunyuanImage-2.1 target=\"_blank\"><img src=https://img.shields.io/badge/Code-black.svg?logo=github height=22px></a>\n  <a href=\"https://huggingface.co/spaces/tencent/HunyuanImage-2.1\" target=\"_blank\">\n    <img src=\"https://img.shields.io/badge/Demo%20Page-blue\" height=\"22px\"></a>\n  <a href=https://huggingface.co/tencent/HunyuanImage-2.1 target=\"_blank\"><img src=https://img.shields.io/badge/%F0%9F%A4%97%20Models-d96902.svg height=22px></a>\n  <a href=\"#\" target=\"_blank\"><img src=\"https://img.shields.io/badge/Report-Coming%20Soon-blue\" height=\"22px\"></a><br/>\n  <a href=\"https://www.arxiv.org/abs/2509.04545\" target=\"https://arxiv.org/abs/2509.04545\"><img src=\"https://img.shields.io/badge/PromptEnhancer-Report-yellow\" height=\"22px\"></a>\n  <a href= https://hunyuan-promptenhancer.github.io/ target=\"_blank\"><img src=https://img.shields.io/badge/PromptEnhancer-bb8a2e.svg?logo=github height=22px></a><br/>\n  <a href=https://x.com/TencentHunyuan target=\"_blank\"><img src=https://img.shields.io/badge/Hunyuan-black.svg?logo=x height=22px></a>\n</div>\n\n<p align=\"center\">\n    üëã Join our <a href=\"https://github.com/Tencent-Hunyuan/HunyuanImage-2.1/blob/main/assets/WECHAT.md\" target=\"_blank\">WeChat</a> \n</p>\n\n-----\n\nThis repo contains PyTorch model definitions, pretrained weights and inference/sampling code for our HunyuanImage-2.1. You can find more visualizations on our [project page](https://hunyuan.tencent.com/image/en?tabIndex=0).\n\n\n## üî•üî•üî• Latest Updates\n\n- September 12, 2025: üöÄ Released FP8 quantized models! Making it possible to generate 2K images with only 24GB GPU memory!\n- September 8, 2025: üöÄ Released inference code and model weights for HunyuanImage-2.1.\n\n\n## üé• Demo\n\n<div align=\"center\">\n  <img src=\"./assets/show_cases.png\" width=100% alt=\"HunyuanImage 2.1 Demo\">\n</div>\n\n## Contents\n- [HunyuanImage-2.1: An Efficient Diffusion Model for High-Resolution (2K) Text-to-Image Generation‚Äã](#hunyuanimage-21-an-efficient-diffusion-model-for-high-resolution-2k-text-to-image-generation)\n  - [üî•üî•üî• Latest Updates](#-latest-updates)\n  - [üé• Demo](#-demo)\n  - [Contents](#contents)\n  - [Abstract](#abstract)\n  - [HunyuanImage-2.1 Overall Pipeline](#hunyuanimage-21-overall-pipeline)\n    - [Training Data and Caption](#training-data-and-caption)\n    - [Text-to-Image Model Architecture](#text-to-image-model-architecture)\n    - [Reinforcement Learning from Human Feedback](#reinforcement-learning-from-human-feedback)\n    - [Rewriting Model](#rewriting-model)\n    - [Model distillation](#model-distillation)\n  - [üéâ HunyuanImage-2.1 Key Features](#-hunyuanimage-21-key-features)\n  - [Prompt Enhanced Demo](#prompt-enhanced-demo)\n  - [üìà Comparisons](#-comparisons)\n    - [SSAE Evaluation](#ssae-evaluation)\n    - [GSB Evaluation](#gsb-evaluation)\n  - [üìú System Requirements](#-system-requirements)\n  - [üõ†Ô∏è Dependencies and Installation](#Ô∏è-dependencies-and-installation)\n  - [üß± Download Pretrained Models](#-download-pretrained-models)\n  - [üîë Usage](#-usage)\n  - [üîó BibTeX](#-bibtex)\n  - [Acknowledgements](#acknowledgements)\n  - [Github Star History](#github-star-history)\n\n---\n<!-- - [üß© Community Contributions](#-community-contributions) -->\n## Abstract\nWe present HunyuanImage-2.1, a highly efficient text-to-image model that is capable of generating 2K (2048 √ó 2048) resolution images. Leveraging an extensive dataset and structured captions involving multiple expert models, we significantly enhance text-image alignment capabilities. The model employs a highly expressive VAE with a (32 √ó 32) spatial compression ratio, substantially reducing computational costs.\n\nOur architecture consists of two stages:\n1. ‚ÄãBase text-to-image Model:‚Äã‚Äã The first stage is a text-to-image model that utilizes two text encoders: a multimodal large language model (MLLM) to improve image-text alignment, and a multi-language, character-aware encoder to enhance text rendering across various languages. This stage features a single- and dual-stream diffusion transformer with 17 billion parameters. To optimize aesthetics and structural coherence, we apply reinforcement learning from human feedback (RLHF).\n2. Refiner Model: The second stage introduces a refiner model that further enhances image quality and clarity, while minimizing artifacts. \n\nAdditionally, we developed the PromptEnhancer module to further boost model performance, and employed meanflow distillation for efficient inference. HunyuanImage-2.1 demonstrates robust semantic alignment and cross-scenario generalization, leading to improved consistency between text and image, enhanced control of scene details, character poses, and expressions, and the ability to generate multiple objects with distinct descriptions.\n\n\n \n\n## HunyuanImage-2.1 Overall Pipeline\n\n### Training Data and Caption\n\nStructured captions provide hierarchical semantic information at short, medium, long, and extra-long levels, significantly enhancing the model‚Äôs responsiveness to complex semantics. Innovatively, an OCR agent and IP RAG are introduced to address the shortcomings of general VLM captioners in dense text and world knowledge descriptions, while a bidirectional verification strategy ensures caption accuracy.\n\n\n### Text-to-Image Model Architecture\n\n<p align=\"center\">\n  <img src=\"./assets/framework_overall.png\" width=100% alt=\"HunyuanImage 2.1 Architecture\">\n</p>\n\n\n\nCore Components:\n* High-Compression VAE with REPA Training Acceleration:\n  * A VAE with a 32√ó compression rate drastically reduces the number of input tokens for the DiT model. By aligning its feature space with DINOv2 features, we facilitate the training of high-compression VAEs. As a result, our model generates 2K images with the same token length (and thus similar inference time) as other models require for 1K images, achieving superior inference efficiency.\n  * Multi-bucket, multi-resolution REPA loss aligns DiT features with a high-dimensional semantic feature space, accelerating model convergence.\n* Dual Text Encoder:\n  * A vision-language multimodal encoder is employed to better understand scene descriptions, character actions, and detailed requirements.\n  * A multilingual ByT5 text encoder is introduced to specialize in text generation and multilingual expression.\n* Network: A single- and dual-stream diffusion transformer with 17 billion parameters.\n\n### Reinforcement Learning from Human Feedback\nTwo-Stage Post-Training with Reinforcement Learning: Supervised Fine-Tuning (SFT) and Reinforcement Learning (RL) are applied sequentially in two post-training stages. We introduce a Reward Distribution Alignment algorithm, which innovatively incorporates high-quality images as selected samples to ensure stable and improved reinforcement learning outcomes.\n\n### Rewriting Model\n<p align=\"center\">\n  <img src=\"./assets/framework_prompt_rewrite.png\" width=90% alt=\"HunyuanImage 2.1 Architecture\">\n</p>\n\n* The first systematic industrial-level rewriting model. SFT training structurally rewrites user text instructions to enrich visual expression, while GRPO training employs a fine-grained semantic AlignEvaluator reward model to substantially improve the semantics of images generated from rewritten text. The AlignEvaluator covers 6 major categories and 24 fine-grained assessment points. PromptEnhancer supports both Chinese and English rewriting and demonstrates general applicability in enhancing semantics for both open-source and proprietary text-to-image models.\n\n### Model distillation\nWe propose a novel distillation method based on meanflow that addresses the key challenges of instability and inefficiency inherent in standard meanflow training. This approach enables high-quality image generation with only a few sampling steps. To our knowledge, this is the first successful application of meanflow to an industrial-scale model.\n\n\n\n\n\n## üéâ HunyuanImage-2.1 Key Features\n\n- **High-Quality Generation**: Efficiently produces ultra-high-definition (2K) images with cinematic composition.\n- **Multilingual Support**: Provides native support for both Chinese and English prompts.\n- **Advanced Architecture**: Built on a multi-modal, single- and dual-stream combined DiT (Diffusion Transformer) backbone.\n- **Glyph-Aware Processing**: Utilizes ByT5's text rendering capabilities for improved text generation accuracy.\n- **Flexible Aspect Ratios**: Supports a variety of image aspect ratios (1:1, 16:9, 9:16, 4:3, 3:4, 3:2, 2:3).\n- **Prompt Enhancement**: Automatically rewrites prompts to improve descriptive accuracy and visual quality.\n\n\n## Prompt Enhanced Demo\nTo improve the quality and detail of generated images, we use a prompt rewriting model. This model automatically enhances user-provided text prompts by adding detailed and descriptive information.\n<p align=\"center\">\n  <img src=\"./assets/reprompt.png\" width=100% alt=\"Human Evaluation with Other Models\">\n</p>\n\n\n## üìà Comparisons\n\n### SSAE Evaluation\nSSAE (Structured Semantic Alignment Evaluation) is an intelligent evaluation metric for image-text alignment based on advanced multimodal large language models (MLLMs). We extracted 3500 key points across 12 categories, then used multimodal large language models to automatically evaluate and score by comparing the generated images with these key points based on the visual content of the images. Mean Image Accuracy represents the image-wise average score across all key points, while Global Accuracy directly calculates the average score across all key points.\n<p align=\"center\">\n<table>\n<thead>\n<tr>\n    <th rowspan=\"2\">Model</th>  <th rowspan=\"2\">Open Source</th> <th rowspan=\"2\">Mean Image Accuracy</th> <th rowspan=\"2\">Global Accuracy</th> <th colspan=\"4\" style=\"text-align: center;\">Primary Subject</th> <th colspan=\"3\" style=\"text-align: center;\">Secondary Subject</th> <th colspan=\"2\" style=\"text-align: center;\">Scene</th> <th colspan=\"3\" style=\"text-align: center;\">Other</th>\n</tr>\n<tr>\n    <th>Noun</th> <th>Key Attributes</th> <th>Other Attributes</th> <th>Action</th> <th>Noun</th> <th>Attributes</th> <th>Action</th> <th>Noun</th> <th>Attributes</th> <th>Shot</th> <th>Style</th> <th>Composition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n    <td>FLUX-dev</td> <td>‚úÖ</td> <td>0.7122</td> <td>0.6995</td> <td>0.7965</td> <td>0.7824</td> <td>0.5993</td> <td>0.5777</td> <td>0.7950</td> <td>0.6826</td> <td>0.6923</td> <td>0.8453</td> <td>0.8094</td> <td>0.6452</td> <td>0.7096</td> <td>0.6190</td>\n</tr>\n<tr>\n    <td>Seedream-3.0</td> <td>‚ùå</td> <td>0.8827</td> <td>0.8792</td> <td>0.9490</td> <td>0.9311</td> <td>0.8242</td> <td>0.8177</td> <td>0.9747</td> <td>0.9103</td> <td>0.8400</td> <td>0.9489</td> <td>0.8848</td> <td>0.7582</td> <td>0.8726</td> <td>0.7619</td>\n</tr>\n<tr>\n    <td>Qwen-Image</td> <td>‚úÖ</td> <td>0.8854</td> <td>0.8828</td> <td>0.9502</td> <td>0.9231</td> <td>0.8351</td> <td>0.8161</td> <td>0.9938</td> <td>0.9043</td> <td>0.8846</td> <td>0.9613</td> <td>0.8978</td> <td>0.7634</td> <td>0.8548</td> <td>0.8095</td>\n</tr>\n<tr>\n    <td>GPT-Image</td>  <td>‚ùå</td> <td> 0.8952</td> <td>0.8929</td> <td>0.9448</td> <td>0.9289</td> <td>0.8655</td> <td>0.8445</td> <td>0.9494</td> <td>0.9283</td> <td>0.8800</td> <td>0.9432</td> <td>0.9017</td> <td>0.7253</td> <td>0.8582</td> <td>0.7143</td>\n</tr>\n<tr>\n    <td><strong>HunyuanImage 2.1</strong></td> <td>‚úÖ</td> <td><strong>0.8888</strong></td> <td><strong>0.8832</strong></td> <td>0.9339</td> <td>0.9341</td> <td>0.8363</td> <td>0.8342</td> <td>0.9627</td> <td>0.8870</td> <td>0.9615</td> <td>0.9448</td> <td>0.9254</td> <td>0.7527</td> <td>0.8689</td> <td>0.7619</td>\n</tr>\n</tbody>\n</table>\n</p>\n\nFrom the SSAE evaluation results, our model has currently achieved the optimal performance among open-source models in terms of semantic alignment, and is very close to the performance of closed-source commercial models (GPT-Image).\n\n### GSB Evaluation\n\n<p align=\"center\">\n  <img src=\"./assets/gsb.png\" width=70% alt=\"Human Evaluation with Other Models\">\n</p>\n\nWe adopted the GSB evaluation method commonly used to assess the relative performance between two models from an overall image perception perspective. In total, we utilized 1000 text prompts, generating an equal number of image samples for all compared models in a single run. For a fair comparison, we conducted inference only once for each prompt, avoiding any cherry-picking of results. When comparing with the baseline methods, we maintained the default settings for all selected models. The evaluation was performed by more than 100 professional evaluators.\nFrom the results, HunyuanImage 2.1 achieved a relative win rate of -1.36% against Seedream3.0 (closed-source) and 2.89% outperforming Qwen-Image (open-source). The GSB evaluation results demonstrate that HunyuanImage 2.1, as an open-source model, has reached a level of image generation quality comparable to closed-source commercial models (Seedream3.0), while showing certain advantages in comparison with similar open-source models (Qwen-Image). This fully validates the technical advancement and practical value of HunyuanImage 2.1 in text-to-image generation tasks.\n\n## üìú System Requirements\n\n\n**Hardware and OS Requirements:**\n- NVIDIA GPU with CUDA support.\n\n  **Minimum requrement for now:** 24 GB GPU memory for 2048x2048 image generation.\n  \n  > **Note:** The memory requirements above are measured with model CPU offloading and FP8 quantization enabled. If your GPU has sufficient memory, you may disable offloading for improved inference speed.\n- Supported operating system: Linux.\n\n\n## üõ†Ô∏è Dependencies and Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/Tencent-Hunyuan/HunyuanImage-2.1.git\ncd HunyuanImage-2.1\n```\n\n2. Install dependencies:\n```bash\npip install -r requirements.txt\npip install flash-attn==2.7.3 --no-build-isolation\n```\n\n## üß± Download Pretrained Models\n\nThe details of download pretrained models are shown [here](checkpoints-download.md).\n\n## üîë Usage\nHunyuanImage-2.1 only supports 2K image generation (e.g. 2048x2048 for 1:1 images, 2560x1536 for 16:9 images, etc.).\nGenerating images with 1K resolution will result in artifacts.\nAdditionally, we recommend using the full generation pipeline for better quality (i.e. enabling prompt enhancement and refinment).\n\n```python\nimport os\nos.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'expandable_segments:True'\nimport torch\nfrom hyimage.diffusion.pipelines.hunyuanimage_pipeline import HunyuanImagePipeline\n\n# Supported model_name: hunyuanimage-v2.1, hunyuanimage-v2.1-distilled\nmodel_name = \"hunyuanimage-v2.1\"\npipe = HunyuanImagePipeline.from_pretrained(model_name=model_name, use_fp8=True)\npipe = pipe.to(\"cuda\")\n\nprompt = \"A cute, cartoon-style anthropomorphic penguin plush toy with fluffy fur, standing in a painting studio, wearing a red knitted scarf and a red beret with the word ‚ÄúTencent‚Äù on it, holding a paintbrush with a focused expression as it paints an oil painting of the Mona Lisa, rendered in a photorealistic photographic style.\"\nimage = pipe(\n    prompt=prompt,\n    # Examples of supported resolutions and aspect ratios for HunyuanImage-2.1:\n    # 16:9  -> width=2560, height=1536\n    # 4:3   -> width=2304, height=1792\n    # 1:1   -> width=2048, height=2048\n    # 3:4   -> width=1792, height=2304\n    # 9:16  -> width=1536, height=2560\n    # Please use one of the above width/height pairs for best results.\n    width=2048,\n    height=2048,\n    use_reprompt=False,  # Enable prompt enhancement (which may result in higher GPU memory usage)\n    use_refiner=True,   # Enable refiner model\n    # For the distilled model, use 8 steps for faster inference.\n    # For the non-distilled model, use 50 steps for better quality.\n    num_inference_steps=8 if \"distilled\" in model_name else 50, \n    guidance_scale=3.25 if \"distilled\" in model_name else 3.5,\n    shift=4 if \"distilled\" in model_name else 5,\n    seed=649151,\n)\n\nimage.save(f\"generated_image.png\")\n```\n\n\n## üîó BibTeX\n\nIf you find this project useful for your research and applications, please cite as:\n\n```BibTeX\n@misc{HunyuanImage-2.1,\n  title={HunyuanImage 2.1: An Efficient Diffusion Model for High-Resolution (2K) Text-to-Image Generation},\n  author={Tencent Hunyuan Team},\n  year={2025},\n  howpublished={\\url{https://github.com/Tencent-Hunyuan/HunyuanImage-2.1}},\n}\n```\n\n## Acknowledgements\n\nWe would like to thank the following open-source projects and communities for their contributions to open research and exploration: [Qwen](https://huggingface.co/Qwen), [FLUX](https://github.com/black-forest-labs/flux), [diffusers](https://github.com/huggingface/diffusers) and [HuggingFace](https://huggingface.co).\n\n## Github Star History\n<a href=\"https://star-history.com/#Tencent-Hunyuan/HunyuanImage-2.1&Date\">\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=Tencent-Hunyuan/HunyuanImage-2.1&type=Date1&theme=dark\" />\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=Tencent-Hunyuan/HunyuanImage-2.1&type=Date1\" />\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=Tencent-Hunyuan/HunyuanImage-2.1&type=Date1\" />\n </picture>\n</a>\n\n",
    "config": "{\n    \"model_name\": \"HunyuanImage-2.1\"\n}\n",
    "generation_config": "",
    "license_file": "TENCENT HUNYUAN COMMUNITY LICENSE AGREEMENT\r\nTencent HunyuanImage 2.1 Release Date: September 8, 2025\r\nTHIS LICENSE AGREEMENT DOES NOT APPLY IN THE EUROPEAN UNION, UNITED KINGDOM AND SOUTH KOREA AND IS EXPRESSLY LIMITED TO THE TERRITORY, AS DEFINED BELOW.\r\nBy clicking to agree or by using, reproducing, modifying, distributing, performing or displaying any portion or element of the Tencent Hunyuan Works, including via any Hosted Service, You will be deemed to have recognized and accepted the content of this Agreement, which is effective immediately.\r\n1.\tDEFINITIONS.\r\na.\t‚ÄúAcceptable Use Policy‚Äù shall mean the policy made available by Tencent as set forth in the Exhibit A.\r\nb.\t‚ÄúAgreement‚Äù shall mean the terms and conditions for use, reproduction, distribution, modification, performance and displaying of Tencent Hunyuan Works or any portion or element thereof set forth herein.\r\nc.\t‚ÄúDocumentation‚Äù shall mean the specifications, manuals and documentation for Tencent Hunyuan made publicly available by Tencent.\r\nd.\t‚ÄúHosted Service‚Äù shall mean a hosted service offered via an application programming interface (API), web access, or any other electronic or remote means.\r\ne.\t‚ÄúLicensee,‚Äù ‚ÄúYou‚Äù or ‚ÄúYour‚Äù shall mean a natural person or legal entity exercising the rights granted by this Agreement and/or using the Tencent Hunyuan Works for any purpose and in any field of use.\r\nf.\t‚ÄúMaterials‚Äù shall mean, collectively, Tencent‚Äôs proprietary Tencent Hunyuan and Documentation (and any portion thereof) as made available by Tencent under this Agreement.\r\ng.\t‚ÄúModel Derivatives‚Äù shall mean all: (i) modifications to Tencent Hunyuan or any Model Derivative of Tencent Hunyuan; (ii) works based on Tencent Hunyuan or any Model Derivative of Tencent Hunyuan; or (iii) any other machine learning model which is created by transfer of patterns of the weights, parameters, operations, or Output of Tencent Hunyuan or any Model Derivative of Tencent Hunyuan, to that model in order to cause that model to perform similarly to Tencent Hunyuan or a Model Derivative of Tencent Hunyuan, including distillation methods, methods that use intermediate data representations, or methods based on the generation of synthetic data Outputs by Tencent Hunyuan or a Model Derivative of Tencent Hunyuan for training that model. For clarity, Outputs by themselves are not deemed Model Derivatives.\r\nh.\t‚ÄúOutput‚Äù shall mean the information and/or content output of Tencent Hunyuan or a Model Derivative that results from operating or otherwise using Tencent Hunyuan or a Model Derivative, including via a Hosted Service.\r\ni.\t‚ÄúTencent,‚Äù ‚ÄúWe‚Äù or ‚ÄúUs‚Äù shall mean the applicable entity or entities in the Tencent corporate family that own(s) intellectual property or other rights embodied in or utilized by the Materials.\r\nj.\t‚ÄúTencent Hunyuan‚Äù shall mean the large language models, text/image/video/audio/3D generation models, and multimodal large language models and their software and algorithms, including trained model weights, parameters (including optimizer states), machine-learning model code, inference-enabling code, training-enabling code, fine-tuning enabling code and other elements of the foregoing made publicly available by Us, including, without limitation to, Tencent HunyuanImage 2.1 released at [https://github.com/Tencent-Hunyuan/HunyuanImage-2.1/blob/master/LICENSEÔºõhttps://huggingface.co/tencent/HunyuanImage-2.1/blob/main/LICENSE].\r\nk.\t‚ÄúTencent Hunyuan Works‚Äù shall mean: (i) the Materials; (ii) Model Derivatives; and (iii) all derivative works thereof.\r\nl.\t‚ÄúTerritory‚Äù shall mean the worldwide territory, excluding the territory of the European Union, United Kingdom and South Korea. \r\nm.\t‚ÄúThird Party‚Äù or ‚ÄúThird Parties‚Äù shall mean individuals or legal entities that are not under common control with Us or You.\r\nn.\t‚Äúincluding‚Äù shall mean including but not limited to.\r\n2.\tGRANT OF RIGHTS.\r\nWe grant You, for the Territory only, a non-exclusive, non-transferable and royalty-free limited license under Tencent‚Äôs intellectual property or other rights owned by Us embodied in or utilized by the Materials to use, reproduce, distribute, create derivative works of (including Model Derivatives), and make modifications to the Materials, only in accordance with the terms of this Agreement and the Acceptable Use Policy, and You must not violate (or encourage or permit anyone else to violate) any term of this Agreement or the Acceptable Use Policy.\r\n3.\tDISTRIBUTION.\r\nYou may, subject to Your compliance with this Agreement, distribute or make available to Third Parties the Tencent Hunyuan Works, exclusively in the Territory, provided that You meet all of the following conditions:\r\na.\tYou must provide all such Third Party recipients of the Tencent Hunyuan Works or products or services using them a copy of this Agreement;\r\nb.\tYou must cause any modified files to carry prominent notices stating that You changed the files;\r\nc.\tYou are encouraged to: (i) publish at least one technology introduction blogpost or one public statement expressing Your experience of using the Tencent Hunyuan Works; and (ii) mark the products or services developed by using the Tencent Hunyuan Works to indicate that the product/service is ‚ÄúPowered by Tencent Hunyuan‚Äù; and\r\nd.\tAll distributions to Third Parties (other than through a Hosted Service) must be accompanied by a ‚ÄúNotice‚Äù text file that contains the following notice: ‚ÄúTencent Hunyuan is licensed under the Tencent Hunyuan Community License Agreement, Copyright ¬© 2025 Tencent. All Rights Reserved. The trademark rights of ‚ÄúTencent Hunyuan‚Äù are owned by Tencent or its affiliate.‚Äù\r\nYou may add Your own copyright statement to Your modifications and, except as set forth in this Section and in Section 5, may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Model Derivatives as a whole, provided Your use, reproduction, modification, distribution, performance and display of the work otherwise complies with the terms and conditions of this Agreement (including as regards the Territory). If You receive Tencent Hunyuan Works from a Licensee as part of an integrated end user product, then this Section 3 of this Agreement will not apply to You.\r\n4.\tADDITIONAL COMMERCIAL TERMS.\r\nIf, on the Tencent Hunyuan version release date, the monthly active users of all products or services made available by or for Licensee is greater than 100 million monthly active users in the preceding calendar month, You must request a license from Tencent, which Tencent may grant to You in its sole discretion, and You are not authorized to exercise any of the rights under this Agreement unless or until Tencent otherwise expressly grants You such rights.\r\n5.\tRULES OF USE.\r\na.\tYour use of the Tencent Hunyuan Works must comply with applicable laws and regulations (including trade compliance laws and regulations) and adhere to the Acceptable Use Policy for the Tencent Hunyuan Works, which is hereby incorporated by reference into this Agreement. You must include the use restrictions referenced in these Sections 5(a) and 5(b) as an enforceable provision in any agreement (e.g., license agreement, terms of use, etc.) governing the use and/or distribution of Tencent Hunyuan Works and You must provide notice to subsequent users to whom You distribute that Tencent Hunyuan Works are subject to the use restrictions in these Sections 5(a) and 5(b).\r\nb.\tYou must not use the Tencent Hunyuan Works or any Output or results of the Tencent Hunyuan Works to improve any other AI model (other than Tencent Hunyuan or Model Derivatives thereof).\r\nc.\tYou must not use, reproduce, modify, distribute, or display the Tencent Hunyuan Works, Output or results of the Tencent Hunyuan Works outside the Territory. Any such use outside the Territory is unlicensed and unauthorized under this Agreement.\r\n6.\tINTELLECTUAL PROPERTY.\r\na.\tSubject to Tencent‚Äôs ownership of Tencent Hunyuan Works made by or for Tencent and intellectual property rights therein, conditioned upon Your compliance with the terms and conditions of this Agreement, as between You and Tencent, You will be the owner of any derivative works and modifications of the Materials and any Model Derivatives that are made by or for You.\r\nb.\tNo trademark licenses are granted under this Agreement, and in connection with the Tencent Hunyuan Works, Licensee may not use any name or mark owned by or associated with Tencent or any of its affiliates, except as required for reasonable and customary use in describing and distributing the Tencent Hunyuan Works. Tencent hereby grants You a license to use ‚ÄúTencent Hunyuan‚Äù (the ‚ÄúMark‚Äù) in the Territory solely as required to comply with the provisions of Section 3(c), provided that You comply with any applicable laws related to trademark protection. All goodwill arising out of Your use of the Mark will inure to the benefit of Tencent.\r\nc.\tIf You commence a lawsuit or other proceedings (including a cross-claim or counterclaim in a lawsuit) against Us or any person or entity alleging that the Materials or any Output, or any portion of any of the foregoing, infringe any intellectual property or other right owned or licensable by You, then all licenses granted to You under this Agreement shall terminate as of the date such lawsuit or other proceeding is filed. You will defend, indemnify and hold harmless Us from and against any claim by any Third Party arising out of or related to Your or the Third Party‚Äôs use or distribution of the Tencent Hunyuan Works.\r\nd.\tTencent claims no rights in Outputs You generate. You and Your users are solely responsible for Outputs and their subsequent uses.\r\n7.\tDISCLAIMERS OF WARRANTY AND LIMITATIONS OF LIABILITY.\r\na.\tWe are not obligated to support, update, provide training for, or develop any further version of the Tencent Hunyuan Works or to grant any license thereto.\r\nb.\tUNLESS AND ONLY TO THE EXTENT REQUIRED BY APPLICABLE LAW, THE TENCENT HUNYUAN WORKS AND ANY OUTPUT AND RESULTS THEREFROM ARE PROVIDED ‚ÄúAS IS‚Äù WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES OF ANY KIND INCLUDING ANY WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, COURSE OF DEALING, USAGE OF TRADE, OR FITNESS FOR A PARTICULAR PURPOSE. YOU ARE SOLELY RESPONSIBLE FOR DETERMINING THE APPROPRIATENESS OF USING, REPRODUCING, MODIFYING, PERFORMING, DISPLAYING OR DISTRIBUTING ANY OF THE TENCENT HUNYUAN WORKS OR OUTPUTS AND ASSUME ANY AND ALL RISKS ASSOCIATED WITH YOUR OR A THIRD PARTY‚ÄôS USE OR DISTRIBUTION OF ANY OF THE TENCENT HUNYUAN WORKS OR OUTPUTS AND YOUR EXERCISE OF RIGHTS AND PERMISSIONS UNDER THIS AGREEMENT.\r\nc.\tTO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL TENCENT OR ITS AFFILIATES BE LIABLE UNDER ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, TORT, NEGLIGENCE, PRODUCTS LIABILITY, OR OTHERWISE, FOR ANY DAMAGES, INCLUDING ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL, EXEMPLARY, CONSEQUENTIAL OR PUNITIVE DAMAGES, OR LOST PROFITS OF ANY KIND ARISING FROM THIS AGREEMENT OR RELATED TO ANY OF THE TENCENT HUNYUAN WORKS OR OUTPUTS, EVEN IF TENCENT OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF ANY OF THE FOREGOING.\r\n8.\tSURVIVAL AND TERMINATION.\r\na.\tThe term of this Agreement shall commence upon Your acceptance of this Agreement or access to the Materials and will continue in full force and effect until terminated in accordance with the terms and conditions herein.\r\nb.\tWe may terminate this Agreement if You breach any of the terms or conditions of this Agreement. Upon termination of this Agreement, You must promptly delete and cease use of the Tencent Hunyuan Works. Sections 6(a), 6(c), 7 and 9 shall survive the termination of this Agreement.\r\n9.\tGOVERNING LAW AND JURISDICTION.\r\na.\tThis Agreement and any dispute arising out of or relating to it will be governed by the laws of the Hong Kong Special Administrative Region of the People‚Äôs Republic of China, without regard to conflict of law principles, and the UN Convention on Contracts for the International Sale of Goods does not apply to this Agreement.\r\nb.\tExclusive jurisdiction and venue for any dispute arising out of or relating to this Agreement will be a court of competent jurisdiction in the Hong Kong Special Administrative Region of the People‚Äôs Republic of China, and Tencent and Licensee consent to the exclusive jurisdiction of such court with respect to any such dispute.\r\n‚ÄÉ\r\nEXHIBIT A\r\nACCEPTABLE USE POLICY\r\n\r\nTencent reserves the right to update this Acceptable Use Policy from time to time.\r\nLast modified: November 5, 2024\r\n\r\nTencent endeavors to promote safe and fair use of its tools and features, including Tencent Hunyuan. You agree not to use Tencent Hunyuan or Model Derivatives:\r\n1.\tOutside the Territory;\r\n2.\tIn any way that violates any applicable national, federal, state, local, international or any other law or regulation;\r\n3.\tTo harm Yourself or others;\r\n4.\tTo repurpose or distribute output from Tencent Hunyuan or any Model Derivatives to harm Yourself or others; \r\n5.\tTo override or circumvent the safety guardrails and safeguards We have put in place;\r\n6.\tFor the purpose of exploiting, harming or attempting to exploit or harm minors in any way;\r\n7.\tTo generate or disseminate verifiably false information and/or content with the purpose of harming others or influencing elections;\r\n8.\tTo generate or facilitate false online engagement, including fake reviews and other means of fake online engagement;\r\n9.\tTo intentionally defame, disparage or otherwise harass others;\r\n10.\tTo generate and/or disseminate malware (including ransomware) or any other content to be used for the purpose of harming electronic systems;\r\n11.\tTo generate or disseminate personal identifiable information with the purpose of harming others;\r\n12.\tTo generate or disseminate information (including images, code, posts, articles), and place the information in any public context (including ‚Äìthrough the use of bot generated tweets), without expressly and conspicuously identifying that the information and/or content is machine generated;\r\n13.\tTo impersonate another individual without consent, authorization, or legal right;\r\n14.\tTo make high-stakes automated decisions in domains that affect an individual‚Äôs safety, rights or wellbeing (e.g., law enforcement, migration, medicine/health, management of critical infrastructure, safety components of products, essential services, credit, employment, housing, education, social scoring, or insurance);\r\n15.\tIn a manner that violates or disrespects the social ethics and moral standards of other countries or regions;\r\n16.\tTo perform, facilitate, threaten, incite, plan, promote or encourage violent extremism or terrorism;\r\n17.\tFor any use intended to discriminate against or harm individuals or groups based on protected characteristics or categories, online or offline social behavior or known or predicted personal or personality characteristics;\r\n18.\tTo intentionally exploit any of the vulnerabilities of a specific group of persons based on their age, social, physical or mental characteristics, in order to materially distort the behavior of a person pertaining to that group in a manner that causes or is likely to cause that person or another person physical or psychological harm;\r\n19.\tFor military purposes;\r\n20.\tTo engage in the unauthorized or unlicensed practice of any profession including, but not limited to, financial, legal, medical/health, or other professional practices.",
    "py_files": {
        "reprompt/tokenization_hy.py": "import base64\nimport logging\nimport os\nimport unicodedata\nfrom typing import Collection, Dict, List, Set, Tuple, Union\n\nimport tiktoken\nfrom transformers import PreTrainedTokenizer, AddedToken\n\nlogger = logging.getLogger(__name__)\n\n\nVOCAB_FILES_NAMES = {\"vocab_file\": \"hy.tiktoken\"}\n\nPAT_STR = r\"\"\"(?i:'s|'t|'re|'ve|'m|'ll|'d)|[^\\r\\n\\p{L}\\p{N}]?\\p{L}+|\\p{N}| ?[^\\s\\p{L}\\p{N}]+[\\r\\n]*|\\s*[\\r\\n]+|\\s+(?!\\S)|\\s+\"\"\"\n# PAT_STR = r\"\"\"(?i:'s|'t|'re|'ve|'m|'ll|'d)|[^\\r\\n\\p{L}\\p{N}]?\\p{L}+|\\p{N}{1,3}| ?[^\\s\\p{L}\\p{N}]+[\\r\\n]*|\\s*[\\r\\n]+|\\s+(?!\\S)|\\s+\"\"\"\nENDOFTEXT = \"<|endoftext|>\"\nSTARTOFTEXT = \"<|startoftext|>\"\nBOSTOKEN = \"<|bos|>\"\nEOSTOKEN = \"<|eos|>\"\nPADTOKEN = \"<|pad|>\"\n\n# as the default behavior is changed to allow special tokens in\n# regular texts, the surface forms of special tokens need to be\n# as different as possible to minimize the impact\nEXTRAS = tuple((f\"<|extra_{i}|>\" for i in range(205)))\n# changed to use actual index to avoid misconfiguration with vocabulary expansion\n\n\nSPECIAL_START_ID = 127957\n\ndef _load_tiktoken_bpe(tiktoken_bpe_file: str) -> Dict[bytes, int]:\n    # with open(tiktoken_bpe_file, \"rb\", encoding=\"utf-8\") as f:\n    #     contents = f.read()\n    dic = {}\n    rank = 0\n    for line in open(tiktoken_bpe_file, \"rb\"):\n        if line:\n            token, _ = line.split()\n            if base64.b64decode(token) in dic:\n                continue\n            dic[base64.b64decode(token)] = int(rank)\n            rank += 1\n    global SPECIAL_START_ID\n    SPECIAL_START_ID=rank\n    return dic\n\n# NOTE: Please use the code line to check `SPECIAL_START_ID` right, this will affect the SPECIAL_START_ID\n# _load_tiktoken_bpe('/apdcephfs/share_1502809/shaneshu/tokenizer_exp/other_tokenizer_vocab/hy/' + VOCAB_FILES_NAMES['vocab_file'])\n# print(SPECIAL_START_ID)\n\nSPECIAL_TOKENS = tuple(\n    enumerate(\n        (\n            (\n                ENDOFTEXT,\n                STARTOFTEXT,\n                BOSTOKEN,\n                EOSTOKEN,\n                PADTOKEN,\n            )\n            + EXTRAS\n        ),\n        start=SPECIAL_START_ID,\n    )\n)\n# NOTE: Unused Token ID starts from 127962\nSPECIAL_TOKENS_SET = set(t for i, t in SPECIAL_TOKENS)\n\nclass HYTokenizer(PreTrainedTokenizer):\n    \"\"\"hunyuan tokenizer.\"\"\"\n\n    vocab_files_names = VOCAB_FILES_NAMES\n\n    def __init__(\n        self,\n        vocab_file,\n        errors=\"replace\",\n        extra_vocab_file=None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        # how to handle errors in decoding UTF-8 byte sequences\n        # use ignore if you are in streaming inference\n        self.errors = errors  \n\n        self.mergeable_ranks = _load_tiktoken_bpe(vocab_file)  # type: Dict[bytes, int]\n        self.special_tokens = {\n            token: index\n            for index, token in SPECIAL_TOKENS\n        }\n\n        # try load extra vocab from file\n        if extra_vocab_file is not None:\n            used_ids = set(self.mergeable_ranks.values()) | set(self.special_tokens.values())\n            extra_mergeable_ranks = _load_tiktoken_bpe(extra_vocab_file)\n            for token, index in extra_mergeable_ranks.items():\n                if token in self.mergeable_ranks:\n                    logger.info(f\"extra token {token} exists, skipping\")\n                    continue\n                if index in used_ids:\n                    logger.info(f'the index {index} for extra token {token} exists, skipping')\n                    continue\n                self.mergeable_ranks[token] = index\n            # the index may be sparse after this, but don't worry tiktoken.Encoding will handle this\n\n        enc = tiktoken.Encoding(\n            \"HunYuan\",\n            pat_str=PAT_STR,\n            mergeable_ranks=self.mergeable_ranks,\n            special_tokens=self.special_tokens,\n        )\n        assert (\n            len(self.mergeable_ranks) + len(self.special_tokens) == enc.n_vocab\n        ), f\"{len(self.mergeable_ranks)} + {len(self.special_tokens)} != {enc.n_vocab} in encoding\"\n\n        self.decoder = {\n            v: k for k, v in self.mergeable_ranks.items()\n        }  # type: dict[int, bytes|str]\n        self.decoder.update({v: k for k, v in self.special_tokens.items()})\n\n        self.tokenizer = enc  # type: tiktoken.Encoding\n\n        self.eod_id = self.tokenizer.eot_token\n        self.bod_id = self.special_tokens[STARTOFTEXT]\n        self.bos_id = self.special_tokens[BOSTOKEN]\n        self.eos_id = self.special_tokens[EOSTOKEN]\n        self.pad_id = self.special_tokens[PADTOKEN]\n\n    def __getstate__(self):\n        # for pickle lovers\n        state = self.__dict__.copy()\n        del state[\"tokenizer\"]\n        return state\n\n    def __setstate__(self, state):\n        # tokenizer is not python native; don't pass it; rebuild it\n        self.__dict__.update(state)\n        enc = tiktoken.Encoding(\n            \"HunYuan\",\n            pat_str=PAT_STR,\n            mergeable_ranks=self.mergeable_ranks,\n            special_tokens=self.special_tokens,\n        )\n        self.tokenizer = enc\n\n    def __len__(self) -> int:\n        return self.tokenizer.n_vocab\n\n    def get_vocab(self) -> Dict[bytes, int]:\n        return self.mergeable_ranks\n\n    def convert_tokens_to_ids(\n        self, tokens: Union[bytes, str, List[Union[bytes, str]]]\n    ) -> List[int]:\n        ids = []\n        if isinstance(tokens, (str, bytes)):\n            if tokens in self.special_tokens:\n                return self.special_tokens[tokens]\n            else:\n                return self.mergeable_ranks.get(tokens)\n        for token in tokens:\n            if token in self.special_tokens:\n                ids.append(self.special_tokens[token])\n            else:\n                ids.append(self.mergeable_ranks.get(token))\n        return ids\n\n    def _add_tokens(\n        self,\n        new_tokens: Union[List[str], List[AddedToken]],\n        special_tokens: bool = False,\n    ) -> int:\n        if not special_tokens and new_tokens:\n            raise ValueError(\"Adding regular tokens is not supported\")\n        for token in new_tokens:\n            surface_form = token.content if isinstance(token, AddedToken) else token\n            if surface_form not in SPECIAL_TOKENS_SET:\n                raise ValueError(\"Adding unknown special tokens is not supported\")\n        return 0\n\n    def save_vocabulary(self, save_directory: str, **kwargs) -> Tuple[str]:\n        \"\"\"\n        Save only the vocabulary of the tokenizer (vocabulary).\n        Returns:\n            `Tuple(str)`: Paths to the files saved.\n        \"\"\"\n        file_path = os.path.join(save_directory, \"hy.tiktoken\")\n        with open(file_path, \"w\", encoding=\"utf-8\") as w:\n            for k, v in self.mergeable_ranks.items():\n                line = base64.b64encode(k).decode(\"utf-8\") + \" \" + str(v) + \"\\n\"\n                w.write(line)\n        return (file_path,)\n\n    def tokenize(\n        self,\n        text: str,\n        allowed_special: Union[Set, str] = \"all\",\n        disallowed_special: Union[Collection, str] = (),\n        **kwargs,\n    ) -> List[Union[bytes, str]]:\n        \"\"\"\n        Converts a string in a sequence of tokens.\n        Args:\n            text (`str`):\n                The sequence to be encoded.\n            allowed_special (`Literal[\"all\"]` or `set`):\n                The surface forms of the tokens to be encoded as special tokens in regular texts.\n                Default to \"all\".\n            disallowed_special (`Literal[\"all\"]` or `Collection`):\n                The surface forms of the tokens that should not be in regular texts and trigger errors.\n                Default to an empty tuple.\n            kwargs (additional keyword arguments, *optional*):\n                Will be passed to the underlying model specific encode method.\n        Returns:\n            `List[bytes|str]`: The list of tokens.\n        \"\"\"\n        tokens = []\n        text = unicodedata.normalize(\"NFC\", text)\n\n        # this implementation takes a detour: text -> token id -> token surface forms\n        for t in self.tokenizer.encode(\n            text, allowed_special=allowed_special, disallowed_special=disallowed_special\n        ):\n            tokens.append(self.decoder[t])\n        return tokens\n\n    def convert_tokens_to_string(self, tokens: List[Union[bytes, str]]) -> str:\n        \"\"\"\n        Converts a sequence of tokens in a single string.\n        \"\"\"\n        text = \"\"\n        temp = b\"\"\n        for t in tokens:\n            if isinstance(t, str):\n                if temp:\n                    text += temp.decode(\"utf-8\", errors=self.errors)\n                    temp = b\"\"\n                text += t\n            elif isinstance(t, bytes):\n                temp += t\n            else:\n                raise TypeError(\"token should only be of type types or str\")\n        if temp:\n            text += temp.decode(\"utf-8\", errors=self.errors)\n        return text\n\n    @property\n    def vocab_size(self):\n        return self.tokenizer.n_vocab\n\n    def _convert_id_to_token(self, index: int) -> Union[bytes, str]:\n        \"\"\"Converts an id to a token, special tokens included\"\"\"\n        if index in self.decoder:\n            return self.decoder[index]\n        raise ValueError(\"unknown ids\")\n\n    def _convert_token_to_id(self, token: Union[bytes, str]) -> int:\n        \"\"\"Converts a token to an id using the vocab, special tokens included\"\"\"\n        if token in self.special_tokens:\n            return self.special_tokens[token]\n        if token in self.mergeable_ranks:\n            return self.mergeable_ranks[token]\n        raise ValueError(\"unknown token\")\n\n    def _tokenize(self, text: str, **kwargs):\n        \"\"\"\n        Converts a string in a sequence of tokens (string), using the tokenizer. Split in words for word-based\n        vocabulary or sub-words for sub-word-based vocabularies (BPE/SentencePieces/WordPieces).\n        Do NOT take care of added tokens.\n        \"\"\"\n        raise NotImplementedError\n\n    def _decode(\n        self,\n        token_ids: Union[int, List[int]],\n        skip_special_tokens: bool = False,\n        errors: str = None,\n        **kwargs,\n    ) -> str:\n        if isinstance(token_ids, int):\n            token_ids = [token_ids]\n        if skip_special_tokens:\n            token_ids = [i for i in token_ids if i < self.eod_id]\n        return self.tokenizer.decode(token_ids, errors=errors or self.errors)\n\n# tests\nif __name__ == \"__main__\":\n    tokenizer = HYTokenizer.from_pretrained('./other_tokenizer_vocab/hy')\n    text = '‰Ω†Â•ΩÔºå‰∏ñÁïå'\n    tokens = tokenizer.tokenize(text)\n    print(tokens)\n    ids = tokenizer.convert_tokens_to_ids(tokens)\n    print(ids)\n    text2 = tokenizer.convert_tokens_to_string(tokens)\n    print(text2)\n    ids2 = tokenizer.convert_tokens_to_ids(tokens)\n"
    }
}