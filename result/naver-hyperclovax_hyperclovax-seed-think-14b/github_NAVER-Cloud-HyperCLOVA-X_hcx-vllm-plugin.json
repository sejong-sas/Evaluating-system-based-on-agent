{
    "repo": "NAVER-Cloud-HyperCLOVA-X/hcx-vllm-plugin",
    "branch": "main",
    "files": [
        "Dockerfile",
        "LICENSE",
        "NOTICE",
        "README.md",
        "model/__init__.py",
        "model/configuration_hyperclovax.py",
        "model/vllm_hyperclovax.py",
        "parser/__init__.py",
        "parser/hcx_parser_mixin.py",
        "parser/hcx_reasoner.py",
        "parser/hcx_tool_parser.py",
        "requirements.txt",
        "setup.py"
    ],
    "license_files": {
        "LICENSE": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright (c) 2025-present NAVER Cloud Corp.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
    },
    "readme": "# HyperCLOVAX vLLM Plugin\n\nImplementation of architectural change on the LLaMA model:\n- [μP](https://arxiv.org/pdf/2203.03466) \n- [Peri-LN](https://arxiv.org/pdf/2502.02732)\n\n## Configuration\n- [configuration_hyperclovax.py](model/configuration_hyperclovax.py)\n  - μP args\n    - **embedding_multiplier** (`float`, optional, default: `None`) - Multiplier applied to the embedding weights. If `None`, it is equivalent to `1.0`.\n    - **logits_scaling** (`float`, optional, default: `None`) - Scaling factor for logits. If `None`, it is equivalent to `1.0`.\n    - **attention_multiplier** (`float`, optional, default: `None`) - Multiplier applied to the attention weights. If `None`, it is equivalent to `self.head_dim ** -0.5`.\n    - **residual_multiplier** (`float`, optional, default: `None`) - Scaling factor for residual connections. If `None`, it is equivalent to `1.0`.\n  - Peri-LN args\n    - **use_post_norm** (`bool`, optional, defaults to `False`) - Determines whether to apply Peri-Layer Normalization. Set to `True` to enable this feature.\n\n## vLLM\n- [vllm_hyperclovax.py](model/vllm_hyperclovax.py)\n- Reasoning parser: [hcx_reasoner.py](parser/hcx_reasoner.py)\n- Tool parser: [hcx_tool_parser.py](parser/hcx_tool_parser.py)\n\n### How to use vLLM ([Docs](https://docs.vllm.ai/en/latest/design/plugin_system.html))\nAfter install vllm, `pip install .` to register `HyperCLOVAXForCausalLM` on vllm package.\n\n### Deploying with vLLM Docker Example ([Docs](https://docs.vllm.ai/en/latest/serving/deploying_with_docker.html))\n```bash\ndocker build --tag vllm/vllm-openai-hyperclovax .\ndocker run --runtime nvidia --gpus all \\\n    -v ~/.cache/huggingface:/root/.cache/huggingface \\\n    -p 8000:8000 \\\n    vllm/vllm-openai-hyperclovax <args...>\n```\n\n## License\n```\nHyperCLOVAX vLLM Plugin\nCopyright (c) 2025-present NAVER Cloud Corp.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
    "py_files": {
        "model/__init__.py": "from vllm import ModelRegistry\n\ndef register():\n    from .vllm_hyperclovax import HyperCLOVAXForCausalLM\n\n    if \"HyperCLOVAXForCausalLM\" not in ModelRegistry.get_supported_archs():\n        ModelRegistry.register_model(\"HyperCLOVAXForCausalLM\", HyperCLOVAXForCausalLM)\n",
        "model/configuration_hyperclovax.py": "# coding=utf-8\n# Partially copied and modified from\n# https://github.com/huggingface/transformers/blob/v4.45.2/src/transformers/models/llama/configuration_llama.py\n# Copyright 2022 EleutherAI and the HuggingFace Inc. team. All rights reserved.\n#\n# This code is based on EleutherAI's GPT-NeoX library and the GPT-NeoX\n# and OPT implementations in this library. It has been modified from its\n# original forms to accommodate minor architectural differences compared\n# to GPT-NeoX and OPT used by the Meta AI team that trained the model.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"HyperCLOVAX model configuration\"\"\"\n\nfrom transformers.configuration_utils import PretrainedConfig\n\nclass HyperCLOVAXConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`HyperCLOVAXModel`]. It is used to instantiate an HyperCLOVAX\n    model according to the specified arguments, defining the model architecture. Instantiating a configuration with the\n    defaults will yield a similar configuration to that of the HyperCLOVAX.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 32000):\n            Vocabulary size of the HyperCLOVAX model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`HyperCLOVAXModel`]\n        hidden_size (`int`, *optional*, defaults to 4096):\n            Dimension of the hidden representations.\n        intermediate_size (`int`, *optional*, defaults to 11008):\n            Dimension of the MLP representations.\n        num_hidden_layers (`int`, *optional*, defaults to 32):\n            Number of hidden layers in the Transformer decoder.\n        num_attention_heads (`int`, *optional*, defaults to 32):\n            Number of attention heads for each attention layer in the Transformer decoder.\n        num_key_value_heads (`int`, *optional*):\n            This is the number of key_value heads that should be used to implement Grouped Query Attention. If\n            `num_key_value_heads=num_attention_heads`, the model will use Multi Head Attention (MHA), if\n            `num_key_value_heads=1` the model will use Multi Query Attention (MQA) otherwise GQA is used. When\n            converting a multi-head checkpoint to a GQA checkpoint, each group key and value head should be constructed\n            by meanpooling all the original heads within that group. For more details checkout [this\n            paper](https://arxiv.org/pdf/2305.13245.pdf). If it is not specified, will default to\n            `num_attention_heads`.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"silu\"`):\n            The non-linear activation function (function or string) in the decoder.\n        max_position_embeddings (`int`, *optional*, defaults to 2048):\n            The maximum sequence length that this model might ever be used with.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        rms_norm_eps (`float`, *optional*, defaults to 1e-06):\n            The epsilon used by the rms normalization layers.\n        use_cache (`bool`, *optional*, defaults to `True`):\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        pad_token_id (`int`, *optional*):\n            Padding token id.\n        bos_token_id (`int`, *optional*, defaults to 1):\n            Beginning of stream token id.\n        eos_token_id (`int`, *optional*, defaults to 2):\n            End of stream token id.\n        pretraining_tp (`int`, *optional*, defaults to 1):\n            Experimental feature. Tensor parallelism rank used during pretraining. Please refer to [this\n            document](https://huggingface.co/docs/transformers/main/perf_train_gpu_many#tensor-parallelism) to\n            understand more about it. This value is necessary to ensure exact reproducibility of the pretraining\n            results. Please refer to [this issue](https://github.com/pytorch/pytorch/issues/76232).\n        tie_word_embeddings (`bool`, *optional*, defaults to `False`):\n            Whether to tie weight embeddings\n        rope_theta (`float`, *optional*, defaults to 10000.0):\n            The base period of the RoPE embeddings.\n        rope_scaling (`Dict`, *optional*):\n            Dictionary containing the scaling configuration for the RoPE embeddings. NOTE: if you apply new rope type\n            and you expect the model to work on longer `max_position_embeddings`, we recommend you to update this value\n            accordingly.\n            Expected contents:\n                `rope_type` (`str`):\n                    The sub-variant of RoPE to use. Can be one of ['default', 'linear', 'dynamic', 'yarn', 'longrope',\n                    'llama3'], with 'default' being the original RoPE implementation.\n                `factor` (`float`, *optional*):\n                    Used with all rope types except 'default'. The scaling factor to apply to the RoPE embeddings. In\n                    most scaling types, a `factor` of x will enable the model to handle sequences of length x *\n                    original maximum pre-trained length.\n                `original_max_position_embeddings` (`int`, *optional*):\n                    Used with 'dynamic', 'longrope' and 'llama3'. The original max position embeddings used during\n                    pretraining.\n                `attention_factor` (`float`, *optional*):\n                    Used with 'yarn' and 'longrope'. The scaling factor to be applied on the attention\n                    computation. If unspecified, it defaults to value recommended by the implementation, using the\n                    `factor` field to infer the suggested value.\n                `beta_fast` (`float`, *optional*):\n                    Only used with 'yarn'. Parameter to set the boundary for extrapolation (only) in the linear\n                    ramp function. If unspecified, it defaults to 32.\n                `beta_slow` (`float`, *optional*):\n                    Only used with 'yarn'. Parameter to set the boundary for interpolation (only) in the linear\n                    ramp function. If unspecified, it defaults to 1.\n                `short_factor` (`List[float]`, *optional*):\n                    Only used with 'longrope'. The scaling factor to be applied to short contexts (<\n                    `original_max_position_embeddings`). Must be a list of numbers with the same length as the hidden\n                    size divided by the number of attention heads divided by 2\n                `long_factor` (`List[float]`, *optional*):\n                    Only used with 'longrope'. The scaling factor to be applied to long contexts (<\n                    `original_max_position_embeddings`). Must be a list of numbers with the same length as the hidden\n                    size divided by the number of attention heads divided by 2\n                `low_freq_factor` (`float`, *optional*):\n                    Only used with 'llama3'. Scaling factor applied to low frequency components of the RoPE\n                `high_freq_factor` (`float`, *optional*):\n                    Only used with 'llama3'. Scaling factor applied to high frequency components of the RoPE\n        attention_bias (`bool`, *optional*, defaults to `False`):\n            Whether to use a bias in the query, key, value and output projection layers during self-attention.\n        attention_dropout (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        mlp_bias (`bool`, *optional*, defaults to `False`):\n            Whether to use a bias in up_proj, down_proj and gate_proj layers in the MLP layers.\n        head_dim (`int`, *optional*):\n            The attention head dimension. If None, it will default to hidden_size // num_heads\n        embedding_multiplier (`float, *optional*, defaults to `None`):\n            Multiplier applied to the embedding weights. If `None`, it is equivalent to `1.0`.\n        logits_scaling (`float, *optional*, defaults to `None`):\n            Scaling factor for logits. If `None`, it is equivalent to `1.0`.\n        attention_multiplier (`float, *optional*, defaults to `None`):\n            Multiplier applied to the attention weights. If `None`, it is equivalent to `self.head_dim ** -0.5`.\n        residual_multiplier (`float, *optional*, defaults to `None`):\n            Scaling factor for residual connections. If `None`, it is equivalent to `1.0`.\n        use_post_norm (`bool`, *optional*, defaults to `False`):\n            Determines whether to apply Peri-Layer Normalization. Set to True to enable this feature.\n\n    ```python\n    >>> from transformers import HyperCLOVAXModel, HyperCLOVAXConfig\n\n    >>> # Initializing a HyperCLOVAX HyperCLOVAX style configuration\n    >>> configuration = HyperCLOVAXConfig()\n\n    >>> # Initializing a model from the HyperCLOVAX style configuration\n    >>> model = HyperCLOVAXModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"hyperclovax\"\n    keys_to_ignore_at_inference = [\"past_key_values\"]\n\n    def __init__(\n        self,\n        vocab_size=32000,\n        hidden_size=4096,\n        intermediate_size=11008,\n        num_hidden_layers=32,\n        num_attention_heads=32,\n        num_key_value_heads=None,\n        hidden_act=\"silu\",\n        max_position_embeddings=2048,\n        initializer_range=0.02,\n        rms_norm_eps=1e-6,\n        use_cache=True,\n        pad_token_id=None,\n        bos_token_id=1,\n        eos_token_id=2,\n        pretraining_tp=1,\n        tie_word_embeddings=False,\n        rope_theta=10000.0,\n        rope_scaling=None,\n        attention_bias=False,\n        attention_dropout=0.0,\n        mlp_bias=False,\n        head_dim=None,\n        embedding_multiplier=None, # MuP\n        logits_scaling=None, # MuP\n        attention_multiplier=None, # MuP\n        residual_multiplier=None, # MuP\n        use_post_norm=False, # Peri-LN (post-norm)\n        auto_map={\n            \"AutoConfig\": \"configuration_hyperclovax.HyperCLOVAXConfig\",\n            \"AutoModel\": \"modeling_hyperclovax.HyperCLOVAXModel\",\n            \"AutoModelForCausalLM\": \"modeling_hyperclovax.HyperCLOVAXForCausalLM\"\n        },\n        **kwargs,\n    ):\n        self.vocab_size = vocab_size\n        self.max_position_embeddings = max_position_embeddings\n        self.hidden_size = hidden_size\n        self.intermediate_size = intermediate_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n\n        # for backward compatibility\n        if num_key_value_heads is None:\n            num_key_value_heads = num_attention_heads\n\n        self.num_key_value_heads = num_key_value_heads\n        self.hidden_act = hidden_act\n        self.initializer_range = initializer_range\n        self.rms_norm_eps = rms_norm_eps\n        self.pretraining_tp = pretraining_tp\n        self.use_cache = use_cache\n        self.rope_theta = rope_theta\n        self.rope_scaling = rope_scaling\n        self.attention_bias = attention_bias\n        self.attention_dropout = attention_dropout\n        self.mlp_bias = mlp_bias\n        self.head_dim = head_dim if head_dim is not None else self.hidden_size // self.num_attention_heads\n        # Validate the correctness of rotary position embeddings parameters\n        # BC: if there is a 'type' field, copy it it to 'rope_type'.\n        if self.rope_scaling is not None and \"type\" in self.rope_scaling:\n            self.rope_scaling[\"rope_type\"] = self.rope_scaling[\"type\"]\n        # rope_config_validation(self)\n\n        # MuP\n        self.embedding_multiplier = embedding_multiplier if embedding_multiplier is not None else 1.0\n        self.logits_scaling = logits_scaling if logits_scaling is not None else 1.0\n        self.attention_multiplier = attention_multiplier if attention_multiplier is not None else self.head_dim ** -0.5\n        self.residual_multiplier = residual_multiplier if residual_multiplier is not None else 1.0\n\n        # Peri-LN (post-norm)\n        self.use_post_norm = use_post_norm\n\n        super().__init__(\n            pad_token_id=pad_token_id,\n            bos_token_id=bos_token_id,\n            eos_token_id=eos_token_id,\n            tie_word_embeddings=tie_word_embeddings,\n            auto_map=auto_map,\n            **kwargs,\n        )\n",
        "model/vllm_hyperclovax.py": "# Partially copied and modified from\n# - https://github.com/huggingface/transformers/blob/v4.28.0/src/transformers/models/llama/modeling_llama.py\n# - https://github.com/vllm-project/vllm/blob/v0.8.3/vllm/model_executor/models/llama.py\n# Copyright 2023 The vLLM team.\n# Copyright 2022 EleutherAI and the HuggingFace Inc. team. All rights reserved.\n#\n# This code is based on EleutherAI's GPT-NeoX library and the GPT-NeoX\n# and OPT implementations in this library. It has been modified from its\n# original forms to accommodate minor architectural differences compared\n# to GPT-NeoX and OPT used by the Meta AI team that trained the model.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Inference-only HyperCLOVAX model compatible with HuggingFace weights.\"\"\"\nfrom typing import Any, Dict, Iterable, Optional, Set, Tuple, Type, Union\n\nimport torch\nfrom torch import nn\n\nfrom vllm.attention import Attention\nfrom vllm.compilation.decorators import support_torch_compile\nfrom vllm.config import CacheConfig, VllmConfig\nfrom vllm.distributed import get_pp_group, get_tensor_model_parallel_world_size\nfrom vllm.model_executor.layers.activation import SiluAndMul\nfrom vllm.model_executor.layers.layernorm import RMSNorm\nfrom vllm.model_executor.layers.linear import (MergedColumnParallelLinear,\n                                               QKVParallelLinear,\n                                               RowParallelLinear)\nfrom vllm.model_executor.layers.logits_processor import LogitsProcessor\nfrom vllm.model_executor.layers.quantization import QuantizationConfig\nfrom vllm.model_executor.layers.rotary_embedding import get_rope\nfrom vllm.model_executor.layers.sampler import SamplerOutput, get_sampler\nfrom vllm.model_executor.layers.vocab_parallel_embedding import (\n    DEFAULT_VOCAB_PADDING_SIZE, ParallelLMHead, VocabParallelEmbedding)\nfrom vllm.model_executor.model_loader.weight_utils import (\n    default_weight_loader, maybe_remap_kv_scale_name)\nfrom vllm.model_executor.sampling_metadata import SamplingMetadata\nfrom vllm.sequence import IntermediateTensors\n\nfrom vllm.model_executor.models.interfaces import SupportsLoRA, SupportsPP\nfrom vllm.model_executor.models.utils import (AutoWeightsLoader, PPMissingLayer, extract_layer_index,\n                                              is_pp_missing_parameter,\n                    make_empty_intermediate_tensors_factory, make_layers,\n                    maybe_prefix)\n\n\nclass HyperCLOVAXMLP(nn.Module):\n\n    def __init__(\n        self,\n        hidden_size: int,\n        intermediate_size: int,\n        hidden_act: str,\n        quant_config: Optional[QuantizationConfig] = None,\n        bias: bool = False,\n        prefix: str = \"\",\n        reduce_results: bool = True,\n    ) -> None:\n        super().__init__()\n        self.gate_up_proj = MergedColumnParallelLinear(\n            input_size=hidden_size,\n            output_sizes=[intermediate_size] * 2,\n            bias=bias,\n            quant_config=quant_config,\n            prefix=f\"{prefix}.gate_up_proj\",\n        )\n        self.down_proj = RowParallelLinear(\n            input_size=intermediate_size,\n            output_size=hidden_size,\n            bias=bias,\n            quant_config=quant_config,\n            reduce_results=reduce_results,\n            prefix=f\"{prefix}.down_proj\",\n        )\n        if hidden_act != \"silu\":\n            raise ValueError(f\"Unsupported activation: {hidden_act}. \"\n                             \"Only silu is supported for now.\")\n        self.act_fn = SiluAndMul()\n\n    def forward(self, x):\n        x, _ = self.gate_up_proj(x)\n        x = self.act_fn(x)\n        x, _ = self.down_proj(x)\n        return x\n\n\nclass HyperCLOVAXAttention(nn.Module):\n\n    def __init__(\n        self,\n        config: \"HyperCLOVAXConfig\",\n        hidden_size: int,\n        num_heads: int,\n        num_kv_heads: int,\n        rope_theta: float = 10000,\n        rope_scaling: Optional[Dict[str, Any]] = None,\n        max_position_embeddings: int = 8192,\n        quant_config: Optional[QuantizationConfig] = None,\n        bias: bool = False,\n        cache_config: Optional[CacheConfig] = None,\n        prefix: str = \"\",\n    ) -> None:\n        super().__init__()\n        layer_idx = extract_layer_index(prefix)\n        self.hidden_size = hidden_size\n        tp_size = get_tensor_model_parallel_world_size()\n        self.total_num_heads = num_heads\n        assert self.total_num_heads % tp_size == 0\n        self.num_heads = self.total_num_heads // tp_size\n        self.total_num_kv_heads = num_kv_heads\n        if self.total_num_kv_heads >= tp_size:\n            # Number of KV heads is greater than TP size, so we partition\n            # the KV heads across multiple tensor parallel GPUs.\n            assert self.total_num_kv_heads % tp_size == 0\n        else:\n            # Number of KV heads is less than TP size, so we replicate\n            # the KV heads across multiple tensor parallel GPUs.\n            assert tp_size % self.total_num_kv_heads == 0\n        self.num_kv_heads = max(1, self.total_num_kv_heads // tp_size)\n        # MistralConfig has an optional head_dim introduced by Mistral-Nemo\n        self.head_dim = getattr(config, \"head_dim\",\n                                self.hidden_size // self.total_num_heads)\n        self.q_size = self.num_heads * self.head_dim\n        self.kv_size = self.num_kv_heads * self.head_dim\n        self.scaling = getattr(config, \"attention_multiplier\", self.head_dim ** -0.5) # MuP\n        self.rope_theta = rope_theta\n        self.max_position_embeddings = max_position_embeddings\n\n        self.qkv_proj = QKVParallelLinear(\n            hidden_size=hidden_size,\n            head_size=self.head_dim,\n            total_num_heads=self.total_num_heads,\n            total_num_kv_heads=self.total_num_kv_heads,\n            bias=bias,\n            quant_config=quant_config,\n            prefix=f\"{prefix}.qkv_proj\",\n        )\n\n        self.o_proj = RowParallelLinear(\n            input_size=self.total_num_heads * self.head_dim,\n            output_size=hidden_size,\n            bias=bias,\n            quant_config=quant_config,\n            prefix=f\"{prefix}.o_proj\",\n        )\n\n        is_neox_style = True\n        if quant_config is not None and quant_config.get_name() == \"gguf\":\n            is_neox_style = False\n\n        self.rotary_emb = get_rope(\n            self.head_dim,\n            rotary_dim=self.head_dim,\n            max_position=max_position_embeddings,\n            base=rope_theta,\n            rope_scaling=rope_scaling,\n            is_neox_style=is_neox_style,\n        )\n\n        if hasattr(config, \"interleaved_sliding_window\"):\n            interleaved_sliding_window = config.interleaved_sliding_window\n            if isinstance(interleaved_sliding_window, int):\n                sliding_window = interleaved_sliding_window\n            elif isinstance(interleaved_sliding_window, list):\n                sw_idx = layer_idx % len(interleaved_sliding_window)\n                sliding_window = interleaved_sliding_window[sw_idx]\n            else:\n                raise ValueError(\n                    f\"{type(interleaved_sliding_window)} is not supported.\")\n        else:\n            sliding_window = None\n\n        self.attn = Attention(\n            self.num_heads,\n            self.head_dim,\n            self.scaling,\n            num_kv_heads=self.num_kv_heads,\n            cache_config=cache_config,\n            quant_config=quant_config,\n            per_layer_sliding_window=sliding_window,\n            prefix=f\"{prefix}.attn\",\n        )\n\n    def forward(\n        self,\n        positions: torch.Tensor,\n        hidden_states: torch.Tensor,\n    ) -> torch.Tensor:\n        qkv, _ = self.qkv_proj(hidden_states)\n        q, k, v = qkv.split([self.q_size, self.kv_size, self.kv_size], dim=-1)\n        q, k = self.rotary_emb(positions, q, k)\n        attn_output = self.attn(q, k, v)\n        output, _ = self.o_proj(attn_output)\n        return output\n\n\nclass HyperCLOVAXDecoderLayer(nn.Module):\n\n    def __init__(\n        self,\n        config: \"HyperCLOVAXConfig\",\n        cache_config: Optional[CacheConfig] = None,\n        quant_config: Optional[QuantizationConfig] = None,\n        prefix: str = \"\",\n    ) -> None:\n        super().__init__()\n        self.hidden_size = config.hidden_size\n        self.residual_multiplier = getattr(config, \"residual_multiplier\", 1.0) # MuP\n        rope_theta = getattr(config, \"rope_theta\", 10000)\n        rope_scaling = getattr(config, \"rope_scaling\", None)\n        if rope_scaling is not None and getattr(\n                config, \"original_max_position_embeddings\", None):\n            rope_scaling[\"original_max_position_embeddings\"] = (\n                config.original_max_position_embeddings)\n        max_position_embeddings = getattr(config, \"max_position_embeddings\",\n                                          8192)\n        # Support abacusai/Smaug-72B-v0.1 with attention_bias\n        # Support internlm/internlm-7b with bias\n        attention_bias = getattr(config, \"attention_bias\", False) or getattr(\n            config, \"bias\", False)\n        self.self_attn = HyperCLOVAXAttention(\n            config=config,\n            hidden_size=self.hidden_size,\n            num_heads=config.num_attention_heads,\n            num_kv_heads=getattr(config, \"num_key_value_heads\",\n                                 config.num_attention_heads),\n            rope_theta=rope_theta,\n            rope_scaling=rope_scaling,\n            max_position_embeddings=max_position_embeddings,\n            quant_config=quant_config,\n            bias=attention_bias,\n            cache_config=cache_config,\n            prefix=f\"{prefix}.self_attn\",\n        )\n        self.mlp = HyperCLOVAXMLP(\n            hidden_size=self.hidden_size,\n            intermediate_size=config.intermediate_size,\n            hidden_act=config.hidden_act,\n            quant_config=quant_config,\n            bias=getattr(config, \"mlp_bias\", False),\n            prefix=f\"{prefix}.mlp\",\n        )\n        self.input_layernorm = RMSNorm(config.hidden_size,\n                                       eps=config.rms_norm_eps)\n        self.post_attention_layernorm = RMSNorm(config.hidden_size,\n                                                eps=config.rms_norm_eps)\n\n        # Peri-LN (post-norm)\n        self.use_post_norm = getattr(config, \"use_post_norm\", False)\n        if self.use_post_norm:\n            self.post_norm1 = RMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n            self.post_norm2 = RMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n\n    def forward(\n        self,\n        positions: torch.Tensor,\n        hidden_states: torch.Tensor,\n    ) -> Tuple[torch.Tensor, torch.Tensor]:\n        # Self Attention\n        residual = hidden_states\n\n        hidden_states = self.input_layernorm(hidden_states)\n\n        hidden_states = self.self_attn(\n            positions=positions,\n            hidden_states=hidden_states)\n\n        # Peri-LN (post-norm)\n        if self.use_post_norm:\n            hidden_states = self.post_norm1(hidden_states)\n\n        hidden_states = residual + hidden_states * self.residual_multiplier # MuP\n        # Fully Connected\n        residual = hidden_states\n        hidden_states = self.post_attention_layernorm(hidden_states)\n        hidden_states = self.mlp(hidden_states)\n\n        # Peri-LN (post-norm)\n        if self.use_post_norm:\n            hidden_states = self.post_norm2(hidden_states)\n\n        hidden_states = residual + hidden_states * self.residual_multiplier # MuP\n\n        return hidden_states\n\n\n@support_torch_compile\nclass HyperCLOVAXModel(nn.Module):\n\n    def __init__(self,\n                 *,\n                 vllm_config: VllmConfig,\n                 prefix: str = \"\",\n                 layer_type: Type[HyperCLOVAXDecoderLayer] = HyperCLOVAXDecoderLayer):\n        super().__init__()\n\n        config = vllm_config.model_config.hf_config\n        cache_config = vllm_config.cache_config\n        quant_config = vllm_config.quant_config\n        lora_config = vllm_config.lora_config\n\n        self.config = config\n        self.quant_config = quant_config\n        lora_vocab = (lora_config.lora_extra_vocab_size *\n                      (lora_config.max_loras or 1)) if lora_config else 0\n        self.vocab_size = config.vocab_size + lora_vocab\n        self.org_vocab_size = config.vocab_size\n        if get_pp_group().is_first_rank or (config.tie_word_embeddings\n                                            and get_pp_group().is_last_rank):\n            self.embed_tokens = VocabParallelEmbedding(\n                self.vocab_size,\n                config.hidden_size,\n                org_num_embeddings=config.vocab_size,\n                quant_config=quant_config,\n            )\n        else:\n            self.embed_tokens = PPMissingLayer()\n        self.start_layer, self.end_layer, self.layers = make_layers(\n            config.num_hidden_layers,\n            lambda prefix: layer_type(config=config,\n                                      cache_config=cache_config,\n                                      quant_config=quant_config,\n                                      prefix=prefix),\n            prefix=f\"{prefix}.layers\",\n        )\n        if get_pp_group().is_last_rank:\n            self.norm = RMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n        else:\n            self.norm = PPMissingLayer()\n\n        self.make_empty_intermediate_tensors = (\n            make_empty_intermediate_tensors_factory(\n                [\"hidden_states\", \"residual\"], config.hidden_size))\n\n        self.embedding_multiplier = getattr(config, \"embedding_multiplier\", 1.0) # MuP\n\n    def get_input_embeddings(self, input_ids: torch.Tensor) -> torch.Tensor:\n        return self.embed_tokens(input_ids)\n\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor],\n        positions: torch.Tensor,\n        intermediate_tensors: Optional[IntermediateTensors],\n        inputs_embeds: Optional[torch.Tensor] = None,\n    ) -> Union[torch.Tensor, IntermediateTensors]:\n        if get_pp_group().is_first_rank:\n            if inputs_embeds is not None:\n                hidden_states = inputs_embeds\n            else:\n                hidden_states = self.get_input_embeddings(input_ids)\n            residual = None\n\n            hidden_states *= self.embedding_multiplier # MuP\n        else:\n            assert intermediate_tensors is not None\n            hidden_states = intermediate_tensors[\"hidden_states\"]\n            residual = intermediate_tensors[\"residual\"]\n\n        for layer in self.layers[self.start_layer:self.end_layer]:\n            hidden_states = layer(positions, hidden_states)\n\n        if not get_pp_group().is_last_rank:\n            return IntermediateTensors({\n                \"hidden_states\": hidden_states,\n                \"residual\": residual\n            })\n\n        hidden_states = self.norm(hidden_states)\n        return hidden_states\n\n    def load_weights(self, weights: Iterable[Tuple[str,\n                                                   torch.Tensor]]) -> Set[str]:\n        stacked_params_mapping = [\n            # (param_name, shard_name, shard_id)\n            (\".qkv_proj\", \".q_proj\", \"q\"),\n            (\".qkv_proj\", \".k_proj\", \"k\"),\n            (\".qkv_proj\", \".v_proj\", \"v\"),\n            (\".gate_up_proj\", \".gate_proj\", 0),\n            (\".gate_up_proj\", \".up_proj\", 1),\n        ]\n        params_dict = dict(self.named_parameters())\n        loaded_params: Set[str] = set()\n        for name, loaded_weight in weights:\n            if \"rotary_emb.inv_freq\" in name:\n                continue\n            if (\"rotary_emb.cos_cached\" in name\n                    or \"rotary_emb.sin_cached\" in name):\n                # Models trained using ColossalAI may include these tensors in\n                # the checkpoint. Skip them.\n                continue\n            if (self.quant_config is not None and\n                (scale_name := self.quant_config.get_cache_scale(name))):\n                # Loading kv cache quantization scales\n                param = params_dict[scale_name]\n                weight_loader = getattr(param, \"weight_loader\",\n                                        default_weight_loader)\n                loaded_weight = (loaded_weight if loaded_weight.dim() == 0 else\n                                 loaded_weight[0])\n                weight_loader(param, loaded_weight)\n                loaded_params.add(scale_name)\n                continue\n            if \"scale\" in name:\n                # Remapping the name of FP8 kv-scale.\n                name = maybe_remap_kv_scale_name(name, params_dict)\n                if name is None:\n                    continue\n            for param_name, weight_name, shard_id in stacked_params_mapping:\n                if weight_name not in name:\n                    continue\n                name = name.replace(weight_name, param_name)\n                # Skip loading extra bias for GPTQ models.\n                if name.endswith(\".bias\") and name not in params_dict:\n                    continue\n\n                if is_pp_missing_parameter(name, self):\n                    continue\n\n                param = params_dict[name]\n                weight_loader = param.weight_loader\n                weight_loader(param, loaded_weight, shard_id)\n                break\n            else:\n                # Skip loading extra bias for GPTQ models.\n                if name.endswith(\".bias\") and name not in params_dict:\n                    continue\n\n                if is_pp_missing_parameter(name, self):\n                    continue\n\n                param = params_dict[name]\n                weight_loader = getattr(param, \"weight_loader\",\n                                        default_weight_loader)\n                weight_loader(param, loaded_weight)\n            loaded_params.add(name)\n        return loaded_params\n\n\nclass HyperCLOVAXForCausalLM(nn.Module, SupportsLoRA, SupportsPP):\n    packed_modules_mapping = {\n        \"qkv_proj\": [\"q_proj\", \"k_proj\", \"v_proj\"],\n        \"gate_up_proj\": [\"gate_proj\", \"up_proj\"]\n    }\n\n    # LoRA specific attributes\n    supported_lora_modules = [\n        \"qkv_proj\", \"o_proj\", \"gate_up_proj\", \"down_proj\", \"embed_tokens\",\n        \"lm_head\"\n    ]\n    embedding_modules = {\n        \"embed_tokens\": \"input_embeddings\",\n        \"lm_head\": \"output_embeddings\"\n    }\n    embedding_padding_modules = [\"lm_head\"]\n\n    # Mistral/HyperCLOVAX models can also be loaded with --load-format mistral\n    # from consolidated.safetensors checkpoints\n    mistral_mapping = {\n        \"layers\": \"model.layers\",\n        \"attention\": \"self_attn\",\n        \"qscale_act\": \"input_scale\",\n        \"qscale_weight\": \"weight_scale\",\n        \"kv_fake_quantizer.qscale_act\": \"kv_scale\",\n        \"wq\": \"q_proj\",\n        \"wk\": \"k_proj\",\n        \"wv\": \"v_proj\",\n        \"wo\": \"o_proj\",\n        \"attention_norm\": \"input_layernorm\",\n        \"feed_forward\": \"mlp\",\n        \"w1\": \"gate_proj\",\n        \"w2\": \"down_proj\",\n        \"w3\": \"up_proj\",\n        \"ffn_norm\": \"post_attention_layernorm\",\n        \"tok_embeddings\": \"model.embed_tokens\",\n        \"output\": \"lm_head\",\n        \"norm\": \"model.norm\",\n    }\n\n    def __init__(self,\n                 *,\n                 vllm_config: VllmConfig,\n                 prefix: str = \"\",\n                 layer_type: Type[HyperCLOVAXDecoderLayer] = HyperCLOVAXDecoderLayer):\n        super().__init__()\n        config = vllm_config.model_config.hf_config\n        quant_config = vllm_config.quant_config\n        lora_config = vllm_config.lora_config\n        self.config = config\n        self.lora_config = lora_config\n\n        self.model = self._init_model(vllm_config=vllm_config,\n                                      prefix=maybe_prefix(prefix, \"model\"),\n                                      layer_type=layer_type)\n\n        if get_pp_group().is_last_rank:\n            self.unpadded_vocab_size = config.vocab_size\n            if lora_config:\n                self.unpadded_vocab_size += lora_config.lora_extra_vocab_size\n            self.lm_head = ParallelLMHead(\n                self.unpadded_vocab_size,\n                config.hidden_size,\n                org_num_embeddings=config.vocab_size,\n                padding_size=(\n                    DEFAULT_VOCAB_PADDING_SIZE\n                    # We need bigger padding if using lora for kernel\n                    # compatibility\n                    if not lora_config else\n                    lora_config.lora_vocab_padding_size),\n                quant_config=quant_config,\n                prefix=maybe_prefix(prefix, \"lm_head\"),\n            )\n            if config.tie_word_embeddings:\n                self.lm_head = self.lm_head.tie_weights(\n                    self.model.embed_tokens)\n\n            logit_scale = getattr(config, \"logit_scale\", 1.0)\n            logit_scale *= getattr(config, \"logits_scaling\", 1.0) # MuP\n\n            self.logits_processor = LogitsProcessor(self.unpadded_vocab_size,\n                                                    config.vocab_size,\n                                                    logit_scale)\n        else:\n            self.lm_head = PPMissingLayer()\n\n        self.sampler = get_sampler()\n\n        self.make_empty_intermediate_tensors = (\n            self.model.make_empty_intermediate_tensors)\n\n    def _init_model(self,\n                    vllm_config: VllmConfig,\n                    prefix: str = \"\",\n                    layer_type: Type[HyperCLOVAXDecoderLayer] = HyperCLOVAXDecoderLayer):\n        return HyperCLOVAXModel(vllm_config=vllm_config,\n                                prefix=prefix,\n                                layer_type=layer_type)\n\n    def get_input_embeddings(self, input_ids: torch.Tensor) -> torch.Tensor:\n        return self.model.get_input_embeddings(input_ids)\n\n    def forward(\n        self,\n        input_ids: torch.Tensor,\n        positions: torch.Tensor,\n        intermediate_tensors: Optional[IntermediateTensors] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n    ) -> Union[torch.Tensor, IntermediateTensors]:\n        model_output = self.model(input_ids, positions, intermediate_tensors,\n                                  inputs_embeds)\n        return model_output\n\n    def compute_logits(\n        self,\n        hidden_states: torch.Tensor,\n        sampling_metadata: SamplingMetadata,\n    ) -> Optional[torch.Tensor]:\n        logits = self.logits_processor(self.lm_head, hidden_states,\n                                       sampling_metadata)\n        return logits\n\n    def sample(self, logits: torch.Tensor,\n               sampling_metadata: SamplingMetadata) -> Optional[SamplerOutput]:\n        next_tokens = self.sampler(logits, sampling_metadata)\n        return next_tokens\n\n    def load_weights(self, weights: Iterable[Tuple[str,\n                                                   torch.Tensor]]) -> Set[str]:\n        loader = AutoWeightsLoader(\n            self,\n            skip_prefixes=([\"lm_head.\"]\n                           if self.config.tie_word_embeddings else None),\n        )\n        return loader.load_weights(\n            self.maybe_remap_mistral(name, loaded_weight)\n            for name, loaded_weight in weights)\n\n    # This function is used to remap the mistral format as\n    # used by Mistral and Llama <=2\n    def maybe_remap_mistral(\n        self,\n        name: str,\n        loaded_weight: torch.Tensor,\n    ) -> Tuple[str, torch.Tensor]:\n\n        def permute(w: torch.Tensor, n_heads: int):\n            attn_in = self.config.head_dim * n_heads\n            attn_out = self.config.hidden_size\n\n            return w.view(n_heads, attn_in // n_heads // 2, 2,\n                          attn_out).transpose(1, 2).reshape(attn_in, attn_out)\n\n        mapping = self.mistral_mapping\n        modules = name.split(\".\")\n\n        # rotary embeds should be sliced\n        if \"wk\" in modules and modules[-1] == \"weight\":\n            loaded_weight = permute(loaded_weight,\n                                    self.config.num_key_value_heads)\n        elif \"wq\" in modules and modules[-1] == \"weight\":\n            loaded_weight = permute(loaded_weight,\n                                    self.config.num_attention_heads)\n\n        num_modules = len(modules)\n        for i in range(num_modules):\n            item = modules[i]\n            next_item = modules[i + 1] if i < num_modules - 1 else None\n\n            combined_item = (f\"{item}.{next_item}\"\n                             if next_item is not None else None)\n\n            if combined_item in mapping:\n                name = name.replace(combined_item, mapping[combined_item])\n            elif item in mapping and mapping[item] not in name:\n                name = name.replace(item, mapping[item])\n\n        return name, loaded_weight\n\n",
        "parser/__init__.py": "from vllm.reasoning import ReasoningParserManager\nfrom vllm.entrypoints.openai.tool_parsers.abstract_tool_parser import ToolParserManager\n\ndef register_reasoning_parser():\n    from .hcx_reasoner import HcxReasoningParser\n    ReasoningParserManager.register_module(name=\"hcx\", module=HcxReasoningParser, force=True)\n\ndef register_tool_parser():\n    from .hcx_tool_parser import HcxToolParser\n    ToolParserManager.register_module(name=\"hcx\", module=HcxToolParser, force=True)\n",
        "parser/hcx_parser_mixin.py": "# HyperCLOVAX vLLM Plugin\n# Copyright (c) 2025-present NAVER Cloud Corp.\n# Apache-2.0\n\nimport re\n\nclass HcxStreamingParserFunctionsMixin:\n    def __init__(self):\n        '''\n        # initialize these attributes in your class properly\n        self.buffer_string = ''\n        self.escaped_special_strings = []\n        self.special_strings = []\n        '''\n        pass\n\n    def remove_special_string(self):\n        positions = []\n        for ss in self.escaped_special_strings:\n            positions += [(m.start(), m.end()) for m in re.finditer(ss, self.buffer_string)]\n\n        sorted_positions = sorted(positions, key=lambda x: x[0])\n        to_stream = self.buffer_string[:sorted_positions[-1][0]]\n        remaining = self.buffer_string[sorted_positions[-1][1]:]\n        for ss in self.special_strings:\n            to_stream.replace(ss, '')\n\n        return to_stream, remaining\n\n\n    def check_is_special_string(self):\n        for ss in self.special_strings:\n            if ss in self.buffer_string:\n                return True\n        return False\n\n    \n    def check_is_part_of_special_string(self):\n        for ss in self.special_strings:\n            min_len = min(len(self.buffer_string), len(ss))\n            for ln in range(min_len, 0, -1):\n                if self.buffer_string[-ln:] == ss[:ln]:\n                    return True\n        return False\n",
        "parser/hcx_reasoner.py": "# HyperCLOVAX vLLM Plugin\n# Copyright (c) 2025-present NAVER Cloud Corp.\n# Apache-2.0\n\nimport re\n\nfrom collections.abc import Sequence\nfrom typing import Optional, Union\n\nfrom transformers import PreTrainedTokenizerBase\n\nfrom vllm.entrypoints.openai.protocol import ChatCompletionRequest, DeltaMessage\nfrom vllm.logger import init_logger\nfrom vllm.reasoning import ReasoningParser\n\nfrom .hcx_parser_mixin import HcxStreamingParserFunctionsMixin\n\nlogger = init_logger(__name__)\n\n\nclass HcxReasoningParser(ReasoningParser, HcxStreamingParserFunctionsMixin):\n    def __init__(self, tokenizer: PreTrainedTokenizerBase):\n        super().__init__(tokenizer)\n        self.think_start_token = \"/think\\n\"\n        self.think_end_token = \"<|im_end|>\\n<|im_start|>assistant\"\n\n        # for streaming\n        self.end_token_id = self.vocab.get(\"<|im_end|>\")\n        self.non_reasoning_mode_start_token = tokenizer.encode(\"\\n\")[0]\n        self.function_call_role = ' -> tool/function_call\\n'\n        self.no_reasoning_content = False\n\n        # attributes for streaming parser mixin\n        self.buffer_string = ''\n        self.special_strings = ['/think\\n', '<|im_end|>\\n<|im_start|>assistant', self.function_call_role]\n        self.escaped_special_strings = [re.escape(ss) for ss in self.special_strings]\n\n\n    def extract_reasoning_content(\n            self, model_output: str, request: ChatCompletionRequest\n    ) -> tuple[Optional[str], Optional[str]]:\n        chat_template_kwargs = request.chat_template_kwargs or {}\n        if chat_template_kwargs.get('skip_reasoning', False):\n            return None, model_output\n\n        is_reasoning = False\n\n        if chat_template_kwargs.get('force_reasoning', False):\n            is_reasoning = True\n\n        if model_output.startswith(self.think_start_token):\n            is_reasoning = True\n            model_output_parts = model_output.partition(self.think_start_token)\n            model_output = model_output_parts[2]\n        \n        if self.think_end_token not in model_output:\n            if is_reasoning:\n                return model_output, None\n            else:\n                return None, model_output\n\n        reasoning_content, _, content = model_output.partition(self.think_end_token)\n\n        final_content = content or None\n\n        return reasoning_content, final_content\n\n\n    def extract_reasoning_content_streaming(\n        self,\n        previous_text: str,\n        current_text: str,\n        delta_text: str,\n        previous_token_ids: Sequence[int],\n        current_token_ids: Sequence[int],\n        delta_token_ids: Sequence[int],\n    ) -> Union[DeltaMessage, None]:\n        if current_token_ids[0] == self.non_reasoning_mode_start_token:\n            self.no_reasoning_content = True\n            \n        if len(current_text) == 0:\n            return None\n\n        if self.no_reasoning_content:\n            return DeltaMessage(content=delta_text)\n\n        self.buffer_string += delta_text\n        buffered_content = ''\n\n        if self.check_is_special_string():\n            if current_text.startswith(self.function_call_role):\n                self.no_reasoning_content = True\n                delta_text = self.buffer_string\n                self.buffer_string = ''\n                return DeltaMessage(content=delta_text)\n\n            buffered_content, delta_text = self.remove_special_string()\n            self.buffer_string = delta_text\n            \n            if buffered_content:\n                # if buffered_content is not empty, the special string must be '<|im_end|>\\n<|im_start|>assistant'\n                # which serves as the separator between reasoning content and other content\n                if self.check_is_part_of_special_string():\n                    return DeltaMessage(reasoning_content=buffered_content)\n                else:\n                    self.buffer_string = ''\n                    return DeltaMessage(reasoning_content=buffered_content, content=delta_text)\n                \n        if self.check_is_part_of_special_string():\n            if self.is_reasoning_end(delta_token_ids):\n                return DeltaMessage(reasoning_content=self.buffer_string)\n            else:\n                return None\n        else:\n            delta_text = self.buffer_string\n            self.buffer_string = ''\n\n        if self.think_end_token in current_text:\n            return DeltaMessage(content=delta_text)\n        else:\n            return DeltaMessage(reasoning_content=delta_text)\n\n\n    def is_reasoning_end(self, input_ids: list[int]) -> bool:\n        if len(input_ids) > 1:\n            return False\n        return self.no_reasoning_content or self.end_token_id in input_ids\n\n\n    def extract_content_ids(self, input_ids: list[int]) -> list[int]:\n        if self.end_token_id not in input_ids[:-1]:\n            return []\n        else:\n            return input_ids[input_ids.index(self.end_token_id) + 1:]\n",
        "parser/hcx_tool_parser.py": "# HyperCLOVAX vLLM Plugin\n# Copyright (c) 2025-present NAVER Cloud Corp.\n# Apache-2.0\n\nimport json\nfrom collections.abc import Sequence\nfrom typing import Union\n\nimport re\n\nfrom vllm.entrypoints.openai.protocol import (ChatCompletionRequest,\n                                              DeltaFunctionCall, DeltaMessage,\n                                              DeltaToolCall,\n                                              ExtractedToolCallInformation,\n                                              FunctionCall, ToolCall)\nfrom vllm.entrypoints.openai.tool_parsers.abstract_tool_parser import ToolParser\nfrom vllm.logger import init_logger\nfrom vllm.transformers_utils.tokenizer import AnyTokenizer\n\nfrom .hcx_parser_mixin import HcxStreamingParserFunctionsMixin\n\nlogger = init_logger(__name__)\n\nclass HcxToolParser(ToolParser, HcxStreamingParserFunctionsMixin):\n    def __init__(self, tokenizer: AnyTokenizer):\n        super().__init__(tokenizer)\n\n        self.tool_call_start_token: str = \" -> tool/function_call\\n\"\n        self.tool_call_end_token: str = \"<|im_end|>\"\n        # case 1. tool call is between other contents; case 2. tool call is at the end of the response\n        self.tool_call_regex = re.compile(r\"-> tool/function_call\\n(.*?)<\\|im_end\\|>|-> tool/function_call\\n(.*)]\", re.DOTALL)\n            \n        # for streaming\n        self.tool_call_offset = 0\n        self.current_tool_id = -1\n        self.prev_tool_call_arr = []\n        self.streamed_args_for_tool: list[str] = []\n        self.is_reasoning_ended = False\n\n        # attributes for streaming parser mixin\n        self.buffer_string = ''\n        self.special_strings = ['<|im_end|>\\n', '<|im_start|>assistant', '-> tool/function_call\\n']\n        self.escaped_special_strings = [re.escape(ss) for ss in self.special_strings]\n\n\n    def extract_tool_calls(\n        self,\n        model_output: str,\n        request: ChatCompletionRequest,\n    ) -> ExtractedToolCallInformation:\n        if self.tool_call_start_token in model_output:\n            try:\n                tool_call_match = self.tool_call_regex.search(model_output)\n                if tool_call_match:\n                    if tool_call_match.group(1) is not None:\n                        raw_function_calls = json.loads(tool_call_match.group(1))\n                    else:\n                        raw_function_calls = json.loads(tool_call_match.group(2) + ']')\n\n                tool_calls = [\n                    ToolCall(\n                        type=\"function\",\n                        function=FunctionCall(\n                            name=function_call[\"name\"],\n                            arguments=json.dumps(function_call[\"arguments\"],\n                                                 ensure_ascii=False)))\n                    for function_call in raw_function_calls\n                ]\n                \n                # check if there is other content before tool calls\n                if '<|im_end|>\\n<|im_start|>assistant -> tool/function_call\\n' in model_output:\n                    content = model_output.split('<|im_end|>\\n<|im_start|>assistant -> tool/function_call\\n')[0]\n\n                    return ExtractedToolCallInformation(\n                        tools_called=True,\n                        tool_calls=tool_calls,\n                        content=content if content else None)\n                else:\n                    return ExtractedToolCallInformation(\n                        tools_called=True,\n                        tool_calls=tool_calls,\n                        content=None)\n\n            except Exception:\n                logger.exception(\"Error in extracting tool call from response.\")\n\n                return ExtractedToolCallInformation(tools_called=False,\n                                                    tool_calls=[],\n                                                    content=model_output)\n        else:\n            return ExtractedToolCallInformation(tools_called=False,\n                                                tool_calls=[],\n                                                content=model_output)\n\n    def extract_tool_calls_streaming(\n        self,\n        previous_text: str,\n        current_text: str,\n        delta_text: str,\n        previous_token_ids: Sequence[int],\n        current_token_ids: Sequence[int],\n        delta_token_ids: Sequence[int],\n        request: ChatCompletionRequest,\n    ) -> Union[DeltaMessage, None]:\n        if self.tool_call_start_token in current_text:\n            function_call_text = current_text.split(self.tool_call_start_token)[-1]\n            function_call_text = function_call_text[self.tool_call_offset:]\n            opening_brace_index = None\n            for idx, c in enumerate(function_call_text):\n                if c == '{':\n                    opening_brace_index = idx\n                    break\n            \n            closing_brace_indices = [_idx for _idx, c in enumerate(function_call_text) if c == '}']\n            \n            if opening_brace_index is None:\n                return None\n            \n            if len(closing_brace_indices) == 0:\n                return None\n\n            for closing_brace_index in closing_brace_indices:\n                try:                        \n                    _function_call = json.loads(function_call_text[opening_brace_index: closing_brace_index + 1])\n                    self.current_tool_id += 1\n                    self.tool_call_offset = closing_brace_index\n                    self.prev_tool_call_arr.append(_function_call)\n                    self.streamed_args_for_tool.append(function_call_text[opening_brace_index:closing_brace_index + 1])\n\n                    return DeltaMessage(tool_calls=[\n                            DeltaToolCall(index=self.current_tool_id,\n                                            type=\"function\",\n                                            id=f'hcx_tool_call_{self.current_tool_id}',\n                                            function=DeltaFunctionCall(\n                                                name=_function_call.get('name', ''), \n                                                arguments=json.dumps(_function_call.get('arguments', ''))).model_dump(\n                                                    exclude_none=True))])\n\n                except json.JSONDecodeError:\n                    logger.debug('Decode error:', function_call_text[opening_brace_index: closing_brace_index + 1])\n                \n            return None\n        else:\n            # check if reasoning ended with three conditions\n            if len(current_token_ids) == 2 and len(current_text) == 0:\n                # there is no reasoning content\n                self.is_reasoning_ended = True\n\n            if current_text.startswith(' -> tool/function_call\\n'):\n                self.is_reasoning_ended = True\n\n            if '<|im_end|>\\n<|im_start|>' in current_text:\n                self.is_reasoning_ended = True\n\n            # set up buffer for special string processing\n            self.buffer_string += delta_text\n            buffered_content = ''\n\n            if self.check_is_special_string():\n                buffered_content, delta_text = self.remove_special_string()\n                self.buffer_string = delta_text\n\n                if self.is_reasoning_ended:\n                    return DeltaMessage(content=buffered_content)\n                else:\n                    return DeltaMessage(reasoning_content=buffered_content)\n\n            if self.check_is_part_of_special_string():\n                return None\n            else:\n                delta_text = self.buffer_string\n                self.buffer_string = ''\n\n            if self.is_reasoning_ended:\n                return DeltaMessage(content=delta_text)\n            else:\n                return DeltaMessage(reasoning_content=delta_text)\n",
        "setup.py": "from setuptools import setup, find_packages\n\ndef parse_requirements(filename):\n    with open(filename) as f:\n        return [line.strip() for line in f if line.strip() and not line.startswith(\"#\")]\n\nsetup(name='vllm_add_hyperclovax_model',\n      version='0.1',\n      packages=find_packages(),\n      install_requires=parse_requirements(\"requirements.txt\"),\n      entry_points={\n        'vllm.general_plugins': [\n            \"register_hyperclovax_model = model:register\",\n            \"register_hcx_reasoning_parser = parser:register_reasoning_parser\",\n            \"register_hcx_tool_parser = parser:register_tool_parser\"\n        ]\n    }\n)\n"
    }
}