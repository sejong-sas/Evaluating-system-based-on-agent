{
  "model_id": "llm-jp/llm-jp-13b-instruct-full-jaster-dolly-oasst-v1.0",
  "full_texts": [
    {
      "arxiv_id": "https://docs.astral.sh/uv/",
      "full_text": " uv Skip to content uv Introduction Initializing search uv uv uv Introduction Introduction Table of contents Highlights Installation Projects Scripts Tools Python versions The pip interface Learn more Getting started Getting started Installation First steps Features Getting help Guides Guides Installing Python Running scripts Using tools Working on projects Publishing packages Migration Migration From pip to a uv project Integrations Integrations Docker Jupyter marimo GitHub Actions GitLab CI/CD Pre-commit PyTorch FastAPI Alternative indexes Dependency bots AWS Lambda Concepts Concepts Projects Projects Structure and files Creating projects Managing dependencies Running commands Locking and syncing Configuring projects Building distributions Using workspaces Tools Python versions Configuration files Package indexes Resolution Build backend Authentication Authentication The auth CLI HTTP credentials Git credentials TLS certificates Third-party services Caching Preview features The pip interface The pip interface Using environments Managing packages Inspecting environments Declaring dependencies Locking environments Compatibility with pip Reference Reference Commands Settings Environment variables Installer options Troubleshooting Troubleshooting Build failures Reproducible examples Internals Internals Resolver Benchmarks Policies Policies Versioning Platform support License Table of contents Highlights Installation Projects Scripts Tools Python versions The pip interface Learn more uv An extremely fast Python package and project manager, written in Rust. Installing Trio 's dependencies with a warm cache. Highlights üöÄ A single tool to replace pip , pip-tools , pipx , poetry , pyenv , twine , virtualenv , and more. ‚ö°Ô∏è 10-100x faster than pip . üóÇÔ∏è Provides comprehensive project management , with a universal lockfile . ‚ùáÔ∏è Runs scripts , with support for inline dependency metadata . üêç Installs and manages Python versions. üõ†Ô∏è Runs and installs tools published as Python packages. üî© Includes a pip-compatible interface for a performance boost with a familiar CLI. üè¢ Supports Cargo-style workspaces for scalable projects. üíæ Disk-space efficient, with a global cache for dependency deduplication. ‚è¨ Installable without Rust or Python via curl or pip . üñ•Ô∏è Supports macOS, Linux, and Windows. uv is backed by Astral , the creators of Ruff . Installation Install uv with our official standalone installer: macOS and Linux Windows $ curl -LsSf https://astral.sh/uv/install.sh | sh PS&gt; powershell -ExecutionPolicy ByPass -c &quot;irm https://astral.sh/uv/install.ps1 | iex&quot; Then, check out the first steps or read on for a brief overview. Tip uv may also be installed with pip, Homebrew, and more. See all of the methods on the installation page . Projects uv manages project dependencies and environments, with support for lockfiles, workspaces, and more, similar to rye or poetry : $ uv init example Initialized project `example` at `/home/user/example` $ cd example $ uv add ruff Creating virtual environment at: .venv Resolved 2 packages in 170ms Built example @ file:///home/user/example Prepared 2 packages in 627ms Installed 2 packages in 1ms + example==0.1.0 (from file:///home/user/example) + ruff==0.5.4 $ uv run ruff check All checks passed! $ uv lock Resolved 2 packages in 0.33ms $ uv sync Resolved 2 packages in 0.70ms Audited 1 package in 0.02ms See the project guide to get started. uv also supports building and publishing projects, even if they're not managed with uv. See the packaging guide to learn more. Scripts uv manages dependencies and environments for single-file scripts. Create a new script and add inline metadata declaring its dependencies: $ echo &#39;import requests; print(requests.get(&quot;https://astral.sh&quot;))&#39; &gt; example.py $ uv add --script example.py requests Updated `example.py` Then, run the script in an isolated virtual environment: $ uv run example.py Reading inline script metadata from: example.py Installed 5 packages in 12ms &lt;Response [200]&gt; See the scripts guide to get started. Tools uv executes and installs command-line tools provided by Python packages, similar to pipx . Run a tool in an ephemeral environment using uvx (an alias for uv tool run ): $ uvx pycowsay &#39;hello world!&#39; Resolved 1 package in 167ms Installed 1 package in 9ms + pycowsay==0.0.0.2 &quot;&quot;&quot; ------------ &lt; hello world! &gt; ------------ \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || Install a tool with uv tool install : $ uv tool install ruff Resolved 1 package in 6ms Installed 1 package in 2ms + ruff==0.5.4 Installed 1 executable: ruff $ ruff --version ruff 0.5.4 See the tools guide to get started. Python versions uv installs Python and allows quickly switching between versions. Install multiple Python versions: $ uv python install 3 .10 3 .11 3 .12 Searching for Python versions matching: Python 3.10 Searching for Python versions matching: Python 3.11 Searching for Python versions matching: Python 3.12 Installed 3 versions in 3.42s + cpython-3.10.14-macos-aarch64-none + cpython-3.11.9-macos-aarch64-none + cpython-3.12.4-macos-aarch64-none Download Python versions as needed: $ uv venv --python 3 .12.0 Using CPython 3.12.0 Creating virtual environment at: .venv Activate with: source .venv/bin/activate $ uv run --python [email&#160;protected] -- python Python 3.8.16 (a9dbdca6fc3286b0addd2240f11d97d8e8de187a, Dec 29 2022, 11:45:30) [PyPy 7.3.11 with GCC Apple LLVM 13.1.6 (clang-1316.0.21.2.5)] on darwin Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information. &gt;&gt;&gt;&gt; Use a specific Python version in the current directory: $ uv python pin 3 .11 Pinned `.python-version` to `3.11` See the installing Python guide to get started. The pip interface uv provides a drop-in replacement for common pip , pip-tools , and virtualenv commands. uv extends their interfaces with advanced features, such as dependency version overrides, platform-independent resolutions, reproducible resolutions, alternative resolution strategies, and more. Migrate to uv without changing your existing workflows ‚Äî and experience a 10-100x speedup ‚Äî with the uv pip interface. Compile requirements into a platform-independent requirements file: $ uv pip compile docs/requirements.in \\ --universal \\ --output-file docs/requirements.txt Resolved 43 packages in 12ms Create a virtual environment: $ uv venv Using CPython 3.12.3 Creating virtual environment at: .venv Activate with: source .venv/bin/activate Install the locked requirements: $ uv pip sync docs/requirements.txt Resolved 43 packages in 11ms Installed 43 packages in 208ms + babel==2.15.0 + black==24.4.2 + certifi==2024.7.4 ... See the pip interface documentation to get started. Learn more See the first steps or jump straight to the guides to start using uv. May 18, 2025 Back to top Next Index Made with Material for MkDocs Insiders ",
      "fetch_method": "direct-html"
    },
    {
      "arxiv_id": "https://docs.astral.sh/uv/getting-started/installation/",
      "full_text": " Installation | uv Skip to content uv Installation Initializing search uv uv uv Introduction Getting started Getting started Installation Installation Table of contents Installation methods Standalone installer PyPI Homebrew WinGet Scoop Docker GitHub Releases Cargo Upgrading uv Shell autocompletion Uninstallation Next steps First steps Features Getting help Guides Guides Installing Python Running scripts Using tools Working on projects Publishing packages Migration Migration From pip to a uv project Integrations Integrations Docker Jupyter marimo GitHub Actions GitLab CI/CD Pre-commit PyTorch FastAPI Alternative indexes Dependency bots AWS Lambda Concepts Concepts Projects Projects Structure and files Creating projects Managing dependencies Running commands Locking and syncing Configuring projects Building distributions Using workspaces Tools Python versions Configuration files Package indexes Resolution Build backend Authentication Authentication The auth CLI HTTP credentials Git credentials TLS certificates Third-party services Caching Preview features The pip interface The pip interface Using environments Managing packages Inspecting environments Declaring dependencies Locking environments Compatibility with pip Reference Reference Commands Settings Environment variables Installer options Troubleshooting Troubleshooting Build failures Reproducible examples Internals Internals Resolver Benchmarks Policies Policies Versioning Platform support License Table of contents Installation methods Standalone installer PyPI Homebrew WinGet Scoop Docker GitHub Releases Cargo Upgrading uv Shell autocompletion Uninstallation Next steps Introduction Getting started Installing uv Installation methods Install uv with our standalone installers or your package manager of choice. Standalone installer uv provides a standalone installer to download and install uv: macOS and Linux Windows Use curl to download the script and execute it with sh : $ curl -LsSf https://astral.sh/uv/install.sh | sh If your system doesn't have curl , you can use wget : $ wget -qO- https://astral.sh/uv/install.sh | sh Request a specific version by including it in the URL: $ curl -LsSf https://astral.sh/uv/0.8.17/install.sh | sh Use irm to download the script and execute it with iex : PS&gt; powershell -ExecutionPolicy ByPass -c &quot;irm https://astral.sh/uv/install.ps1 | iex&quot; Changing the execution policy allows running a script from the internet. Request a specific version by including it in the URL: PS&gt; powershell -ExecutionPolicy ByPass -c &quot;irm https://astral.sh/uv/0.8.17/install.ps1 | iex&quot; Tip The installation script may be inspected before use: macOS and Linux Windows $ curl -LsSf https://astral.sh/uv/install.sh | less PS&gt; powershell -c &quot;irm https://astral.sh/uv/install.ps1 | more&quot; Alternatively, the installer or binaries can be downloaded directly from GitHub . See the reference documentation on the installer for details on customizing your uv installation. PyPI For convenience, uv is published to PyPI . If installing from PyPI, we recommend installing uv into an isolated environment, e.g., with pipx : $ pipx install uv However, pip can also be used: $ pip install uv Note uv ships with prebuilt distributions (wheels) for many platforms; if a wheel is not available for a given platform, uv will be built from source, which requires a Rust toolchain. See the contributing setup guide for details on building uv from source. Homebrew uv is available in the core Homebrew packages. $ brew install uv WinGet uv is available via WinGet . $ winget install --id = astral-sh.uv -e Scoop uv is available via Scoop . $ scoop install main/uv Docker uv provides a Docker image at ghcr.io/astral-sh/uv . See our guide on using uv in Docker for more details. GitHub Releases uv release artifacts can be downloaded directly from GitHub Releases . Each release page includes binaries for all supported platforms as well as instructions for using the standalone installer via github.com instead of astral.sh . Cargo uv is available via Cargo, but must be built from Git rather than crates.io due to its dependency on unpublished crates. $ cargo install --git https://github.com/astral-sh/uv uv Note This method builds uv from source, which requires a compatible Rust toolchain. Upgrading uv When uv is installed via the standalone installer, it can update itself on-demand: $ uv self update Tip Updating uv will re-run the installer and can modify your shell profiles. To disable this behavior, set UV_NO_MODIFY_PATH=1 . When another installation method is used, self-updates are disabled. Use the package manager's upgrade method instead. For example, with pip : $ pip install --upgrade uv Shell autocompletion Tip You can run echo $SHELL to help you determine your shell. To enable shell autocompletion for uv commands, run one of the following: Bash Zsh fish Elvish PowerShell / pwsh echo &#39;eval &quot;$(uv generate-shell-completion bash)&quot;&#39; &gt;&gt; ~/.bashrc echo &#39;eval &quot;$(uv generate-shell-completion zsh)&quot;&#39; &gt;&gt; ~/.zshrc echo &#39;uv generate-shell-completion fish | source&#39; &gt; ~/.config/fish/completions/uv.fish echo &#39;eval (uv generate-shell-completion elvish | slurp)&#39; &gt;&gt; ~/.elvish/rc.elv if (!( Test-Path -Path $PROFILE )) { New-Item -ItemType File -Path $PROFILE -Force } Add-Content -Path $PROFILE -Value &#39;(&amp; uv generate-shell-completion powershell) | Out-String | Invoke-Expression&#39; To enable shell autocompletion for uvx, run one of the following: Bash Zsh fish Elvish PowerShell / pwsh echo &#39;eval &quot;$(uvx --generate-shell-completion bash)&quot;&#39; &gt;&gt; ~/.bashrc echo &#39;eval &quot;$(uvx --generate-shell-completion zsh)&quot;&#39; &gt;&gt; ~/.zshrc echo &#39;uvx --generate-shell-completion fish | source&#39; &gt; ~/.config/fish/completions/uvx.fish echo &#39;eval (uvx --generate-shell-completion elvish | slurp)&#39; &gt;&gt; ~/.elvish/rc.elv if (!( Test-Path -Path $PROFILE )) { New-Item -ItemType File -Path $PROFILE -Force } Add-Content -Path $PROFILE -Value &#39;(&amp; uvx --generate-shell-completion powershell) | Out-String | Invoke-Expression&#39; Then restart the shell or source the shell config file. Uninstallation If you need to remove uv from your system, follow these steps: Clean up stored data (optional): $ uv cache clean $ rm -r &quot; $( uv python dir ) &quot; $ rm -r &quot; $( uv tool dir ) &quot; Tip Before removing the binaries, you may want to remove any data that uv has stored. Remove the uv, uvx, and uvw binaries: macOS and Linux Windows $ rm ~/.local/bin/uv ~/.local/bin/uvx PS&gt; rm $HOME \\. local \\ bin \\ uv . exe PS&gt; rm $HOME \\. local \\ bin \\ uvx . exe PS&gt; rm $HOME \\. local \\ bin \\ uvw . exe Note Prior to 0.5.0, uv was installed into ~/.cargo/bin . The binaries can be removed from there to uninstall. Upgrading from an older version will not automatically remove the binaries from ~/.cargo/bin . Next steps See the first steps or jump straight to the guides to start using uv. September 10, 2025 Back to top Previous Index Next First steps Made with Material for MkDocs Insiders ",
      "fetch_method": "direct-html"
    }
  ]
}