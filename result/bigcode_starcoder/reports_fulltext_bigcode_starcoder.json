{
  "model_id": "bigcode/starcoder",
  "full_texts": [
    {
      "arxiv_id": "https://arxiv.org/abs/1911.02150",
      "full_text": " [1911.02150] Fast Transformer Decoding: One Write-Head is All You Need Skip to main content We gratefully acknowledge support from the Simons Foundation, member institutions , and all contributors. Donate &gt; cs &gt; arXiv:1911.02150 Help | Advanced Search All fields Title Author Abstract Comments Journal reference ACM classification MSC classification Report number arXiv identifier DOI ORCID arXiv author ID Help pages Full text Search open search GO open navigation menu quick links Login Help Pages About --> Computer Science > Neural and Evolutionary Computing arXiv:1911.02150 (cs) [Submitted on 6 Nov 2019] Title: Fast Transformer Decoding: One Write-Head is All You Need Authors: Noam Shazeer View a PDF of the paper titled Fast Transformer Decoding: One Write-Head is All You Need, by Noam Shazeer View PDF Abstract: Multi-head attention layers, as used in the Transformer neural sequence model, are a powerful alternative to RNNs for moving information across and between sequences. While training these layers is generally fast and simple, due to parallelizability across the length of the sequence, incremental inference (where such paralleization is impossible) is often slow, due to the memory-bandwidth cost of repeatedly loading the large &#34;keys&#34; and &#34;values&#34; tensors. We propose a variant called multi-query attention, where the keys and values are shared across all of the different attention &#34;heads&#34;, greatly reducing the size of these tensors and hence the memory bandwidth requirements of incremental decoding. We verify experimentally that the resulting models can indeed be much faster to decode, and incur only minor quality degradation from the baseline. Subjects: Neural and Evolutionary Computing (cs.NE) ; Computation and Language (cs.CL); Machine Learning (cs.LG) Cite as: arXiv:1911.02150 [cs.NE] &nbsp; (or arXiv:1911.02150v1 [cs.NE] for this version) &nbsp; https://doi.org/10.48550/arXiv.1911.02150 Focus to learn more arXiv-issued DOI via DataCite Submission history From: Noam Shazeer [ view email ] [v1] Wed, 6 Nov 2019 00:19:05 UTC (10 KB) Full-text links: Access Paper: View a PDF of the paper titled Fast Transformer Decoding: One Write-Head is All You Need, by Noam Shazeer View PDF TeX Source Other Formats view license Current browse context: cs.NE &lt;&nbsp;prev &nbsp; | &nbsp; next&nbsp;&gt; new | recent | 2019-11 Change to browse by: cs cs.CL cs.LG References &amp; Citations NASA ADS Google Scholar Semantic Scholar 2 blog links ( what is this? ) DBLP - CS Bibliography listing | bibtex Noam Shazeer a export BibTeX citation Loading... BibTeX formatted citation &times; loading... Data provided by: Bookmark Bibliographic Tools Bibliographic and Citation Tools Bibliographic Explorer Toggle Bibliographic Explorer ( What is the Explorer? ) Connected Papers Toggle Connected Papers ( What is Connected Papers? ) Litmaps Toggle Litmaps ( What is Litmaps? ) scite.ai Toggle scite Smart Citations ( What are Smart Citations? ) Code, Data, Media Code, Data and Media Associated with this Article alphaXiv Toggle alphaXiv ( What is alphaXiv? ) Links to Code Toggle CatalyzeX Code Finder for Papers ( What is CatalyzeX? ) DagsHub Toggle DagsHub ( What is DagsHub? ) GotitPub Toggle Gotit.pub ( What is GotitPub? ) Huggingface Toggle Hugging Face ( What is Huggingface? ) Links to Code Toggle Papers with Code ( What is Papers with Code? ) ScienceCast Toggle ScienceCast ( What is ScienceCast? ) Demos Demos Replicate Toggle Replicate ( What is Replicate? ) Spaces Toggle Hugging Face Spaces ( What is Spaces? ) Spaces Toggle TXYZ.AI ( What is TXYZ.AI? ) Related Papers Recommenders and Search Tools Link to Influence Flower Influence Flower ( What are Influence Flowers? ) Core recommender toggle CORE Recommender ( What is CORE? ) Author Venue Institution Topic About arXivLabs arXivLabs: experimental projects with community collaborators arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website. Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them. Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs . Which authors of this paper are endorsers? | Disable MathJax ( What is MathJax? ) About Help contact arXiv Click here to contact arXiv Contact subscribe to arXiv mailings Click here to subscribe Subscribe Copyright Privacy Policy Web Accessibility Assistance arXiv Operational Status Get status notifications via email or slack ",
      "fetch_method": "direct-html"
    },
    {
      "arxiv_id": "https://arxiv.org/abs/2205.14135",
      "full_text": " [2205.14135] FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness Skip to main content We gratefully acknowledge support from the Simons Foundation, member institutions , and all contributors. Donate &gt; cs &gt; arXiv:2205.14135 Help | Advanced Search All fields Title Author Abstract Comments Journal reference ACM classification MSC classification Report number arXiv identifier DOI ORCID arXiv author ID Help pages Full text Search open search GO open navigation menu quick links Login Help Pages About --> Computer Science > Machine Learning arXiv:2205.14135 (cs) [Submitted on 27 May 2022 ( v1 ), last revised 23 Jun 2022 (this version, v2)] Title: FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness Authors: Tri Dao , Daniel Y. Fu , Stefano Ermon , Atri Rudra , Christopher RÃ© View a PDF of the paper titled FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness, by Tri Dao and 4 other authors View PDF Abstract: Transformers are slow and memory-hungry on long sequences, since the time and memory complexity of self-attention are quadratic in sequence length. Approximate attention methods have attempted to address this problem by trading off model quality to reduce the compute complexity, but often do not achieve wall-clock speedup. We argue that a missing principle is making attention algorithms IO-aware -- accounting for reads and writes between levels of GPU memory. We propose FlashAttention, an IO-aware exact attention algorithm that uses tiling to reduce the number of memory reads/writes between GPU high bandwidth memory (HBM) and GPU on-chip SRAM. We analyze the IO complexity of FlashAttention, showing that it requires fewer HBM accesses than standard attention, and is optimal for a range of SRAM sizes. We also extend FlashAttention to block-sparse attention, yielding an approximate attention algorithm that is faster than any existing approximate attention method. FlashAttention trains Transformers faster than existing baselines: 15% end-to-end wall-clock speedup on BERT-large (seq. length 512) compared to the MLPerf 1.1 training speed record, 3$\\times$ speedup on GPT-2 (seq. length 1K), and 2.4$\\times$ speedup on long-range arena (seq. length 1K-4K). FlashAttention and block-sparse FlashAttention enable longer context in Transformers, yielding higher quality models (0.7 better perplexity on GPT-2 and 6.4 points of lift on long-document classification) and entirely new capabilities: the first Transformers to achieve better-than-chance performance on the Path-X challenge (seq. length 16K, 61.4% accuracy) and Path-256 (seq. length 64K, 63.1% accuracy). Subjects: Machine Learning (cs.LG) Cite as: arXiv:2205.14135 [cs.LG] &nbsp; (or arXiv:2205.14135v2 [cs.LG] for this version) &nbsp; https://doi.org/10.48550/arXiv.2205.14135 Focus to learn more arXiv-issued DOI via DataCite Submission history From: Tri Dao [ view email ] [v1] Fri, 27 May 2022 17:53:09 UTC (1,325 KB) [v2] Thu, 23 Jun 2022 17:53:32 UTC (1,653 KB) Full-text links: Access Paper: View a PDF of the paper titled FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness, by Tri Dao and 4 other authors View PDF TeX Source Other Formats view license Current browse context: cs.LG &lt;&nbsp;prev &nbsp; | &nbsp; next&nbsp;&gt; new | recent | 2022-05 Change to browse by: cs References &amp; Citations NASA ADS Google Scholar Semantic Scholar 1 blog link ( what is this? ) a export BibTeX citation Loading... BibTeX formatted citation &times; loading... Data provided by: Bookmark Bibliographic Tools Bibliographic and Citation Tools Bibliographic Explorer Toggle Bibliographic Explorer ( What is the Explorer? ) Connected Papers Toggle Connected Papers ( What is Connected Papers? ) Litmaps Toggle Litmaps ( What is Litmaps? ) scite.ai Toggle scite Smart Citations ( What are Smart Citations? ) Code, Data, Media Code, Data and Media Associated with this Article alphaXiv Toggle alphaXiv ( What is alphaXiv? ) Links to Code Toggle CatalyzeX Code Finder for Papers ( What is CatalyzeX? ) DagsHub Toggle DagsHub ( What is DagsHub? ) GotitPub Toggle Gotit.pub ( What is GotitPub? ) Huggingface Toggle Hugging Face ( What is Huggingface? ) Links to Code Toggle Papers with Code ( What is Papers with Code? ) ScienceCast Toggle ScienceCast ( What is ScienceCast? ) Demos Demos Replicate Toggle Replicate ( What is Replicate? ) Spaces Toggle Hugging Face Spaces ( What is Spaces? ) Spaces Toggle TXYZ.AI ( What is TXYZ.AI? ) Related Papers Recommenders and Search Tools Link to Influence Flower Influence Flower ( What are Influence Flowers? ) Core recommender toggle CORE Recommender ( What is CORE? ) IArxiv recommender toggle IArxiv Recommender ( What is IArxiv? ) Author Venue Institution Topic About arXivLabs arXivLabs: experimental projects with community collaborators arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website. Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them. Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs . Which authors of this paper are endorsers? | Disable MathJax ( What is MathJax? ) About Help contact arXiv Click here to contact arXiv Contact subscribe to arXiv mailings Click here to subscribe Subscribe Copyright Privacy Policy Web Accessibility Assistance arXiv Operational Status Get status notifications via email or slack ",
      "fetch_method": "direct-html"
    },
    {
      "arxiv_id": "https://arxiv.org/abs/2207.14255",
      "full_text": " [2207.14255] Efficient Training of Language Models to Fill in the Middle Skip to main content We gratefully acknowledge support from the Simons Foundation, member institutions , and all contributors. Donate &gt; cs &gt; arXiv:2207.14255 Help | Advanced Search All fields Title Author Abstract Comments Journal reference ACM classification MSC classification Report number arXiv identifier DOI ORCID arXiv author ID Help pages Full text Search open search GO open navigation menu quick links Login Help Pages About --> Computer Science > Computation and Language arXiv:2207.14255 (cs) [Submitted on 28 Jul 2022] Title: Efficient Training of Language Models to Fill in the Middle Authors: Mohammad Bavarian , Heewoo Jun , Nikolas Tezak , John Schulman , Christine McLeavey , Jerry Tworek , Mark Chen View a PDF of the paper titled Efficient Training of Language Models to Fill in the Middle, by Mohammad Bavarian and 6 other authors View PDF Abstract: We show that autoregressive language models can learn to infill text after we apply a straightforward transformation to the dataset, which simply moves a span of text from the middle of a document to its end. While this data augmentation has garnered much interest in recent years, we provide extensive evidence that training models with a large fraction of data transformed in this way does not harm the original left-to-right generative capability, as measured by perplexity and sampling evaluations across a wide range of scales. Given the usefulness, simplicity, and efficiency of training models to fill-in-the-middle (FIM), we suggest that future autoregressive language models be trained with FIM by default. To this end, we run a series of ablations on key hyperparameters, such as the data transformation frequency, the structure of the transformation, and the method of selecting the infill span. We use these ablations to prescribe strong default settings and best practices to train FIM models. We have released our best infilling model trained with best practices in our API, and release our infilling benchmarks to aid future research. Subjects: Computation and Language (cs.CL) Cite as: arXiv:2207.14255 [cs.CL] &nbsp; (or arXiv:2207.14255v1 [cs.CL] for this version) &nbsp; https://doi.org/10.48550/arXiv.2207.14255 Focus to learn more arXiv-issued DOI via DataCite Submission history From: Mohammad Bavarian [ view email ] [v1] Thu, 28 Jul 2022 17:40:47 UTC (188 KB) Full-text links: Access Paper: View a PDF of the paper titled Efficient Training of Language Models to Fill in the Middle, by Mohammad Bavarian and 6 other authors View PDF TeX Source Other Formats view license Current browse context: cs.CL &lt;&nbsp;prev &nbsp; | &nbsp; next&nbsp;&gt; new | recent | 2022-07 Change to browse by: cs References &amp; Citations NASA ADS Google Scholar Semantic Scholar export BibTeX citation Loading... BibTeX formatted citation &times; loading... Data provided by: Bookmark Bibliographic Tools Bibliographic and Citation Tools Bibliographic Explorer Toggle Bibliographic Explorer ( What is the Explorer? ) Connected Papers Toggle Connected Papers ( What is Connected Papers? ) Litmaps Toggle Litmaps ( What is Litmaps? ) scite.ai Toggle scite Smart Citations ( What are Smart Citations? ) Code, Data, Media Code, Data and Media Associated with this Article alphaXiv Toggle alphaXiv ( What is alphaXiv? ) Links to Code Toggle CatalyzeX Code Finder for Papers ( What is CatalyzeX? ) DagsHub Toggle DagsHub ( What is DagsHub? ) GotitPub Toggle Gotit.pub ( What is GotitPub? ) Huggingface Toggle Hugging Face ( What is Huggingface? ) Links to Code Toggle Papers with Code ( What is Papers with Code? ) ScienceCast Toggle ScienceCast ( What is ScienceCast? ) Demos Demos Replicate Toggle Replicate ( What is Replicate? ) Spaces Toggle Hugging Face Spaces ( What is Spaces? ) Spaces Toggle TXYZ.AI ( What is TXYZ.AI? ) Related Papers Recommenders and Search Tools Link to Influence Flower Influence Flower ( What are Influence Flowers? ) Core recommender toggle CORE Recommender ( What is CORE? ) Author Venue Institution Topic About arXivLabs arXivLabs: experimental projects with community collaborators arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website. Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them. Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs . Which authors of this paper are endorsers? | Disable MathJax ( What is MathJax? ) About Help contact arXiv Click here to contact arXiv Contact subscribe to arXiv mailings Click here to subscribe Subscribe Copyright Privacy Policy Web Accessibility Assistance arXiv Operational Status Get status notifications via email or slack ",
      "fetch_method": "direct-html"
    },
    {
      "arxiv_id": "https://arxiv.org/abs/2305.06161",
      "full_text": " [2305.06161] StarCoder: may the source be with you! arXiv Is Hiring a DevOps Engineer Work on one of the world's most important websites and make an impact on open science. View Jobs Skip to main content arXiv Is Hiring a DevOps Engineer View Jobs We gratefully acknowledge support from the Simons Foundation, member institutions , and all contributors. Donate &gt; cs &gt; arXiv:2305.06161 Help | Advanced Search All fields Title Author Abstract Comments Journal reference ACM classification MSC classification Report number arXiv identifier DOI ORCID arXiv author ID Help pages Full text Search open search GO open navigation menu quick links Login Help Pages About --> Computer Science > Computation and Language arXiv:2305.06161 (cs) [Submitted on 9 May 2023 ( v1 ), last revised 13 Dec 2023 (this version, v2)] Title: StarCoder: may the source be with you! Authors: Raymond Li , Loubna Ben Allal , Yangtian Zi , Niklas Muennighoff , Denis Kocetkov , Chenghao Mou , Marc Marone , Christopher Akiki , Jia Li , Jenny Chim , Qian Liu , Evgenii Zheltonozhskii , Terry Yue Zhuo , Thomas Wang , Olivier Dehaene , Mishig Davaadorj , Joel Lamy-Poirier , JoÃ£o Monteiro , Oleh Shliazhko , Nicolas Gontier , Nicholas Meade , Armel Zebaze , Ming-Ho Yee , Logesh Kumar Umapathi , Jian Zhu , Benjamin Lipkin , Muhtasham Oblokulov , Zhiruo Wang , Rudra Murthy , Jason Stillerman , Siva Sankalp Patel , Dmitry Abulkhanov , Marco Zocca , Manan Dey , Zhihan Zhang , Nour Fahmy , Urvashi Bhattacharyya , Wenhao Yu , Swayam Singh , Sasha Luccioni , Paulo Villegas , Maxim Kunakov , Fedor Zhdanov , Manuel Romero , Tony Lee , Nadav Timor , Jennifer Ding , Claire Schlesinger , Hailey Schoelkopf , Jan Ebert , Tri Dao , Mayank Mishra , Alex Gu , Jennifer Robinson , Carolyn Jane Anderson , Brendan Dolan-Gavitt , Danish Contractor , Siva Reddy , Daniel Fried , Dzmitry Bahdanau , Yacine Jernite , Carlos MuÃ±oz Ferrandis , Sean Hughes , Thomas Wolf , Arjun Guha , Leandro von Werra , Harm de Vries View a PDF of the paper titled StarCoder: may the source be with you!, by Raymond Li and 66 other authors View PDF HTML (experimental) Abstract: The BigCode community, an open-scientific collaboration working on the responsible development of Large Language Models for Code (Code LLMs), introduces StarCoder and StarCoderBase: 15.5B parameter models with 8K context length, infilling capabilities and fast large-batch inference enabled by multi-query attention. StarCoderBase is trained on 1 trillion tokens sourced from The Stack, a large collection of permissively licensed GitHub repositories with inspection tools and an opt-out process. We fine-tuned StarCoderBase on 35B Python tokens, resulting in the creation of StarCoder. We perform the most comprehensive evaluation of Code LLMs to date and show that StarCoderBase outperforms every open Code LLM that supports multiple programming languages and matches or outperforms the OpenAI code-cushman-001 model. Furthermore, StarCoder outperforms every model that is fine-tuned on Python, can be prompted to achieve 40\\% pass@1 on HumanEval, and still retains its performance on other programming languages. We take several important steps towards a safe open-access model release, including an improved PII redaction pipeline and a novel attribution tracing tool, and make the StarCoder models publicly available under a more commercially viable version of the Open Responsible AI Model license. Subjects: Computation and Language (cs.CL) ; Artificial Intelligence (cs.AI); Programming Languages (cs.PL); Software Engineering (cs.SE) Cite as: arXiv:2305.06161 [cs.CL] &nbsp; (or arXiv:2305.06161v2 [cs.CL] for this version) &nbsp; https://doi.org/10.48550/arXiv.2305.06161 Focus to learn more arXiv-issued DOI via DataCite Submission history From: Harm de Vries [ view email ] [v1] Tue, 9 May 2023 08:16:42 UTC (640 KB) [v2] Wed, 13 Dec 2023 14:44:10 UTC (662 KB) Full-text links: Access Paper: View a PDF of the paper titled StarCoder: may the source be with you!, by Raymond Li and 66 other authors View PDF HTML (experimental) TeX Source Other Formats view license Current browse context: cs.CL &lt;&nbsp;prev &nbsp; | &nbsp; next&nbsp;&gt; new | recent | 2023-05 Change to browse by: cs cs.AI cs.PL cs.SE References &amp; Citations NASA ADS Google Scholar Semantic Scholar 1 blog link ( what is this? ) a export BibTeX citation Loading... BibTeX formatted citation &times; loading... Data provided by: Bookmark Bibliographic Tools Bibliographic and Citation Tools Bibliographic Explorer Toggle Bibliographic Explorer ( What is the Explorer? ) Connected Papers Toggle Connected Papers ( What is Connected Papers? ) Litmaps Toggle Litmaps ( What is Litmaps? ) scite.ai Toggle scite Smart Citations ( What are Smart Citations? ) Code, Data, Media Code, Data and Media Associated with this Article alphaXiv Toggle alphaXiv ( What is alphaXiv? ) Links to Code Toggle CatalyzeX Code Finder for Papers ( What is CatalyzeX? ) DagsHub Toggle DagsHub ( What is DagsHub? ) GotitPub Toggle Gotit.pub ( What is GotitPub? ) Huggingface Toggle Hugging Face ( What is Huggingface? ) Links to Code Toggle Papers with Code ( What is Papers with Code? ) ScienceCast Toggle ScienceCast ( What is ScienceCast? ) Demos Demos Replicate Toggle Replicate ( What is Replicate? ) Spaces Toggle Hugging Face Spaces ( What is Spaces? ) Spaces Toggle TXYZ.AI ( What is TXYZ.AI? ) Related Papers Recommenders and Search Tools Link to Influence Flower Influence Flower ( What are Influence Flowers? ) Core recommender toggle CORE Recommender ( What is CORE? ) Author Venue Institution Topic About arXivLabs arXivLabs: experimental projects with community collaborators arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website. Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them. Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs . Which authors of this paper are endorsers? | Disable MathJax ( What is MathJax? ) About Help contact arXiv Click here to contact arXiv Contact subscribe to arXiv mailings Click here to subscribe Subscribe Copyright Privacy Policy Web Accessibility Assistance arXiv Operational Status Get status notifications via email or slack ",
      "fetch_method": "direct-html"
    },
    {
      "arxiv_id": "https://arxiv.org/pdf/2305.06161.pdf",
      "full_text": "Published in Transactions on Machine Learning Research (12/2023)\nStarCoder: may the source be with you!\nRaymond Li2\nLoubna Ben Allal1\nYangtian Zi4\nNiklas Muennighoff1\nDenis Kocetkov2\nChenghao Mou5\nMarc Marone8\nChristopher Akiki9,10\nJia Li5\nJenny Chim11\nQian Liu13\nEvgenii Zheltonozhskii14\nTerry Yue Zhuo15,16\nThomas Wang1\nOlivier Dehaene1\nMishig\nDavaadorj1\nJoel Lamy-Poirier2\nJoÃ£o Monteiro2\nOleh Shliazhko2\nNicolas Gontier2\nNicholas Meade6,17\nArmel Zebaze1\nMing-Ho Yee4\nLogesh Kumar Umapathi18\nJian Zhu19\nBenjamin Lipkin20\nMuhtasham Oblokulov21\nZhiruo Wang7\nRudra Murthy22\nJason\nStillerman23\nSiva Sankalp Patel22\nDmitry Abulkhanov5\nMarco Zocca24\nManan Dey25\nZhihan Zhang26\nNour Fahmy27\nUrvashi Bhattacharyya28\nWenhao Yu26\nSwayam Singh30\nSasha Luccioni1\nPaulo Villegas31\nMaxim Kunakov32\nFedor Zhdanov32\nManuel Romero5\nTony Lee33\nNadav Timor34\nJennifer Ding35\nClaire Schlesinger4\nHailey Schoelkopf 37\nJan Ebert38\nTri Dao33\nMayank Mishra22\nAlex Gu20\nJennifer\nRobinson3\nCarolyn Jane Anderson36\nBrendan Dolan-Gavitt29\nDanish Contractor5\nSiva\nReddy2,6\nDaniel Fried7\nDzmitry Bahdanau2\nYacine Jernite1\nCarlos MuÃ±oz Ferrandis1\nSean Hughes3\nThomas Wolf 1\nArjun Guha4,12\nLeandro von Werra1,â\nHarm de Vries2,â\n1Hugging Face\n2ServiceNow Research\n3ServiceNow\n4Northeastern University\n5Independent\n6Mila\n7Carnegie Mellon University\n8Johns Hopkins University\n9Leipzig University\n10ScaDS.AI\n11Queen Mary\nUniversity of London\n12Roblox\n13Sea AI Lab\n14Technion â Israel Institute of Technology\n15Monash\nUniversity\n16CSIROâs Data61\n17McGill University\n18Saama AI Research Lab\n19University of British\nColumbia\n20MIT\n21Technical University of Munich\n22IBM Research\n23University of Vermont\n24UnfoldML\n25SAP\n26University of Notre Dame\n27Columbia University\n28Discover Dollar Pvt Ltd\n29NYU\n30University of Allahabad\n31Telefonica I+D\n32Toloka\n33Stanford University\n34Weizmann\nInstitute of Science\n35The Alan Turing Institute\n36Wellesley College\n37Eleuther AI\n38Forschungszentrum JÃ¼lich\nCorresponding authors (â) can be contacted at contact@bigcode-project.org\nReviewed on OpenReview: https://openreview.net/forum?id=KoFOg41haE\nAbstract\nThe BigCode community, an open-scientific collaboration working on the responsible de-\nvelopment of Large Language Models for Code (Code LLMs), introduces StarCoder and\nStarCoderBase: 15.5B parameter models with 8K context length, infilling capabilities and fast\nlarge-batch inference enabled by multi-query attention. StarCoderBase is trained on 1 trillion\ntokens sourced from The Stack (Kocetkov et al., 2022), a large collection of permissively\nlicensed GitHub repositories with inspection tools and an opt-out process. We fine-tuned\nStarCoderBase on 35B Python tokens, resulting in the creation of StarCoder. We perform\nthe most comprehensive evaluation of Code LLMs to date and show that StarCoderBase\noutperforms every open Code LLM that supports multiple programming languages and\nmatches or outperforms the OpenAI code-cushman-001 model. Furthermore, StarCoder\noutperforms every model that is fine-tuned on Python and still retains its performance on\nother programming languages. We take several important steps towards a safe open-access\nmodel release, including an improved PII redaction pipeline and a novel attribution tracing\ntool, and make the StarCoder models publicly available under a more commercially viable\nversion of the Open Responsible AI Model license.\n1\narXiv:2305.06161v2  [cs.CL]  13 Dec 2023\n\nPublished in Transactions on Machine Learning Research (12/2023)\n1\nIntroduction\nGenerative AI and large language models (LLMs; Brown et al., 2020; Chen et al., 2021; Chowdhery et al.,\n2022; Zhang et al., 2022; OpenAI, 2023a) are predicted to significantly impact the workforce in the coming\nyears (Eloundou et al., 2023; Bommasani et al., 2021; World Economic Forum, 2023) by boosting worker\nproductivity. LLMs trained on code (Code LLMs) have seen particularly fast adoption: Microsoftâs Copilot\nhas attracted over 1 million professional developers (Euronews, 2023) and GitHub reports that Copilot\nusers rely on it to produce 35% of the code they write for some languages (Thompson, 2022). However, the\ndevelopment and use of LLMs has raised concerns of copyright, privacy, and openness.\nCopyright concerns arise in many jurisdictions, including the U.S. and E.U. , regarding the rights of content\ncreators whose public data is used to train language models. It has been questioned whether machine learning\nmodels trained on such data fall under fair-use doctrine in the U.S. (Kuhn, 2022; Butterick, 2022; Rothchild\n& Rothchild, 2022), with fair use being most likely when the model generates novel content dissimilar\nto any copyrighted training data (Lemley & Casey, 2020; Levendowski, 2018). Henderson et al. (2023),\ntherefore, suggest LLM developers should provide additional tools to ensure these models comply with current\ncopyright laws. It is important to mention that these legal issues are not only the subject of scholarly debates:\nlawsuits have already been filed against GitHub Copilot (DOE 1 v. and GitHub, Inc., 2022) as well as Stable\nDiffusion (Andersen et al v. Stability AI et al, 2023).\nConcerns about personal information led Italy to temporarily ban ChatGPT and launch an ongoing investi-\ngation into OpenAIâs compliance with the E.U.âs General Data Protection Regulation (GDPR) (BBC, 2023).\nAccording to these regulations (European Council, 2018; Lomas, 2022), organizations that process personal\ninformation must have a valid legal basis. These laws could potentially affect LLM developers who gather\nvast amounts of public data from the internet, which may include personal information. Obtaining explicit\nconsent from data creators is difficult at this scale, and it is uncertain whether other legal grounds exist for\nprocessing this personal information. Moreover, even with a valid legal basis, GDPR mandates that data\nprocessors inform individuals as to how their data is being processed and provide data access controls, such\nas the right to have data deleted or to modify erroneous data. This would require LLM providers to be\ntransparent about the data they have collected and provide tooling for individuals to inspect their data and\nhave the possibility to delete it.\nThe lack of transparency and openness surrounding the development processes of generative AI models\nhas also raised concerns in the scientific community. Many models are closed-access to varying degrees:\nfrom being available only within the organization that developed them (Chowdhery et al., 2022; Hoffmann\net al., 2022) to being accessible publicly through a paid API but with many details on their development\nprocess hidden (Brown et al., 2020; OpenAI, 2023a). While API access allows researchers to experiment with\nthese models, it limits their ability to research LLM safety (Perez et al., 2022), inspect the modelsâ inner\nworkings (Olsson et al., 2022), and contribute to model improvements (Togelius & Yannakakis, 2023).\nWe use âopen-accessâ to refer to models whose weights are public. Although other open-access models\nexist, the level of openness still varies across these projects; and some models with released weights have\nrestrictions on model distribution (Touvron et al., 2023), or do not release their training datasets (Nijkamp\net al., 2023; Zhang et al., 2022; Fried et al., 2022). Even in cases when models and training data are both\nreleased permissively (Raffel et al., 2020; Tay et al., 2022), external researchers typically do not have an\nopportunity to participate in guiding the development of industry-produced models. In contrast, other\nLLM development projects have taken a fully open approach which aims to allow for community inputs\ninto model development, release training data, and enable external audits throughout the full development\nprocess (Solaiman, 2023). One example is the BigScience research workshop (BigScience Workshop, 2022),\nan open scientific collaboration (Akiki et al., 2022) comprising hundreds of researchers collaborating to\nrelease BLOOM, a multi-lingual LLM (Scao et al., 2022; Muennighoff et al., 2022). Similarly, EleutherAI, a\ngrassroots-turned-nonprofit research initiative, has released open-access LLMs including GPT-NeoX (Black\net al., 2022), GPT-J (Wang & Komatsuzaki, 2021), and Pythia (Biderman et al., 2023), as well as the\nassociated training data (Gao et al., 2021a).\nIn this paper, we describe StarCoder and StarCoderBase, open-access code LLMs developed and released by\nthe BigCode community, with a focus on respecting copyright, privacy, transparency, and community-driven\n2\n\nPublished in Transactions on Machine Learning Research (12/2023)\nmodel development. The project is an open-scientific collaboration focusing on the responsible development\nof LLMs for code. It is co-stewarded by two industry research labs and comprises more than 600 members\nfrom diverse academic institutes and industry labs. The Stack (Kocetkov et al., 2022) is a publicly available\npre-training dataset for Code LLMs with a transparent data governance framework. The Stack consists of\n6.4 TB of permissively licensed source code in 384 programming languages, and includes 54 GB of GitHub\nissues and repository-level metadata in the v1.2 version of the dataset. The dataset comes with âAm I in The\nStackâ, a governance tool for developers to check whether their source code is part of the dataset, and an\nopt-out process for those who wish to have their code removed from the dataset.\nStarCoder and StarCoderBase are both 15.5B parameter models trained on permissively licensed data from\nThe Stack. We trained StarCoderBase on 1 trillion tokens sourced from 80+ programming languages, GitHub\nissues, Git commits, and Jupyter notebooks. We fine-tuned StarCoderBase on another 35B Python tokens,\nleading to the StarCoder model. Both StarCoder models come with a novel combination of architectural\nfeatures, such as an 8K token context length (Dao et al., 2022), infilling capabilities through Fill-in-the-\nMiddle (FIM; Bavarian et al., 2022), and fast large-batch inference through Multi-Query-Attention (MQA;\nShazeer, 2019). We present an extensive evaluation of the StarCoder models and release a demo along with\nan integrated attribution tool that can help users locate model generations that may have been copied from\nthe training set. Overall, our contributions can be summarized as follows.\nâ¢ We release StarCoderBase and StarCoder, open-access Code LLMs trained on 80+ programming\nlanguages that support a novel combination of capabilities and architectural features unavailable in\nother open Code LLMs.\nâ¢ We perform the most comprehensive evaluation of Code LLMs to date using a diverse set of\nbenchmarks (Lai et al., 2022; Cassano et al., 2023; Pearce et al., 2022; Fried et al., 2022; Yee & Guha,\n2023; Austin et al., 2021; Chen et al., 2021; Ben Allal et al., 2022; Hendrycks et al., 2020; Reddy\net al., 2019; Cobbe et al., 2021; Nadeem et al., 2021; Gehman et al., 2020; Liang et al., 2022), and\nshow that:\nâ StarCoder outperforms every open LLM for code that supports multiple programming lan-\nguages (Nijkamp et al., 2023; Zheng et al., 2023);\nâ StarCoder matches or outperforms the OpenAI code-cushman-001 model; and\nâ When fine-tuned on Python, StarCoder substantially outperforms existing LLMs that are also\nfine-tuned on Python.\nâ¢ We take important steps towards a safe open model release:\nâ We release StarCoder under an OpenRAIL-M license agreement, which enables royalty-free access,\nuse, and distribution of the model while embedding a set of use restrictions in identified critical\nscenarios. We have worked on a version of the license agreement that: (i) is more commercially\nviable for companies wishing to use and distribute the model and (ii) promotes transparency and\nunderstanding through the sharing of AI documentation such as model cards (Mitchell et al.,\n2019);\nâ We incorporate a new attribution tool into the VSCode demo that can help users detect and locate\nmodel generations that may have been copied from the training set. This is achieved through a\ntwo-step process that involves a lightweight membership check followed by a search over a BM25\nindex (Section 9); and\nâ We have significantly improved the PII redaction pipeline by collecting a PII dataset containing\n12,000 files with 22,950 annotated entities. We fine-tuned our own encoder model (StarEncoder)\non this dataset, resulting in a robust PII detection model (Section 4).\n2\nRelated Work\nLanguage models\nEarly efforts to build large-scale language models used n-grams and simple smoothing\ntechniques (Brants et al., 2007; Heafield et al., 2013; Buck et al., 2014). Other approaches applied various\n3\n\nPublished in Transactions on Machine Learning Research (12/2023)\ntypes of neural networks architectures, such as feedforward networks (Bengio et al., 2000) and recurrent\nnetworks (Mikolov et al., 2010; Jozefowicz et al., 2016), to the language modeling task. The Transformer\narchitecture (Vaswani et al., 2017) led to the development of highly scalable language models (Radford et al.,\n2019; Brown et al., 2020), which have shown a predictable relationship between language modeling loss and\nscaling factors such as the model size, number of training tokens, and compute budget (Kaplan et al., 2020;\nHoffmann et al., 2022).\nLanguage Models for Code\nLanguage models were initially applied to code by Hindle et al. (2012), but\nrelied on n-gram models trained at comparatively small scale. Many neural architectures developed in NLP\nwere also applied successfully to code, including encoder-only models for producing code representations (Feng\net al., 2020; Kanade et al., 2020) and encoder-decoder models for translation, editing, summarization, and\nlanguage-to-code tasks (Wang et al., 2021; Ahmad et al., 2021; Li et al., 2022). Decoder-only Transformer\narchitectures have produced strong generative models of code, typically by training on mixtures of text\nand code from GitHub (Chen et al., 2021; Austin et al., 2021; Fried et al., 2022; Zheng et al., 2023;\nNijkamp et al., 2023). Most of these models have not been fully open, but PolyCoder (Xu et al., 2022) and\nSantaCoder (Ben Allal et al., 2023) are notable exceptions and have both open models and training data.\nHowever, these models are relatively small (2.7B and 1.1B parameters, respectively) and are trained on less\ndata (< 300GB of code) than we explore in this work.\nClosed-access LLMs\nSeveral large tech companies have developed top-performing LLMs without releasing\nthem. Examples include Googleâs PaLM (Chowdhery et al., 2022) and LaMDA (Thoppilan et al., 2022),\nDeepMindâs Chinchilla (Hoffmann et al., 2022) and Gopher (Rae et al., 2021), and NVIDIAâs Megatron-Turing\nNLG (Smith et al., 2022). OpenAI and other AI startups, including Cohere1, Anthropic2, and Aleph Alpha3,\noffer LLMs as a paid API service. These companies did not release model weights nor provide comprehensive\ninformation on the methodology used to create these models. OpenAI has published several technical\nreports of the GPT family of models (Brown et al., 2020; Chen et al., 2021; OpenAI, 2023a), showcasing the\ncapabilities of their models.\nOpen-access LLMs\nNumerous open-access LLMs have been released to the AI community, although\nthey are generally not as strong as closed-access ones. In this paper, we use the term âopen-access LLMâ\nwhen the model weights are publicly available. We still note that there are significant differences between\nopen-access models in how transparent they have been about the training data and filtering techniques. For\ninstance, EleutherAI released GPT-NeoX-20B (Black et al., 2022) and GPT-J-6B (Wang & Komatsuzaki,\n2021), as well as the dataset these models were trained on (Gao et al., 2021a). Google released UL2-20B (Tay\net al., 2022), an encoder-decoder model trained on the publicly available C4 (Raffel et al., 2020). Tsinghua\nUniversity released the weights of GLM-130B (Zeng et al., 2022), a Chinese-English LLM, and CodeGeeX-\n13B (Zheng et al., 2023), a LLM for coding applications, without releasing the training sets. Salesforce\nreleased CodeGen-Mono-16B (Nijkamp et al., 2023) without disclosing a proprietary Python dataset. Meta\nreleased the OPT (Zhang et al., 2022), LLaMA (Touvron et al., 2023), and InCoder models (Fried et al.,\n2022) under a non-commercial license and only provided high-level details about the data collection and\nfiltering process.\n3\nData Curation and Cleaning\nThis section describes how we processed the training data of StarCoderBase. We restrict the training set to\nThe Stack v1.2 (Kocetkov et al., 2022), which exclusively contains data from permissively licensed4 GitHub\nrepositories. At the time of the data processing, 44 people opted out of The Stack. Below, we describe how\nwe further cleaned the data by combining heuristic filtering and manual inspection.\n1https://cohere.com/\n2https://www.anthropic.com/\n3https://www.aleph-alpha.com/\n4See https://blueoakcouncil.org/ to learn more about permissive licenses and access a comprehensive collection of such\nlicenses.\n4\n\nPublished in Transactions on Machine Learning Research (12/2023)\n3.1\nProgramming Languages\nSelection of programming languages\nFrom the 358 programming languages in The Stack, we selected\n86 languages. The assignment of data to programming languages was performed based solely on file extension\n(Kocetkov et al., 2022). We included all programming languages with more than 500 MB of data, as well as\nlanguages that were ranked in the top 50 on Githut 2.0 or the December 2022 TIOBE Index of programming\nlanguage popularity. In addition, we included dialects of already selected programming languages (e.g.,\nRacket and Scheme for Lisp). We excluded configuration languages (Nix, Puppet, etc.) and languages that\nare no longer actively supported (ActionScript). We also included data formats like JSON and YAML but\nlimited its data volume (see âJSON and YAMLâ paragraph for details). The full list of selected programming\nlanguages can be found in Tables 1 and 2. Out of the languages present in MultiPL-E (Cassano et al., 2023),\nonly D and Swift were not included in the training set. For D, language misclassification of the files led to less\nthan 2MB of data in The Stack (Kocetkov et al., 2022). Swift was excluded from the final list of languages\ndue to human error.\nVisual inspection\nWe performed a visual inspection to ensure that we only retain data of high quality. To\nachieve this, we randomly selected 30,000 files from The Stack for each programming language, categorized\nthem by extension, and kept a maximum of 1,000 files for each extension. We then reached out to our\ncommunity for assistance with data inspection. We instructed the annotators to go through 50â100 files\nand confirm if the data appeared to be normal code written by humans, as opposed to text, data, or a\nsingle long line of autogenerated code. We also asked annotators to determine whether we should use our\ndefault alpha-numeric filter (which requires over 25% alpha-numeric symbols) and long-line filter (which\nrequires lines to be less than 1,000 characters) for a given file extension. Eighteen community annotators\nevaluated 300 programming language extensions. After inspection, we excluded 36 extensions and eliminated\nthe long-line filter for 27 extensions. The complete outcomes of the data inspection, including annotator\nremarks, can be found in this Google sheet.\nXML filter\nAs we inspected the data, we noticed that certain extensions often consisted of XML files. For\nexample, the .sld extension had more than 50% of its files in XML format. To address this, we implemented\na simple XML filter that checked for the presence of â<?xml version=â within the first 100 characters of\nthe file. This filter proved to be effective and produced few false positives. Hence, we applied it to all\nprogramming languages except for XSLT, which uses XML syntax.\nAlpha filter\nDuring our investigation, we discovered that certain extensions, such as MATLAB, contained\nnumerous data files that frequently stored large tensors. To identify these files, we developed an alpha filter\nthat removed files with fewer than 25% alphabetic characters. However, when we tested this filter on a small\nsubset of data, we observed a high rate of false positives for certain programming languages, such as Assembly.\nTo address this issue, we focused on the 25 extensions with the highest number of detections and manually\nverified whether or not the alpha filter should be applied.\nHTML\nWe designed a custom HTML filter that targets excessive HTML boilerplate and links. We took\ninto account the ratio of visible text in each file and only kept those files where the visible text makes up at\nleast 20% of the HTML code and has a minimum length of 100 characters.\nJSON and YAML\nJSON and YAML files are naturally more data-heavy than other languages in The\nStack. To remove most of the data files, we applied the following filters. For YAML, we kept files with\n50â5000 characters, an average line length smaller than 100, a maximum line length smaller than 1000, and\nmore than 50% alphabetic characters. These filters remove around 20% of the files and 90% of the volume.\nFor JSON, we kept files with 50â5000 characters and more than 50% alphabetic characters, which removes\naround 70% of the files and 98% of the volume.\n5\n\nPublished in Transactions on Machine Learning Research (12/2023)\nLanguage\nAfter dedup\nAfter filters and decont.\nWeight\nPercentage\nNum. files\nVolume (GB)\nNum. files\nVolume (GB)\nada\n31,291\n0.30\n30,934\n0.26\n0.26\n0.034\nagda\n17,608\n0.07\n17,554\n0.07\n0.07\n0.009\nalloy\n5,374\n0.01\n5,368\n0.01\n0.01\n0.001\nantlr\n7,983\n0.05\n7,917\n0.05\n0.05\n0.007\napplescript\n4,906\n0.01\n4,737\n0.01\n0.01\n0.001\nassembly\n248,396\n1.58\n247,919\n1.56\n1.56\n0.203\naugeas\n195\n0.00\n180\n0.00\n0.00\n0\nawk\n10,430\n0.02\n10,289\n0.02\n0.02\n0.003\nbatchfile\n252,514\n0.29\n239,568\n0.23\n0.23\n0.03\nbluespec\n5,940\n0.03\n5,928\n0.03\n0.03\n0.004\nc\n8,625,559\n57.43\n8,536,791\n53.89\n53.89\n7.027\nc-sharp\n10,839,399\n46.29\n10,801,285\n44.66\n44.66\n5.823\nclojure\n126,191\n0.49\n125,163\n0.46\n0.46\n0.06\ncmake\n186,517\n0.45\n186,375\n0.45\n0.45\n0.059\ncoffeescript\n227,889\n0.69\n226,209\n0.64\n0.64\n0.083\ncommon-lisp\n101,370\n1.68\n98,733\n1.40\n1.40\n0.183\ncpp\n6,377,914\n50.89\n6,353,527\n48.92\n48.92\n6.379\ncss\n2,994,829\n22.61\n2,721,616\n11.93\n3.00\n0.391\ncuda\n58,355\n0.59\n58,151\n0.56\n0.56\n0.073\ndart\n932,583\n3.86\n928,415\n3.66\n3.66\n0.477\ndockerfile\n572,186\n0.42\n571,506\n0.42\n0.42\n0.055\nelixir\n282,110\n0.74\n281,016\n0.71\n0.71\n0.093\nelm\n62,861\n0.34\n62,033\n0.30\n0.30\n0.039\nemacs-lisp\n54,768\n0.43\n52,838\n0.41\n0.41\n0.053\nerlang\n99,368\n0.73\n98,447\n0.70\n0.70\n0.091\nf-sharp\n127,161\n0.90\n124,066\n0.61\n0.61\n0.08\nfortran\n165,446\n1.84\n158,792\n1.78\n1.78\n0.232\nglsl\n175,576\n0.57\n167,701\n0.40\n0.40\n0.052\ngo\n4,730,461\n25.74\n4,700,526\n23.78\n23.78\n3.101\ngroovy\n251,627\n0.94\n250,834\n0.91\n0.91\n0.119\nhaskell\n544,969\n2.36\n541,454\n2.23\n2.23\n0.291\nhtml\n9,533,367\n146.76\n3,299,965\n29.36\n29.36\n3.828\nidris\n8,060\n0.03\n8,042\n0.03\n0.03\n0.004\nisabelle\n5,086\n0.09\n5,001\n0.08\n0.08\n0.01\njava\n20,151,565\n89.30\n20,071,773\n86.94\n86.94\n11.336\njava-server-pages\n214,133\n1.03\n210,816\n0.98\n0.98\n0.128\njavascript\n21,108,587\n141.65\n19,544,285\n64.71\n64.71\n8.437\njson\n17,012,912\n338.34\n4,751,547\n5.62\n1.00\n0.13\njulia\n298,672\n1.54\n295,364\n1.31\n1.31\n0.171\nkotlin\n2,242,771\n5.77\n2,239,354\n5.68\n5.68\n0.741\nlean\n16,891\n0.10\n16,870\n0.09\n0.09\n0.012\nliterate-agda\n523\n0.01\n523\n0.01\n0.01\n0.001\nliterate-coffeescript\n1,138\n0.01\n1,133\n0.01\n0.01\n0.001\nliterate-haskell\n6,135\n0.05\n6,104\n0.05\n0.05\n0.007\nlua\n558,861\n3.28\n549,459\n2.87\n2.87\n0.374\nmakefile\n661,424\n1.49\n657,349\n1.31\n1.31\n0.171\nmaple\n1,259\n0.01\n1,152\n0.01\n0.01\n0.001\nmarkdown\n21,045,171\n75.25\n21,029,287\n74.93\n74.93\n9.77\nmathematica\n26,895\n1.72\n22,653\n1.25\n1.25\n0.163\nmatlab\n967\n0.04\n93\n0.00\n0.00\n0\nTable 1: Overview of the training data for StarCoder. For the selected programming languages, we show the\nnumber of files and data volume after near-deduplication, as well as after filtering. See also Table 2.\n6\n\nPublished in Transactions on Machine Learning Research (12/2023)\nLanguage\nAfter dedup\nAfter filters and decont.\nWeight\nPercentage\nNum. files\nVolume (GB)\nNum. files\nVolume (GB)\nocaml\n159,734\n1.11\n158,356\n1.03\n1.03\n0.134\npascal\n118,675\n1.71\n110,981\n1.68\n1.68\n0.219\nperl\n392,108\n2.63\n365,491\n2.23\n2.23\n0.291\nphp\n15,904,518\n66.84\n15,683,017\n60.89\n60.89\n7.939\npowershell\n271,487\n1.25\n267,627\n1.12\n1.12\n0.146\nprolog\n1,023\n0.01\n968\n0.01\n0.01\n0.001\nprotocol-buffer\n98,246\n0.44\n97,167\n0.31\n0.31\n0.04\npython\n12,962,249\n64.30\n12,866,649\n60.40\n60.40\n7.875\nr\n39,194\n0.30\n39,042\n0.30\n0.30\n0.039\nracket\n4,201\n0.04\n3,688\n0.03\n0.03\n0.004\nrestructuredtext\n905,679\n3.42\n896,880\n3.32\n3.32\n0.433\nrmarkdown\n5,389\n0.06\n5,386\n0.06\n0.06\n0.008\nruby\n3,405,374\n7.14\n3,390,320\n6.81\n6.81\n0.888\nrust\n1,386,585\n9.53\n1,380,468\n9.11\n9.11\n1.188\nsas\n9,772\n0.13\n9,226\n0.12\n0.12\n0.016\nscala\n1,362,426\n4.86\n1,355,788\n4.69\n4.69\n0.612\nscheme\n44,261\n0.30\n41,890\n0.20\n0.20\n0.026\nshell\n2,236,434\n3.38\n2,206,327\n3.09\n3.09\n0.403\nsmalltalk\n592,999\n0.74\n587,748\n0.58\n0.58\n0.076\nsolidity\n164,242\n1.21\n153,194\n0.85\n0.85\n0.111\nsparql\n14,173\n0.04\n13,716\n0.04\n0.04\n0.005\nsql\n994,019\n12.22\n975,420\n11.09\n11.09\n1.446\nstan\n5,441\n0.01\n5,429\n0.01\n0.01\n0.001\nstandard-ml\n48,995\n0.52\n19,630\n0.19\n0.19\n0.025\nstata\n31,282\n0.41\n24,208\n0.33\n0.33\n0.043\nsystemverilog\n46,915\n0.41\n46,270\n0.39\n0.39\n0.051\ntcl\n50,579\n0.40\n49,335\n0.35\n0.35\n0.046\ntcsh\n4,911\n0.02\n4,806\n0.02\n0.02\n0.003\ntex\n547,888\n5.44\n522,778\n5.20\n5.20\n0.678\nthrift\n4,663\n0.01\n4,661\n0.01\n0.01\n0.001\ntypescript\n10,637,070\n28.82\n10,547,331\n26.52\n26.52\n3.458\nverilog\n77\n0.001\n75\n0.001\n0.001\n0\nvhdl\n60,027\n1.12\n58,208\n0.94\n0.94\n0.123\nvisual-basic\n163,291\n1.49\n161,239\n1.42\n1.42\n0.185\nxslt\n43,095\n0.56\n6,513\n0.05\n0.05\n0.007\nyacc\n25,775\n0.41\n7,451\n0.11\n0.11\n0.014\nyaml\n5,282,081\n28.36\n3,995,948\n3.76\n1.00\n0.13\nzig\n15,913\n0.18\n15,850\n0.18\n0.18\n0.023\nGitHub issues\nâ¼30,900,000\n54.40\n54.40\n7.093\nGit commits\n7,674,345\n64.00\n32.00\n4.172\nnotebook scripts\n914,000\n7.12\n7.12\n0.928\nnotebook structured\n668,743\n6.00\n6.00\n0.782\n305,929,658\n815.68\n799.37\n100\nTable 2: Overview of the training data for StarCoder. For the selected programming languages, we show the\nnumber of files and data volume after near-deduplication, as well as after filtering. See also Table 1.\n3.2\nJupyter notebooks\nAll Jupyter notebooks were retrieved from the Stack. We transformed Jupyter notebooks into two different\ndatasets: Jupyter â scripts and Jupyter â structured.\n7\n\nPublished in Transactions on Machine Learning Research (12/2023)\nLanguage\nNum files\nPercentage\npython\n1,392,432\n97.170\njulia\n16,730\n1.167\nr\n11,034\n0.77\nscala\n1,899\n0.133\nbash\n1,441\n0.101\njava\n1,319\n0.092\nq-sharp\n1,273\n0.089\ncpp\n1,081\n0.075\nc-sharp\n1,048\n0.073\nmatlab\n908\n0.063\npowershell\n769\n0.054\njavascript\n592\n0.041\nhaskell\n535\n0.037\nscheme\n484\n0.034\ngroovy\n432\n0.03\nf-sharp\n385\n0.027\nocaml\n279\n0.019\nrust\n134\n0.009\nclojure\n96\n0.007\ntypescript\n72\n0.005\nmaxima\n31\n0.002\ncoconut\n6\n0\nmarkdown\n5\n0\nwolfram language\n4\n0\ntcl\n3\n0\nTotal\n1,432,992\n100\nTable 3: Overview of the initially collected Jupyter scripts, with the number of files and the percentage.\nJupyter â scripts\nWe utilize Jupytext5 to convert notebooks to scripts. It is an actively maintained\nsoftware that currently supports 31 programming languages. To initiate the conversion process, Jupytext\nrequires the identification of the specific programming languages within each notebook. We extracted this\ninformation from the metadata of each respective notebook. However, more than 30,000 notebooks lacked\nany programming language information, making it difficult to convert them to the script format. To address\nthis issue, we incorporated the use of Guesslang,6 an open-source library that employs machine learning\ntechniques to identify the programming languages of source code. By applying a probability threshold\ngreater than or equal to 0.5, we successfully reduced the number of unidentified notebooks to 6,400 using\nGuesslang. Ultimately, we amassed 1,432,992 scripts through the utilization of Jupytext. The distribution of\nprogramming languages among these scripts is presented in Table 3. We evaluated language coverage by\nrandomly selecting 100 files from the transformed scripts, ensuring that all programming languages were\nrepresented within this sample.\nJupyter â structured\nTo create this dataset, we first filtered out notebooks that did not contain any\nPython code or Markdown text. The information on the programming language in the metadata of each\nnotebook was used as the criterion to filter out non-Python notebooks. Only notebooks explicitly marked as\nâPythonâ in the metadata were kept. Then for each notebook, consecutive Markdown blocks or code blocks\nwere merged into a large Markdown or code block respectively. Eventually, we ended up with consecutive\ncode-text pairs in temporal order grouped by each notebook. In general, each Jupyter code-text pair contained\nthe Markdown text immediately preceding the code block and the Python code, which forms a natural\n5https://jupytext.readthedocs.io/\n6https://guesslang.readthedocs.io/\n8\n\nPublished in Transactions on Machine Learning Research (12/2023)\ninstruction pair. We also included the formatted output of a code block if the output cell was non-empty;\notherwise, it was marked by a special <empty_output> token. If consecutive code blocks have multiple output\ncells before merging, we only retain the output of the last code block. After these preprocessing steps, we\nended up with 1,045,605 structured Jupyter notebooks.\n3.3\nGitHub issues\nWe used natural language conversations from GitHub issues and pull requests, which were collected as a\ncomponent of The Stack v1.2. Each conversation consists of a series of events with actions, such as opening\nthe issue, creating a comment, or closing the issue. Each event includes the authorâs username, a message, an\naction, and a creation date. We filtered this data as follows: 1) First, we removed auto-generated text when\nusers replied to issues via email. See Appendix A for the regular expression we used. We also deleted issues\nwith a short message (less than 200 characters) and truncated long comments in the middle to a maximum of\n100 lines while retaining the last 20 lines. This removed 18% of the volume. 2) Next, we excluded comments\nfrom bots. To do so, we searched for bot keywords in the username of the commentâs author (for more\ninformation, see Appendix A). This step eliminates 17% of the total events and results in 14.7% of the issues\nbeing emptied. We have observed that bot-generated issues tend to be lengthy and contain numerous logs and\nlinks. 3) We used the number of users engaged in the conversation as an indicator of quality. Our criterion\nwas to include conversations that have two or more users. However, we also preserved conversations that\ninvolved a single user if the total text within comments was less than 7,000 characters (96th percentile).\nAdditionally, we excluded issues authored by a single user if they contained more than ten events, as they\ntended to be of poor quality or originate from overlooked bots. By implementing these filters, we removed an\nadditional 14% of issues. 4) Finally, we used a model from the fasttext library7 to filter out non-English issues.\nThis step was necessary to enable accurate redaction of names using a PII detection model (see Section 4.3).\nLastly, we would like to point out that we anonymized the usernames in the conversations by replacing them\nwith a participant counter within the conversation. See more details in Section 4.3 and 5.1.\n3.4\nGit commits\nThe Git commit data was gathered from BigQuery8 and includes only single-file commits of repositories with\nthe same licenses and file extension as used in The Stack (Kocetkov et al., 2022). We removed all repositories\nfrom users that opted out of The Stack. The raw dataset is around 4 TB in size. We sampled 50% of the files\nand filtered the remaining data with heuristics to build a high-quality dataset. We list and describe all filters\nin Table 4.\nThe number of line changes in a commit can be very low compared to the file size. To avoid spending too\nmuch compute budget on learning to copy the file content, we only used the full file 20% of the time, and for\nthe remaining 80%, sampled a window between 0 and 32 lines around the first and last changed line. The\nresulting dataset contains 64 GB of commit data.\n3.5\nDeduplication\nWe followed the deduplication pipeline from Ben Allal et al. (2023), which consists of calculating the\nMinHashes (Broder, 2000) of all source code files, followed by Locally Sensitive Hashing (LSH) to map similar\ncode files to the same bucket. We used 5-grams and a Jaccard similarity of 0.7. See this blogpost for more\ndetails regarding the pipeline.\nWe applied this near-deduplication process to all programming languages and the Jupyter notebooks. However,\ndue to time constraints, we could not apply this procedure to Git commits. Additionally, we deemed it\nunlikely to discover duplicates in Github issues, so we didnât apply the process to them.\n7The lid.176.bin version of this language identification model: https://fasttext.cc/docs/en/language-identification.html\n8https://cloud.google.com/bigquery/public-data/\n9\n\nPublished in Transactions on Machine Learning Research (12/2023)\nDescription\nDetails\nMaximum characters\nRemove code files with >100k characters.\nSmall changes\nSubsample changes with â¤2 lines with 50% probability.\nLong-range refactorings\nSubsample changes spanning â¥200 lines with 10% proba-\nbility.\nEmpty commit message\nRemove commits with empty commit subject.\nAutomatic commits\nRemove commits that either contain or are equal to a list\nof stop words.\nHash messages\nRemove commits with whitespace-separated words-to-\ncharacter ratio >20.\nData files\nSubsample data formats (JSON, YAML, XML, HTML) with\n50% probability.\nTable 4: Git commit filters.\n3.6\nWeighting of data sources\nThere were several discussions within the community about whether to up-sample or down-sample certain\nprogramming languages, as the amount of compute budget allocated to a data source in a given language can\nsignificantly affect the modelâs performance in that language. However, we realized that the largest amount\nof available data comes from popular programming languages and would, therefore, benefit a larger group\nof end-users. Moreover, after the deduplication process, we found that several high-resource programming\nlanguages, such as C, C++, C#, Java, Javascript, Python, and PHP, had a similar amount of data ranging\nfrom 44â87 GB. This further reinforced our belief that we did not need to drastically re-weigh the existing\ndata distribution. Thus, in this work, we followed the natural distribution of data during training and sampled\ndata sources proportionally to their volume. However, we did make an exception for JSON, YAML, and\nCSS, as we only want the LLM to learn the data format without wasting compute resources on memorizing\nthe data in such files. For that reason, we re-weighed the volume of the data source to 1 GB for JSON and\nYAML and 3GB for CSS.\n4\nPII redaction\nThis section outlines our efforts to remove Personally Identifiable Information (PII) from the training data.\nIn Section 4.1, we first describe how we collected a large set of PII annotations. We used these annotations\nto explore various techniques to train a PII detection model in Section 4.3, building on top of the encoder\nmodel we developed in Section 4.2.\n4.1\nData collection\nWe utilized the Toloka platform9 to engage 1,399 crowd-workers from 35 countries in annotating a dataset\nfor PII in source code. On average, participants completed 206 tasks, earned about $27, and worked 3.1\nhours. Our goal was to identify PII in various forms, such as names, usernames, emails, IP addresses, keys,\npasswords, and IDs. To ensure that crowd-workers received fair compensation, we established an hourly pay\nrate of $7.30, taking into consideration different minimum wage rates across countries and their corresponding\npurchasing power. We limited annotation eligibility to countries where the hourly pay rate of $7.30 was\nequivalent to the highest minimum wage in the US ($16.50) in terms of purchasing power parity. A complete\nlist of countries that participated in the annotation can be found in Table B.1 of Appendix B. Crowd workers\nin Toloka can do tasks whenever or wherever; there is no obligation to complete a certain task or spend a\nfixed amount of time on it. Thus, they utilize free choice when working on the tasks. Out of 1,399 crowd\nworkers, 695 filled a survey on task quality, and 519 completed the survey. The average score for the question\nasking whether the participant would like to contribute to another project like this is 4.92 on a scale 1â5.\n9https://toloka.ai/\n10\n\nPublished in Transactions on Machine Learning Research (12/2023)\nc\ncpp\ncsharp\njava\nruby\npython\njs\nphp\nrust\ngo\ntypescript\nsql\ncss\nhaskell\nkotlin\nperl\ndart\nlua\nscala\nfortran\nshell\nhtml\npascal\nassembly\nscheme\njulia\nstata\npowershell\nprolog\nmathematica\nmatlab\nProgramming language\n0\n200\n400\n600\n800\nNumber of files\nFigure 1: Distribution of programming languages in the annotated PII dataset.\nThe dataset comprises 12,000 files, each containing approximately 50 lines of code written in 31 programming\nlanguages. Figure 1 shows the distribution of programming languages in the dataset. To increase the\nrepresentation of rare PII types, such as keys and IP addresses, 7,100 files were pre-filtered from a larger\nsample. We utilized the detect-secrets tool10 with all default plugins activated, along with the regular\nexpressions by Ben Allal et al. (2023) for detecting emails, IPv4 and IPv6 addresses. To prevent biasing the\nannotation too much towards these detection tools, the remaining 5,100 files were randomly selected from the\ndataset without pre-filtering.\nDuring annotation, we differentiated between various types of PII based on the specific context in which\nit appeared. Specifically, we distinguished whether the PII was present in the codeâs license header, was\nused as a placeholder, or constituted confidential data. This categorization was necessary because the PII in\nlicense headers is usually provided voluntarily by authors for code attribution and may not require masking.\nSimilarly, placeholders are not real secrets and do not need to be masked. We applied this categorization to\nnames, emails, and usernames. See Table 5 for an overview of all PII entities.\nThe annotators detected a total of 22,950 PII entities in the dataset. To evaluate the quality of the dataset,\nwe manually inspected 300 files that contained various PII types and calculated the recall and precision for\neach type, as shown in Table 5. We found that annotating secret IDs was particularly challenging, as the\nannotators tended to produce many false positives and negatives. As a result, we decided to exclude this\ncategory from the PII detection model training.\n4.2\nStarEncoder\nAs part of our PII detection efforts, we trained an encoder-only model (i.e., bi-directionally self-attentive\nTransformers) that can be efficiently fine-tuned for both code- and text-related tasks. We used the Masked\nLanguage Modelling (MLM) and Next Sentence Prediction (NSP) objectives from BERT (Devlin et al., 2019;\nLiu et al., 2019) and predicted masked-out tokens from an input sentence and whether a pair of sentences\noccur as neighbors in a document.\nWe separate code snippets in the input as follows: [CLS] Snippet-1 [SEP] Snippet-2, where the two code\nsnippets are selected randomly, either from the same source file or from two distinct documents. For the\nMLM loss, we mask tokens in the input independently with an probability of 15%. For the NSP loss, we use\na linear classifier applied to the representation output at the [CLS] token. We train for 100,000 steps with a\nglobal batch size of 4,096 sequences of a maximum length of 1,024 so that approximately 400B tokens are\n10https://github.com/Yelp/detect-secrets\n11\n\nPublished in Transactions on Machine Learning Research (12/2023)\nPII type\nCount\nRecall\nPrecision\nIP_ADDRESS\n2526\n85%\n97%\nKEY\n308\n91%\n78%\nPASSWORD\n598\n91%\n86%\nID\n1702\n53%\n51%\nEMAIL\n5470\n99%\n97%\nEMAIL_EXAMPLE\n1407\nEMAIL_LICENSE\n3141\nNAME\n2477\n89%\n94%\nNAME_EXAMPLE\n318\nNAME_LICENSE\n3105\nUSERNAME\n780\n74%\n86%\nUSERNAME_EXAMPLE\n328\nUSERNAME_LICENSE\n503\nAMBIGUOUS\n287\nTable 5: Overview of the PII types and the number of collected annotations. We investigate the annotation\nquality by reporting the precision and recall of a manual inspection on 300 files. Each subcategory was\nmapped back to its corresponding PII type for the inspection.\nHyperparameter\nValue\nHidden size\n768\nIntermediate size\n3072\nMax. position embeddings\n1024\nNum. of attention heads\n12\nNum. of hidden layers\n12\nAttention\nMulti-head\nNum. of parameters\nâ125M\nTable 6: Model architecture of StarEncoder.\nobserved. This takes roughly two days using 64 NVIDIA A100 GPUs. Details about the model architecture\nare reported in Table 6.\n4.3\nPII detection model\nWe fine-tuned StarEncoder on the annotated PII dataset for the Named Entity Recognition (NER) task. We\nadded a linear layer as a token classification head on top of the model, with 6 target classes: names, emails,\nkeys, passwords, IP addresses, and usernames. We excluded IDs due to low annotation quality and did not\ndifferentiate between the categorization of PII entities (license headers, placeholders) because of the modelâs\npoor performance in distinguishing them. We split the dataset into a training set of 7,878 examples and a test\nset of 4,000 examples, ensuring that both splits have a balanced representation of the different PII types. See\nTable 7. We make the training and evaluation splits available under gated access at https://hf.co/BigCode.\nFine-tuning baseline\nWe fine-tune StarEncoder on the PII training set, and 400 annotated files from\nBen Allal et al. (2023). We achieve F1 scores of more than 90% on names, emails, and IP addresses and\n73.39% on passwords. The modelâs performance is comparatively low on keys and usernames, with F1 scores\nof only 56.66% and 59.39%, respectively. We attribute the low performance on keys to the limited number of\nlabels for this type of PII, as only 308 instances were available. For usernames, we observed the model often\nconfused them with decorators and values in paths. This is most likely because we annotated usernames\ninside links for social media platforms.\n12\n\nPublished in Transactions on Machine Learning Research (12/2023)\nEntity type\nTrain\nTest\nEMAIL\n4721\n1742\nNAME\n3847\n1298\nIP_ADDRESS\n1941\n521\nUSERNAME\n1320\n346\nPASSWORD\n390\n148\nKEY\n171\n118\nTable 7: Train-test split of the annotated PII dataset.\nMethod\nEmail address\nIP address\nKey\nPrec.\nRecall\nF1\nPrec.\nRecall\nF1\nPrec.\nRecall\nF1\nRegex\n96.20%\n97.47%\n96.83%\n71.29%\n87.71%\n78.65%\n3.62%\n49.15%\n6.74%\nNER\n94.01%\n98.10%\n96.01%\n88.95%\n94.43%\n91.61%\n60.37%\n53.38%\n56.66%\n+ pseudo labels\n97.73%\n98.94%\n98.15%\n90.10%\n93.86%\n91.94%\n62.38%\n80.81%\n70.41%\nTable 8: Comparing PII detection performance: Regular Expressions, NER Pipeline with Annotated Data,\nand NER Pipeline with Annotated Data + Pseudo-Labels\nPseudo-labels\nTo improve the detection of key and password entities, we employed a pseudo-labeling\ntechnique as described by Lee (2013). This method involves training a model on a small set of labeled\ndata and subsequently generating predictions for a larger set of unlabeled data. Specifically, we annotated\n18,000 files using an ensemble of two encoder models, which were fine-tuned on the 400-file PII dataset from\nBen Allal et al. (2023). To identify reliable pseudo-labels, we calculated the average probability logits from\nour models and applied filtering criteria. Specifically, we set a minimum threshold of 0.5 for all entities,\nexcept for names and usernames, for which we used a higher threshold of 0.6. However, upon reviewing the\nresults, we found a significant number of false positives for keys and passwords. As a result, we decided to\nonly retain entities that were preceded by a trigger word, such as key, auth, or pwd, within the preceding 100\ncharacters. Training on this synthetic dataset before fine-tuning on the annotated one yielded superior results\nfor all PII categories, as demonstrated in Tables 8 and 9. Only the performance for detecting usernames did\nnot show significant improvement, so we decided to exclude it from the PII redaction process.\nComparison against regex baseline\nWe compared our PII detection models against the regular expres-\nsions (regexes) employed in Ben Allal et al. (2023). The regexes only support the detection of emails, IP\naddresses, and keys. Note that we enhanced the email regex, as explained in the Appendix, to address false\npositives we found during the evaluation on this benchmark. This modification boosted the F1 score of the\nregex from 81.8% to 96.83%. Nevertheless, our PII detection models still surpassed the regex approach in\ndetecting all three entities, as shown in Table 8. We note that the performance difference was especially large\non keys and found that the detect-secrets tool generated many false positives, especially in specific pro-\ngramming languages like Go and C-sharp that werenât well represented in the regex evaluation. Consequently,\nthe overall precision of the tool was below 4%.\nPost-processing\nBefore applying the best PII detection model to the full dataset, we observed a couple of\nfrequent detection errors. We added the following post-processing techniques to reduce the number of false\npositives:\nâ¢ Ignore secrets with fewer than 4 characters.\nâ¢ Detect full names only by requiring at least one space within the name.\n13\n\nPublished in Transactions on Machine Learning Research (12/2023)\nMethod\nName\nUsername\nPassword\nPrec.\nRecall\nF1\nPrec.\nRecall\nF1\nPrec.\nRecall\nF1\nNER\n83.66%\n95.52%\n89.19%\n48.93%\n75.55%\n59.39%\n59.16%\n96.62%\n73.39%\n+ pseudo labels\n86.45%\n97.38%\n91.59%\n52.20%\n74.81%\n61.49%\n70.94%\n95.96%\n81.57%\nTable 9: Comparison of PII detection performance: NER Pipeline with Annotated Data vs. Annotated Data\n+ Pseudo-Labels\nâ¢ Ignore detected keys with fewer than 9 characters or that are not gibberish using a\ngibberish-detector.11\nâ¢ Ignore IP addresses that arenât valid or are private (non-Internet facing) using the ipaddress python\npackage. We also ignore IP addresses from popular DNS servers. We use the same list as in Ben Allal\net al. (2023).\nPII placeholders\nWe replaced the detected PII entities with the following tokens:\n<NAME>, <EMAIL>, <KEY>, <PASSWORD>\nTo mask IP addresses, we randomly selected an IP address from 5 synthetic, private, non-internet-facing IP\naddresses of the same type that can be found in Appendix C.\nGithub issues\nWe already employed a regex approach to detect keys, IP addresses, and emails in the\nGithub issues, so we only used the PII detection model to redact names. We anonymized the usernames\nof the authors by replacing them with a participant counter within the conversation, e.g. username_1 to\nrefer to second participant (see Section 5.1 for formatting details). We prepend these pseudonyms to the\nbeginning of each comment such that we preserve the speaker identity of the author. In addition, we redact\nall mentions of these usernames in the messages. Note that we only mask the usernames of active participants\nin the conversation and mentions of non-participating users are not anonymized.\nCompute resources\nWe used the PII detection model to identify PII across all programming languages\nin the training dataset, including GitHub issues (names only), Git commits, and Jupyter notebooks. The\ntotal dataset amounts to 815 GB in size. We ran inference on multiple NVIDIA A100 80 GB GPUs, which\nrequired 800 GPU-hours.\n5\nModel training\nThis section presents information on the training process of the StarCoder models. Before we proceed, we\nfirst clarify the differences between the two models:\nStarCoderBase is the first model trained on 1 trillion tokens sourced from the curated dataset described\nin Section 3.\nStarCoder is the fine-tuned version of StarCoderBase, trained on another 35B Python tokens (roughly 2\nepochs).\nThroughout the following, we show how we formatted the training data (Section 5.1), decontaminated the\ntraining data (Section 5.2), and provide details regarding the tokenizer (Section 5.3), the model architecture\n(Section 5.4), the training process (Section 5.5), multi-node GPU setup (Section 5.6), and CO2 emissions\n(Section 5.7).\n11https://github.com/domanchi/gibberish-detector\n14\n\nPublished in Transactions on Machine Learning Research (12/2023)\n5.1\nData formatting\nWe present the formatting guidelines for each of the data sources below. We provide the templates below\nin which <token> refers to a sentinel token, and metadata and data refer to placeholders for data fields,\nrespectively.\nCode\nWe prepend the repository name, file name, and the number of stars to the context of the code file.\nTo not overfit on the exact number of stars, we categorized GitHub stars into five buckets: 0, 1â10, 10â100,\n100â1000, 1000+. To enable the model to operate without this metadata during inference, we prefixed the\nrepository name, filename, and stars independently at random, each with a probability of 0.2.\n<reponame>reponame<filename>filename<gh_stars>stars\\ncode<|endoftext|>\nTo the source code in this template (i.e. code), we apply the fill-in-the-middle transformation (FIM;\nBavarian et al., 2022). More precisely, we apply FIM at the character-level to the source code files with a\nFIM-rate of 0.5, and use PSM mode with probability .5 and SPMv2 mode with probability .5.\nIssues\nWe use sentinel tokens to mark the opening of an issue and subsequently include its title. We\nseparate the sequence of comments by a <issue_comment> token and include a anonymized speaker identifier\nbefore the comment. Specifically, we refer to authors by their participant counter within the conversation,\ne.g. username_1 to refer to second participant in the issue. To distinguish between the different turns, we\nuse comment1, id1 to refer to the second comment and its anonymized speaker id, respectively.\n<issue_start>Title: title\\nusername_id0:comment0<issue_comment>username_id1:comment1\n... <issue_closed (optional)><|endoftext|>\nJupyter â scripts\nJupyter scripts were formatted in the same manner as code.\nJupyter â structured\nParsed Jupyter notebooks come in chains of text, code, and outputs, and we\nseparated them with sentinel tokens. Note that we use text2, code2, output2 to refer to the 3rd triplet in the\nnotebook.\n<jupyter_start><jupyter_text>text0<jupyter_code>code0\n<jupyter_output>output0<jupyter_text> ... <|endoftext|>\nGit commits\nWe separate the code before the commit, the commit message, and the code after the commit\nwith sentinel tokens. As explained in Section 3.4, we use the full files with 20% probability and otherwise use\na small window (0-32 lines) around the changed lines.\n<commit_before>code_before<commit_msg>message<commit_after>code_after<|endoftext|>\nWe summarize all sentinel tokens in Table 10.\n5.2\nTraining data decontamination\nThe code training data was decontaminated by removing files that contained docstrings or solutions from\nHumanEval and MBPP, docstrings from APPS, questions from GSM8K, or prompts from DS1000. (These\nbenchmarks are further described in Section 6.) To give an indication of the amount of data removed by\ndecontamination, Python is the language with the highest number of matches, with 558 files removed.\n15\n\nPublished in Transactions on Machine Learning Research (12/2023)\nToken\nDescription\n<|endoftext|>\nend of text/sequence\n<fim_prefix>\nFIM prefix\n<fim_middle>\nFIM middle\n<fim_suffix>\nFIM suffix\n<fim_pad>\nFIM pad\n<reponame>\nrepository name\n<filename>\nfile name\n<gh_stars>\nGitHub stars\n<issue_start>\nstart of GitHub issue\n<issue_comment>\nstart of GitHub issue comment\n<issue_closed>\nGitHub issue closed event\n<jupyter_start>\nstart of Jupyter notebook\n<jupyter_text>\nstart of Jupyter text cell\n<jupyter_code>\nstart of Jupyter code cell\n<jupyter_output>\nstart of Jupyter output cell\n<empty_output>\noutput cell without content\n<commit_before>\ncode snippet before commit\n<commit_msg>\ncommit message\n<commit_after>\ncode snippet after commit\nTable 10: Overview of the sentinel tokens.\n5.3\nTokenizer\nThe modelâs tokenizer follows our insights presented in Ben Allal et al. (2023) and uses those same design\nchoices: we use the Hugging Face Tokenizers library (MOI et al., 2022) to train a byte-level Byte-Pair-Encoding\nwith a vocabulary size of 49,152 tokensâincluding the sentinel tokens from table 10. The pre-tokenization\nstep includes a digit-splitter and the regex splitter from the GPT-2 pre-tokenizer.\n5.4\nModel Architecture\nWe trained a 15.5B parameter model with the same architecture as SantaCoder (Ben Allal et al., 2023). It is a\ndecoder-only Transformer with Multi-Query-Attention (MQA; Shazeer, 2019), and learned absolute positional\nembeddings. We also apply Fill-in-the-Middle (FIM; Bavarian et al., 2022) transformations to the training\ndata, see Section 5.1. We used FlashAttention (Dao et al., 2022) to speed up the attention computation and\nreduce its memory footprint, allowing us to scale to a 8K context length. To make FlashAttention work\nwith MQA during training, we simply expand the key and value before calling the attention kernel. The\narchitecture hyper-parameters are given in Table 11. In addition, we have included the hyperparameters of\nSantaCoder(Ben Allal et al., 2023) for comparison.\n5.5\nTraining details\nStarCoderBase\nThe model was trained for 250k iterations, with a batch size of 4M tokens, for a total of\none trillion tokens. We used Adam (Kingma & Ba, 2015) with Î²1 = 0.9, Î²2 = 0.95, Ïµ = 10â8 and a weight\ndecay of 0.1. The learning rate followed a cosine decay from 3 Ã 10â4 to 3 Ã 10â5 after a linear warmup of\n2,000 iterations.\nStarCoder\nStarting from StarCoderBase, we fine-tuned a Python variant of the model for 2 epochs on the\nPython subset of the training data. We used the same settings as StarCoderBase, except that we used a\nlearning rate of 5 Ã 10â5 and decayed it to 5 Ã 10â6 after 1,000 iterations of linear warmup. We trained for\n8,500 steps.\n16\n\nPublished in Transactions on Machine Learning Research (12/2023)\nHyperparameter\nSantaCoder\nStarCoder\nHidden size\n2048\n6144\nIntermediate size\n8192\n24576\nMax. position embeddings\n2048\n8192\nNum. of attention heads\n16\n48\nNum. of hidden layers\n24\n40\nAttention\nMulti-query\nMulti-query\nNum. of parameters\nâ1.1B\nâ15.5B\nTable 11: Model architecture of StarCoder. We also include SantaCoder (prior work by the community).\n5.6\nMulti-Node GPU Setup\nWe trained our model on a GPU cluster with 512 A100 80 GB GPUs distributed across 64 nodes. We\npartitioned the model with a 3D-parallel layout that shards the model with both tensor and pipeline parallelism\nrank 4, requiring 16 GPUs (two nodes) for one replica. To fully leverage the clusterâs capabilities, we used\n32-fold data parallelism. To optimize GPU utilization and reduce idle compute bubbles, we maintained a\nmicro-batch size of 1 and accumulated for 16 steps, resulting in a global batch size of 512 (equivalent to\n4M tokens). We used Megatron-LMâs distributed optimizer because we found that it leads to slightly higher\nthroughput in this configuration. Since it requires the gradient reduction step in FP32, the training in BF16\nleads to 10% lower throughput than FP16, but we used it anyway to avoid training instabilities.\nExcept for a few restarts, we did not experience significant training instabilities.\n5.7\nCO2 emissions\nStarCoderBase\nWe report the carbon footprint (Lacoste et al., 2019) of training StarCoderBase. Based\non the total number of GPU hours that training took (320,256) and an average power usage of 280W per\nGPU, this adds up to 89671.68 kWh of electricity consumed during the training process. Multiplied by the\ncarbon intensity of the energy of the us-west-2 AWS location (0.15495 kgCO2e per kWh) and the average\nPower Usage Effectiveness of 1.2 across AWS datacenters, this results in 16.68 tonnes of CO2eq emitted.\nStarCoder\nThe fine-tuned model adds 3.5% of training time, which translates to an additional estimated\nemission of 0.58 tonnes of CO2eq.\n6\nEvaluation\nIn this section, we first outline the models we evaluated in addition to StarCoder and StarCoderBase. Then we\nreport on the Python language performance of all models on the HumanEval (Chen et al., 2021), MBPP (Austin\net al., 2021), and DS-1000 (Lai et al., 2022) evaluation benchmarks. Then we cover multi-language evaluation\nusing a variety of benchmarks and tasks.\nA Code LM Evaluation Harness\nTo enable reproducible and centralized evaluation of StarCoder and\nother Code LLMs, we developed a Code LM Evaluation Harness (Ben Allal et al., 2022), inspired by the LM\nEvaluation-Harness (Gao et al., 2021b). This harness provides a framework for the efficient evaluation of\ncode models, utilizing data parallelism and docker containers for execution. It supports several benchmarks,\nincluding HumanEval, MultiPL-E, and DS-1000.\nOther Models Evaluated\nWe compare StarCoder and StarCoderBase to the following models.\n1. CodeGen-16B-Multi (Nijkamp et al., 2023) is an open-access, 16B parameter model that is trained\non the Pile (Gao et al., 2021a), and then on additional code written in C, C++, Go, Java, JavaScript,\nand Python from the GitHub BigQuery dataset (Smith, 2016).\n17\n\nPublished in Transactions on Machine Learning Research (12/2023)\nModel\nSize\nHumanEval\nMBPP\nOpen-access\nLLaMA\n7B\n10.5\n17.7\nLLaMA\n13B\n15.8\n22.0\nSantaCoder\n1.1B\n18.0\n35.0\nCodeGen-Multi\n16B\n18.3\n20.9\nLLaMA\n33B\n21.7\n30.2\nCodeGeeX\n13B\n22.9\n24.4\nLLaMA-65B\n65B\n23.7\n37.7\nCodeGen-Mono\n16B\n29.3\n35.3\nStarCoderBase\n15.5B\n30.4\n49.0\nStarCoder\n15.5B\n33.6\n52.7\nClosed-access\nLaMDA\n137B\n14.0\n14.8\nPaLM\n540B\n26.2\n36.8\ncode-cushman-001\n12B\n33.5\n45.9\ncode-davinci-002\n175B\n45.9\n60.3\nTable 12: Comparing StarCoderâs performance (pass@1) on the HumanEval and MBPP Python with several\nother models. StarCoder and StarCoder base obtain the highest performance of open-access models, and\ncomparable performance to the code-cushman-001 closed access model.\n2. CodeGen-16B-Mono is a version of CodeGen-16B-Multi that is fine-tuned on additional Python\ncode from GitHub, though the dataset is not publicly available.\n3. CodeGeeX (Zheng et al., 2023) is an open-access 13B parameter model trained on 23 programming\nlanguages selected from the Pile, the CodeParrot dataset (Wolf et al., 2020), and additional data\nfor Python, Java, and C++.\nCodeGeeX also includes its own multi-language benchmark suite,\nHumanEval-X, which we discuss below.\n4. code-cushman-001 is a 12B parameter model by OpenAI and was the initial model for GitHub\nCopilot (Chen et al., 2021). The details of its training set are unknown. This model has been\ndeprecated by OpenAI but was available from the Microsoft Azure OpenAI Service at the time of\nwriting.12\n5. Finally, although they are not specifically trained for code generation, we include some results from\nthe LLaMA (Touvron et al., 2023), PaLM (Chowdhery et al., 2022), and LaMDA (Thoppilan et al.,\n2022) papers. LLaMAâs license prohibits commercial use, and PaLM and LaMDA are not publicly\navailable.\n6.1\nStarCoder: Python Evaluation\nIn this section, we evaluate the performance of StarCoder on Python, comparing it to both open-access and\nclosed-access models. We first report performance on HumanEval (Chen et al., 2021) and MBPP (Austin\net al., 2021), which are two widely used benchmarks of Python performance. However, we also measure\nperformance on DS-1000 (Lai et al., 2022), a code completion benchmark of 1,000 Python data science\nproblems based on StackOverflow questions.\n6.1.1\nThe HumanEval and MBPP Benchmarks\nHumanEval (Chen et al., 2021), and MBPP (Austin et al., 2021) are widely-used benchmarks for Code LLMs\nconsisting of hundreds of Python programming problems that use test cases to validate the code produced by\n12There had been a code-cushman-002, but it is not available at the time of writing.\n18\n\nPublished in Transactions on Machine Learning Research (12/2023)\nFormat\nModel\nMatplotlib\nNumPy\nPandas\nPyTorch\nSciPy\nScikit-\nLearn\nTensorFlow\nOverall\nNumber of problems:\n155\n220\n291\n68\n106\n115\n45\n1,000\nCompletion\nSantaCoder-1B\n21.6\n4.6\n0.9\n2.6\n2.4\n4.8\n3.1\n5.7\nCompletion\nInCoder-6B\n28.3\n4.4\n3.1\n4.4\n2.8\n2.8\n3.8\n7.4\nCompletion\nCodeGen-16B-Mono\n31.7\n10.9\n3.4\n7.0\n9.0\n10.8\n15.2\n11.7\nCompletion\ncode-cushman-001\n40.7\n21.8\n7.9\n12.4\n11.3\n18.0\n12.2\n18.1\nCompletion\nStarCoderBase\n47.0\n27.1\n10.1\n19.5\n21.7\n27.0\n20.5\n23.8\nCompletion\nStarCoder\n51.7\n29.7\n11.4\n21.4\n20.2\n29.5\n24.5\n26.0\nInsertion\nSantaCoder-1B\n21.6â\n13.8\n2.0\n3.8\n5.7\n6.9\n14.8\n9.3\nInsertion\nInCoder-6B\n28.3â\n4.6\n2.9\n4.4\n2.8\n3.1\n7.8\n7.5\nInsertion\nStarCoderBase\n47.0â\n26.3\n10.9\n16.6\n20.2\n30.2\n22.3\n24.0\nInsertion\nStarCoder\n51.7*\n30.8\n10.3\n21.0\n20.2\n27.4\n20.0\n25.4\nTable 13: Performance of open-access and closed-access models on DS-1000. Benchmarks are as follows. All\nmodels evaluated at temperature=0.2, top_p=0.5, max_length=1024. Scores reflect mean pass@1 accuracy\naveraged over 40 samples. â: Matplotlib task does not have right sided context, so insertion and completion\nformats are identical.\na Code LLM. Code LLMs generate code by sampling from their output distribution. We report performance\nusing the pass@k metric (Chen et al., 2021): the total fraction of benchmark problems solved, where a\nproblem is considered solved if any one of k code samples passes every test case. Like Chen et al. (2021),\nwe use sampling temperature 0.2 for pass@1, and temperature 0.8 for k > 1. We generate n = 200 samples\nfor all experiments with open-access models. For API models, we use n = 20 samples, which is enough to\nestimate pass@1. We focus on the simplest version of pass@k, which is pass@1: the likelihood that a problem\nis solved in a single attempt by the model.\nTable 12 compares StarCoder (and StarCoderBase) on HumanEval and MBPP to several open-access and\nclosed-access models:\n1. StarCoder is the highest-performing open-access model on both benchmarks.\n2. StarCoder outperforms the largest models, including PaLM, LaMDA, and LLaMA, despite being\nsignificantly smaller.\n3. StarCoderBase is also very capable on Python and is competitive with CodeGen-16B-Mono, a\nsimilarly-sized open-access model that was fine-tuned on Python.\n4. StarCoder outperforms OpenAIâs code-cushman-001 (12B) model.\n6.1.2\nThe DS-1000 Python Data Science Benchmarks\nA major limitation of HumanEval and MBPP is that they are simple programming puzzles that are not\nrepresentative of the code that most programmers write. In contrast, the DS-1000 benchmark (Lai et al.,\n2022) has a suite of 1,000 realistic and practical data science workflows across seven libraries and evaluates\ngenerations in execution against test cases.\nDS-1000 supports two evaluation modes: completion and insertion (via FIM). We report completion scores for\nall models but insertion scores only for models that support it: the StarCoder models and InCoder-6B (Fried\net al., 2022). DS-1000 also categorizes problems based on the libraries used: Matplotlib, NumPy, Pandas,\nSciPy, Scikit-Learn, PyTorch, and TensorFlow. We report pass@1 for each library and an overall score in\nTable 13 and draw the following conclusions:\n1. StarCoder substantially outperforms all other models on data science problems from the DS-1000\nbenchmark. Moreover, this is true across every kind of data science library.\n19\n\nPublished in Transactions on Machine Learning Research (12/2023)\n2. StarCoderBase also outperforms every other model, but is slightly behind StarCoder on DS-1000.\n3. We confirm the finding by Lai et al. (2022): model performance on HumanEval and MBPP benchmarks\ndoes not always correlate with performance on the more realistic DS-1000 benchmarks. For example,\nCodeGen-Mono slightly outperforms code-cushman-001 and the StarCoder models on HumanEval\nand MBPP, but is significantly worse on DS-1000. This demonstrates the importance of evaluating\nmodels on a range of benchmarks.\n6.1.3\nThe ODEX Open-Domain Coding Benchmark\nOur previous evaluations focus either on closed domains (i.e., primarily built-in Python functions, as in\nMBPP and HumanEval) or specific domains (e.g., data science, as in DS-1000). To evaluate model ability\nto generate code on a broader set of Python libraries, we use the ODEX benchmark (Wang et al., 2022)\ncontaining 505 open-domain and 440 closed-domain Python coding queries, in four natural languages â\nEnglish, Spanish, Japanese, and Russian â with test-case-based execution evaluation.\nWe report the pass@1 metric for StarCoder and baseline models, including Codex (code-davinci-001), CodeGen-\n16B-Mono, and SantaCoder. In addition to the overall execution accuracy, we also categorize problems by\nlanguages and domains, which are: (1) queries in the closed-domain (using only built-in Python functions)\nand open-domain (using functions from imported libraries), and (2) queries with instructions written in\nEnglish, Spanish, Japanese, and Russian, respectively. We report overall scores and scores in different domains\nand languages in Table 14 and draw the following conclusions:\n1. StarCoder substantially outperforms all other models on open-domain coding queries from the ODEX\nbenchmark.\n2. StarCoderBase also outperforms every other model, even better than StarCoder in the ODEX English\nsubset, but slightly behind in other languages.\n3. Both StarCoder and StarCoderBase models generally exhibit smaller gaps between open- and closed-\ndomain queries than other baseline models, despite the higher overall execution accuracy. This result\nindicates that StarCoder models acquire more generalized skills about coding queries in the open\ndomain (i.e., concerning diverse Python libraries), while other models exhibit larger performance\ndrops when moving from the closed to open domain.\nModel\nEnglish\nSpanish\nJapanese\nRussian\noverall\nopen\nclosed\noverall\nopen\nclosed\noverall\nopen\nclosed\noverall\nopen\nclosed\nCodeGen-16B-Mono\n33.7\n25.2\n43.1\n30.0\n25.0\n43.1\n37.8\n26.6\n62.8\n46.8\n30.4\n60.1\ncode-cushman-001\n31.9\n24.4\n40.2\n31.9\n27.7\n36.7\n25.7\n21.2\n35.5\n40.0\n26.0\n51.6\ncode-davinci-001\n33.6\n26.9\n41.0\n36.9\n31.7\n42.9\n31.0\n23.7\n47.3\n43.2\n28.9\n55.1\nSantaCoder\n37.7\n30.9\n45.1\n32.1\n26.0\n39.1\n28.1\n23.0\n39.4\n36.9\n23.0\n48.3\nStarCoderBase\n46.5\n40.7\n53.0\n30.1\n25.4\n35.5\n41.2\n37.6\n49.2\n46.1\n34.0\n56.1\nStarCoder\n44.7\n37.0\n53.1\n37.6\n32.9\n42.9\n44.2\n39.6\n54.5\n50.4\n33.8\n64.1\nTable 14: Performance on the ODEX benchmark by instruction languages and code domains: open problems\nuse libraries, while closed use only built-in Python functions.\n6.2\nStarCoder and StarCoderBase: Multi-Language Evaluation\nIn this section, we focus primarily on StarCoderBase, and evaluate its performance on a variety of programming\nlanguages and programming tasks, including producing code from natural language descriptions, documenting\ncode, predicting type annotations, and more. This section also shows that StarCoder, despite being fine-tuned\non Python, remains a very capable multi-language Code LLM and even outperforms StarCoderBase on some\nlanguages.\n20\n\nPublished in Transactions on Machine Learning Research (12/2023)\nLanguage\nCodeGen-16B-Multi\nCodeGeeX\ncode-cushman-001\nStarCoder\nStarCoderBase\ncpp\n21.00\n16.87\n30.59\n31.55\n30.56\nc-sharp\n8.24\n8.49\n22.06\n21.01\n20.56\nd\n7.68\n9.15\n6.73\n13.57\n10.01\ngo\n13.54\n11.04\n19.68\n17.61\n21.47\njava\n22.20\n19.14\n31.90\n30.22\n28.53\njulia\n0.00\n0.29\n1.54\n23.02\n21.09\njavascript\n19.15\n16.92\n31.27\n30.79\n31.70\nlua\n8.50\n10.96\n26.24\n23.89\n26.61\nphp\n8.37\n13.51\n28.94\n26.08\n26.75\nperl\n3.42\n8.09\n19.29\n17.34\n16.32\npython\n19.26\n21.62\n30.71\n33.57\n30.35\nr\n6.45\n3.92\n10.99\n15.50\n10.18\nruby\n0.00\n3.34\n28.63\n1.24\n17.25\nracket\n0.66\n3.31\n7.05\n0.07\n11.77\nrust\n4.21\n7.88\n25.22\n21.84\n24.46\nscala\n2.37\n8.95\n27.62\n27.61\n28.79\nbash\n0.61\n2.75\n11.74\n10.46\n11.02\nswift\n1.25\n7.26\n22.12\n22.74\n16.74\ntypescript\n20.07\n10.11\n31.26\n32.29\n32.15\nTable 15: Comparing StarCoder to multi-language open-access (e.g., CodeGen-16B-Multi) and closed-access\nmodels (e.g., code-cushman-001) on 19 programming languages. We report pass@1 on HumanEval (Chen\net al., 2021), which we translate from Python to the other languages using MultiPL-E (Cassano et al., 2023).\n6.2.1\nEvaluation on 19 Programming Languages with MultiPL-E\nWe evaluate the ability of StarCoder to turn natural language into working code in multiple programming\nlanguages using MultiPL-E (Cassano et al., 2023), which translates the HumanEval (Chen et al., 2021) and\nMBPP (Austin et al., 2021) Python benchmarks into 18 other programming languages as follows.\nMultiPL-E has a set of rule-based compilers that translate Python benchmarks to each target programming\nlanguage. Each compiler expects a benchmark in the HumanEval format: 1) a natural language description\n(in a docstring), 2) a function signature (name, arguments, and, potentially, types), and 3) a set of hidden\nassertions. The MultiPL-E compilers translate the function signature, assertions, and docstring (which may\nhave doctests) into a target language. Thus, MultiPL-E gives us a parallel set of benchmarks derived from\nHumanEval and MBPP to compare model performance across programming languages.13 The MultiPL-E\nlanguages include both high and low-resource languages, statically and dynamically typed languages, and a\nvariety of other programming language features.\nTable 15 shows how these models perform on 19 programming languages, and from it, we draw the following\nconclusions:\n1. Across all 19 programming languages, StarCoderBase outperforms other open-access models, some-\ntimes showing more than 2Ã performance.\n2. StarCoderBase is competitive with code-cushman-001 on most languages that we evaluate. There are\na few exceptions. For example, code-cushman-001 outperforms StarCoderBase by more than 5% on\nC++, Java, Ruby, and Swift, and StarCoder outperforms code-cushman-001 by more than 5% on\nJulia.\n13The MultiPL-E prompts are slightly different from the original HumanEval and MBPP prompts. For example, in HumanEval,\nsome ad hoc examples in docstrings are reformatted to be doctests so that they can be translated into examples in each target\nlanguage. MultiPL-E also omits three HumanEval benchmarks that do not fit the above format. These changes have a small\nimpact on pass rates.\n21\n\nPublished in Transactions on Machine Learning Research (12/2023)\nFormat\nModel\nValid (â)\nInsecure (â)\nCompletion\nStarCoderBase\n855/1000 (85.50%)\n340/855 (39.77%)\nInsertion\nStarCoderBase\n987/1000 (98.70%)\n354/987 (35.87%)\nCompletion\nInCoder-6B\n871/1000 (87.10%)\n309/871 (35.48%)\nInsertion\nInCoder-6B\n854/1000 (85.40%)\n293/854 (34.31%)\nCompletion\nCodeGen-16B-Multi\n955/1000 (95.50%)\n413/955 (43.25%)\nCompletion\ncode-cushman-001\n964/1000 (96.40%)\n408/964 (42.32%)\nTable 16: Performance on the Asleep at the Keyboard security benchmark (Pearce et al., 2022).\n3. Despite fine-tuning on Python, StarCoder remains competitive on most languages, and also out-\nperforms other open models.\nWhat is more surprising is that StarCoder slightly outperforms\nStarCoderBase on certain languages, despite being fine-tuned on Python. At this time, we can only\nspeculate on why this is the case, and further investigation of the open training data is likely to help\nshed light on this finding.\nThere are several other conclusions that we can draw from the table. For example, CodeGen-16B-Multi\nperforms better than one might expect on some languages that are reportedly not in its training set, including\nC#, Lua, PHP, and TypeScript. Its performance on TypeScript is less surprising since simple JavaScript\nfunctions often type-check with TypeScript by design. Similarly, StarCoder shows high performance on Swift,\neven though it was not included in its training set, as explained in Section 3.1.\n6.2.2\nThe âAsleep at the Keyboardâ Security Benchmark\nA limitation of Code LLMs is that they can generate code with security vulnerabilities (Pearce et al., 2022).\nThe Asleep at the Keyboard benchmark by Pearce et al. (2022) has 89 security-sensitive scenarios across\nthree evaluation axes: (1) Diversity of Weakness (DoW) covers 18 different vulnerability classes in MITREâs\nCommon Weakness Enumeration (CWE) taxonomy, with scenarios drawn from the 2021 CWE Top 25 Most\nDangerous Software Weaknesses list published by MITRE; (2) Diversity of Prompt (DoP) evaluates the\nmodelâs sensitivity to variations in the prompt for a single vulnerability class (SQL injection); (3) Diversity\nof Domain (DoD) contains security scenarios in the hardware description language Verilog. We focus on the\nDoW, which contains 54 scenarios (25 in C and 29 in Python) across 18 CWEs. We exclude scenarios that\nlack an automated test, leaving 40 scenarios (23 in C and 17 in Python).\nPearce et al. (2022) had previously evaluated the security of GitHub Copilot (as of August 2021), and in\nthis paper, we use the same methodology to evaluate StarCoderBase, InCoder-6B, CodeGen-16B-Multi, and\nOpenAIâs code-cushman-001. We use the original benchmarking methodology: generating 25 completions\nper scenario at temperature 0.2 (1,000 completions per model). The dataset supports fill-in-the-middle, so\nwe include this configuration on models that support it. The results are shown in Table 16; Valid gives\nthe percentage of solutions that were syntactically valid (using py_compile for Python and gcc for C), and\nInsecure shows the percentage of valid solutions that contained the vulnerability the scenario tests for. From\nthis table, we draw the following conclusions.\n1. StarCoderBase has the highest rate of valid code.\n2. InCoder-6B has a slightly lower rate for insecure code generation, but this may be due to its lower\nrate of valid completions.\n3. Among the models with more than 95% valid code, StarCoder has the lowest rate of insecure\ncompletions.\n6.2.3\nFill in the Middle Benchmarks\nThe StarCoder models support fill in the middle (FIM) or infilling, which allows the model to generate\ncode conditioned on prefix and suffix code surrounding the insertion point. Only a handful of recent models\n22\n\nPublished in Transactions on Machine Learning Research (12/2023)\nModel\nJava\nJavaScript\nPython\nInCoder-6B\n0.49\n0.51\n0.31\nSantaCoder\n0.62\n0.60\n0.44\nStarCoder\n0.73\n0.74\n0.62\nTable 17: Performance on single-line fill-in-the-middle on the FIM benchmark by Ben Allal et al. (2023).\nModel\nNon-None F1\nAll F1\nInCoder-6B\n59.1\n46.8\nSantaCoder\n66.9\n78.5\nStarCoderBase\n77.4\n86.6\nStarCoder\n77.1\n86.4\nTable 18: Accuracy of Python return type prediction, using Fried et al. (2022)âs adaptation of the Pradel\net al. (2020) benchmarks. We report both the overall F1 scores, which include trivial None-type prediction,\nand the F1 score for non-None types.\nsupport FIM: from OpenAI (Bavarian et al., 2022), InCoder (Fried et al., 2022), and our prior work on\nSantaCoder (Ben Allal et al., 2023). FIM opens up the possibility of a variety of tasks that go beyond\nleft-to-right code completion. We evaluate StarCoderBase on four established FIM benchmarks below.\nSingle-Line Infilling for Python, Java, and JavaScript\nFried et al. (2022) present a single-line fill-in-\nthe-middle task for Python that masks one line of code from a HumanEval solution and scores the modelâs\nability to complete the function. They turn every HumanEval solution into several fill-in-the-middle problems\nby masking each non-blank, non-comment line of code in the solution body into a fill-in-the-middle task.\nBen Allal et al. (2023) generalizes this benchmark to also support Java and JavaScript, using model-generated\nsolutions from MultiPL-Eâs translations. We compare the performance of StarCoderBase, SantaCoder, and\nInCoder on this task, evaluating using line exact match (Table 17). StarCoderBase significantly outperforms\nthe two smaller models.\nPython Return Type Prediction\nPradel et al. (2020) introduce methods and datasets for evaluating\nPython type annotations. Fried et al. (2022) adapt and filter one dataset from this work, consisting of Python\nfunctions from GitHub, and use it to evaluate infilling models on function return type prediction. We use\nthis dataset to compare StarCoder, StarCoderBase, and SantaCoder to InCoder on function return type\nprediction. Our setup follows Fried et al. (2022): each model uses greedy generation to infill return types\nwhile conditioning on the imports, body, and signature for each function. We report exact match accuracy on\nnormalized annotations for all functions in the evaluation set and only those with non-None annotations,\nfollowing Fried et al. (2022). We find that StarCoder and StarCoderBase outperform existing approaches at\nPython return type prediction (Table 18). However, we note that as the functions in this evaluation set were\ntaken from GitHub repositories, they may overlap with the training data for SantaCoder and the StarCoder\nmodels.\nTypeScript Type Prediction\nYee & Guha (2023) evaluate approaches to neural type prediction for\nTypeScript. However, instead of measuring accuracy, they argue that benchmarks should measure how many\nprojects or files do not have type errors with predicted types. This approach makes it possible to evaluate\ntype prediction for JavaScript programs that have never been translated to TypeScript, which reduces the\nlikelihood of dataset contamination. We add StarCoderBase to their evaluation framework and compare it to\nInCoder, which performs best at type prediction in the original work. Table 19 shows that StarCoderBase\noutperforms InCoder: (1) it produces more packages that type check, (2) across all packages, it produces\nmore files that type check, and (3) it produces fewer trivial type annotations than InCoder.\n23\n\nPublished in Transactions on Machine Learning Research (12/2023)\nPackages type check\nFiles with no errors\nTrivial annotations\nâ\nTotal\n%\nâ\nTotal\n%\nâ\nTotal\n%\nInCoder\n30\n128\n23.4\n571\n760\n75.1\n56\n117\n47.9\nStarCoderBase\n49\n128\n38.3\n593\n760\n78.0\n135\n299\n45.2\nTable 19: TypeScript type prediction performance using the dataset and metholody from Yee & Guha (2023).\nWe only evaluate JavaScript packages that have never been translated to TypeScript and compare StarCoder\nto InCoder, the best-performing model by Yee & Guha (2023). StarCoder outperforms InCoder in several\nways.\nModel\nBLEU\nInCoder-6B\n18.27\nSantaCoder\n19.74\nStarCoderBase\n21.38\nStarCoder\n21.99\nTable 20: Performance on the Python portion of the CodeXGLUE Code Summarization task, evaluating\nfunction docstring generation. Models are evaluated zero-shot using their infilling capability.\nPython Docstring Generation\nTo evaluate modelsâ ability to generate documentation for functions, we\nuse the Python subset of the CodeXGLUE code summarization benchmark (Lu et al., 2021). This benchmark\nis constructed from the CodeSearchNet dataset (Husain et al., 2019), containing functions from public GitHub\nrepositories. Models infill the documentation string (docstring) for each function using greedy decoding,\nconditioned on the function signature and body. We follow the evaluation scheme of past work: docstrings\nare evaluated using smoothed 4-gram BLEU (Papineni et al., 2002) against the reference docstring from\nthe original function, using only the first lines of the generated and reference docstrings (removing, e.g.,\ndescriptions of function arguments and return types that may appear in later lines). In Table 20, we see that\nStarCoder and StarCoderBase obtain higher performance than past work on docstring generation. However,\nwe note that there may be an overlap between this evaluation dataset and the data used to train SantaCoder\nand the StarCoder models.\n6.3\nPerformance Improvement Through the Training Process\nWe evaluate the performance of StarCoderBase at several training checkpoints after every 200B tokens\nseen out of the total 1000B. Figure 2 (right) shows how performance (pass@1) changes during training\nfor each programming language supported by MultiPL-E. The performance curve for several high-resource\nprogramming languages suggests that training longer is likely to improve their performance further.\nHowever, some of the low-resource languages see limited improvement during training or even have a pass@1\ndecline. For example, Râs pass@1 rate drops significantly between the 800B and 1000B (final) checkpoints.\nThe dependence of pass@1 on data size (Figure 2, left) further supports the hypothesis that this is related to\nthe amount of data available. The slope of the linear fit increases between 800B and 1000B checkpoints while\nthe intercept decreases, i.e., performance improves only for languages with large enough amounts of data\n(â³1 GB).\nWe manually inspected the completions generated by R over several checkpoints to better understand model\nperformance. One might hypothesize that some problems are harder than others, and so the model gains and\nloses the ability to solve them in R over the 600B, 800B, and 1000B checkpoints, but we find that this is not\nthe case. Instead, we find significant variance in per-problem success rates for several problems (Table D.3).\nFor these problems, the pass rate between different checkpoints varies in what appears to be a completely\nuncorrelated manner. Moreover, manual inspection shows that the failures are caused by minor mistakes,\n24\n\nPublished in Transactions on Machine Learning Research (12/2023)\n10â1\n100\n101\n102\nSize after dedup, GB\n0\n5\n10\n15\n20\n25\n30\n35\nPass@1 (%)\n200B\n400B\n600B\n800B\n1000B\n200B\n400B\n600B\n800B\n1000B\nTraining tokens\ncpp\nc-sharp\nd\ngo\njava\njulia\njavascript\nlua\nphp\nperl\npython\nr\nruby\nracket\nrust\nscala\nbash\nswift\ntypescript\nFigure 2: Performance (pass@1) of StarCoderBase at several training checkpoints by data size (left) and by\nprogramming language (right). The lines in the left plot are a linear fit between pass@1 and log-dataset-size\nfor all the points except the leftmost one, where we expect the linear dependence to break due to transfer\nlearning (dashed line). The goodness of fit ranges between R2 = 0.399 for the 600B checkpoint to R2 = 0.510\nfor the 1000B checkpoint.\ne.g., not taking the absolute value when computing GCD, not converting a string to a character array, or not\nchecking edge cases.\n6.4\nPerplexity With Long Contexts\nStarCoderBase was trained with an 8K token window, allowing conditioning on and generating long code\nfiles. To evaluate the ability of the model to benefit from this larger context, we compare its perplexity (Bahl\net al., 1983) when using a full window size of 8K tokens versus a window size of 2K tokens (as used in many\nprior code models).\nTo ensure no overlap between the training data for StarCoderBase and the perplexity computation data, we\ndownloaded 10 GNU Public License (GPL) repositories from GitHub in each of the languages in Table 21.\nWe compiled all files from the repositories into a single document for each language. We then divided these\ndocuments into 8K token chunks and computed perplexity on the last 1K tokens in each chunk14 in two\nconditions: (1) the model window only contains the final 2K tokens in the chunk (i.e., the 1K being predicted\nand the previous 1K), and (2) the model window contains all 8K tokens in the chunk (i.e., the 1K tokens\nbeing predicted and the previous 7K). This evaluates the ability of the model to benefit from additional\nfile- and repo-level context when predicting code. In Table 21, we report the average perplexity of the 1K\ntoken regions across all chunks. We see that StarCoderBase indeed benefits from the extra token conditioning\nafforded by its 8K context window, with substantially lower perplexities across all languages.\n7\nNatural Language Evaluation\nAlthough the StarCoder models are principally developed to be Code LLMs, they have also been trained\non a significant amount of natural language text. Roughly 20% of its training tokens are natural language\ndata: 7% GitHub issues, 10% Markdown, 2% Jupyter notebooks, and 4% HTML. In this section, we evaluate\n14We evaluate perplexity on the final 1K tokens in each 8K chunk so that both conditions have the same evaluation tokens,\nand to avoid overly penalizing the 2K condition, as tokens at the beginning of a window tend to have higher perplexity as there\nis less context available to predict them.\n25\n\nPublished in Transactions on Machine Learning Research (12/2023)\nWindow Size\nLanguage\ncpp\nc-sharp\nc\ngo\njava\njavascript\nphp\nr\nruby\nrust\n2K tokens\n2.01\n1.90\n1.71\n1.35\n1.65\n1.98\n1.73\n1.72\n2.16\n1.84\n8K tokens\n1.79\n1.66\n1.61\n1.21\n1.54\n1.68\n1.43\n1.48\n2.02\n1.65\nTable 21: Perplexity of StarCoderBase on evaluation regions (of size 1K tokens) when using a window size\nof 2K or 8K tokens across repositories from 10 languages. The larger window size substantially reduces\nperplexity, demonstrating a benefit of StarCoderâs 8K token window.\nModel\nSize\nGSM8K CoT\n+maj1@100\nGSM8K PAL\n+maj1@40\nStarCoderBase\n15.5B\n8.4\nâ\n21.5\n31.2\nCodeGen-Multi\n16B\n3.18\nâ\n8.6\n15.2\nCodeGen-Mono\n16B\n2.6\nâ\n13.1\n22.4\n7B\n11.0\n18.1\n10.5\n16.8\n13B\n17.8\n29.3\n16.9\n28.5\nLLaMA\n33B\n35.6\n53.1\n38.7\n50.3\n65B\n50.9\n69.7\nâ\nâ\nTable 22: 8-shot accuracy on the GSM8K math-reasoning benchmark. Samples are generated with greedy\ndecoding. maj1@k denotes a majority vote over k generations. For the majority vote, we instead generate\nsamples using nucleus sampling with p = 0.95 and temperature 0.7, following Gao et al. (2022). We use\nâââ when a model was not evaluated on a given metric, or the metric is not supported in Language Model\nEvaluation Harness. The LLaMA CoT numbers are from Touvron et al. (2023).\nStarCoderBase on several natural language tasks: natural language reasoning and understanding tasks that\nmight benefit from the combination of code and text training data; and natural language generation tasks\nthat evaluate the modelâs tendencies to produce undesirable text outputs, e.g., in a documentation generation\nor interactive assistant setting.\n7.1\nMath Reasoning\nRecent work has shown that Code LLMs can be effective arithmetic and symbolic reasoners by using a\ntechnique called Program-Aided Language models (PAL; Gao et al., 2022). With PAL, the LLM reads\nthe reasoning problem and generates Python programs as the intermediate reasoning steps, which are then\nexecuted by the Python interpreter to produce the answer. In contrast, the Chain-of-Thought method (CoT;\nWei et al., 2022) prompts the LLM to produce the reasoning steps in natural language before generating the\nanswer.\nWe investigate the reasoning capabilities of StarCoderBase on GSM8K (Cobbe et al., 2021), a set of middle-\nschool math word problems. We compare with the two CodeGen-16B models (Nijkamp et al., 2023) and the\nfamily of LLaMA models (Touvron et al., 2023). The results of our evaluation are presented in Table 22,\nwhere we provide both CoT and PAL results for StarCoderBase and LLaMA.\nIn line with previous results comparing PAL to CoT on Code LLMs (Gao et al., 2022), we find that StarCoder-\nBase performs better with PAL (21.5%) than with CoT (8.4%). StarCoderBase substantially outperforms\nCodeGen-16B-Mono and CodeGen-16B-Multi, which achieve 13.1% and 8.6% with PAL, respectively. These\ndifferences carry over to the setting where majority voting is applied. The difference between CoT and PAL\nis much smaller for the LLaMA models, although we observe that CoT performs slightly better for the 7B\nand 13B LLaMA models. Interestingly, we find that StarCoderBase outperforms LLaMA-13B (17.8%) on\nthis reasoning benchmark. However, its performance still lags behind LLaMA-33B (38.7%).\n26\n\nPublished in Transactions on Machine Learning Research (12/2023)\nModel\nSize\nMMLU 5-shot\nacc, %\nCodeGen-Multi\n16B\n27.8\nGPT-NeoX\n20B\n32.9\nStarCoder\n15.5B\n33.9\nStarCoderBase\n15.5B\n34.2\nLLaMA\n7B\n35.1\nLLaMA\n13B\n46.9\nTable 23: 5-shot accuracy on the MMLU language understanding benchmark.\nModel\nSize\nCoQA zero-shot\nF1 score\nCodeGen-Multi\n16B\n0.59\nStarCoderBase\n15.5B\n0.67\nStarCoder\n15.5B\n0.67\nLLaMA\n7B\n0.71\nLLaMA\n13B\n0.73\nGPT-NeoX\n20B\n0.73\nTable 24: Zero-shot accuracy on the CoQA question answering challenge.\n7.2\nWorld Knowledge and Reading Comprehension\nMMLU (Hendrycks et al., 2020) is a massive multitask language understanding benchmark, covering multiple-\nchoice questions in 57 knowledge domains, including the humanities, STEM, and social sciences. CoQA (Reddy\net al., 2019) is a large-scale dataset for Conversational Question Answering systems, measuring the modelâs\nability to process a text passage and answer a series of interconnected questions. We compare StarCoderBase\nand StarCoder with CodeGen-16B-Multi (Nijkamp et al., 2023), GPT-NeoX (Black et al., 2022), LLaMA-7B,\nand LLaMA-13B (Touvron et al., 2023).\nWe present the 5-shot accuracy for MMLU in Table 23, and the zero-shot F1 scores for CoQA in Table 24. On\nMMLU, StarCoderBase outperforms CodeGen-16B-Multi significantly (34.2% to 27.8%), and even outperforms\nGPT-NeoX by a small margin (32.9%). Nevertheless, both LLaMA models outperform StarCoderBase. On\nCoQA, StarCoderBase performs better than CodeGen-16B-Multi but is outperformed by LLaMA and\nGPT-NeoX.\n7.3\nMeasuring Harmful Generation\nWhen generating open-ended text such as code documentation or technical dialogue, a Code LLM (similarly\nto text-only LLMs) might produce harmful outputs. We compare StarCoderBase to previous Code LLMs on\nbenchmarks that measure social bias and toxicity in model-produced text.15\n7.3.1\nSocial Bias\nRecent work has highlighted that LLMs often capture social biases and stereotypes from their pre-training\ncorpora (Kurita et al., 2019; May et al., 2019; Hutchinson et al., 2020; Meade et al., 2023). To quantify social\nbias within our model, we use StereoSet (Nadeem et al., 2021).\nStereoSet consists of a collection of fill-in-the-blank-style tests for measuring social biases within language\nmodels.16 Each example in StereoSet consists of an incomplete sentence (e.g., our housekeeper is BLANK)\n15Code for the evaluations is available here: https://github.com/McGill-NLP/StarCoderSafetyEval\n16We only evaluate against the intrasentence task in this work.\n27\n\nPublished in Transactions on Machine Learning Research (12/2023)\nModel\nStereotype Score\nLanguage Model Score\nICAT Score\nGender\nLLaMA-13B\n66.54\n88.09\n58.95\nCodeGen-Multi-16B\n67.34\n86.41\n56.44\nStarCoderBase\n58.76\n86.82\n71.60\nProfession\nLLaMA-13B\n60.95\n86.74\n67.74\nCodeGen-Multi-16B\n60.67\n85.67\n67.38\nStarCoderBase\n53.24\n84.70\n79.21\nRace\nLLaMA-13B\n64.94\n87.97\n61.68\nCodeGen-Multi-16B\n60.58\n88.60\n69.85\nStarCoderBase\n56.48\n86.82\n75.58\nReligion\nLLaMA-13B\n57.95\n90.26\n75.91\nCodeGen-Multi-16B\n56.16\n88.91\n77.96\nStarCoderBase\n55.69\n90.67\n80.36\nOverall\nLLaMA-13B\n63.40\n87.62\n64.14\nCodeGen-Multi-16B\n61.29\n87.25\n67.55\nStarCoderBase\n55.53\n86.18\n76.65\nTable 25: StereoSet intrasentence results for gender, professional, racial, and religious bias. Stereotype scores\nclose to 50% are best. Language modeling scores and ICAT scores close to 100% are best.\nalongside three possible completions. Of these completions, one is stereotypical (e.g., Mexican), another is\nanti-stereotypical (e.g., Italian) and a third is unrelated (e.g., computer). StereoSet defines three metrics: a\nstereotype score, a language modeling score, and an ICAT score. The stereotype score is the percentage of\nexamples for which a model prefers the stereotypical completion for a sentence over the anti-stereotypical\ncompletion. The language modeling score is the percentage of examples for which a model prefers a meaningful\ncompletion (stereotype or anti-stereotype) over an unrelated completion. Finally, Nadeem et al. (2021) define\nan idealized context association test (ICAT) score that combines these two metrics:\nICAT = lms Â· min(ss, 100 âss)\n50\n(1)\nwhere lms and ss denote the language model score and stereotype score, respectively.\nWe report StereoSet results for StarCoderBase, alongside LLaMA-13B and CodeGen-Multi-16B, in Table 25.\nAcross all four bias domains, we find StarCoderBase obtains the lowest stereotype scores, but also has\ncompetitive language modeling scores. This suggests that StarCoderBaseâs lower stereotype scores are not\nsimply due to worse language modeling (Meade et al., 2022), and also as indicated by the high ICAT score.\nWe also evaluate StarCoderBase against Crowdsourced Stereotype Pairs (CrowS-Pairs; Nangia et al. 2020)\nand refer readers to Table D.4 for results.\n7.3.2\nToxicity\nTo evaluate toxicity in responses generated from our model, we use RealToxicityPrompts (Gehman et al.,\n2020), a collection of sentence-level prompts that often elicit undesirable responses from language models.\nWe generate responses to 10K examples from RealToxicityPrompts using StarCoderBase with a minimum\n28\n\nPublished in Transactions on Machine Learning Research (12/2023)\nModel\nClassifier\nWord List\nLLaMA-13B\n0.74\n1.43\nCodeGen-Multi-16B\n0.21\n0.82\nStarCoderBase\n0.42\n1.12\nTable 26: RealToxicityPrompts response toxicity results. We report the percentage of responses flagged as\ntoxic using a toxicity classifier and an offensive word list. Lower scores are indicative of less toxic generations.\nModel\nSize\nOpen\nAccess\nSynth.\nReason.\n(AS)\nSynth.\nReason.\n(NL)\nbAbI\nDyck\nGSM8K\nMATH\nMATH\n(CoT)\nLSAT\nLegal\nSupport\ncode-davinci-002\n175B\n54.0\n68.4\n68.6\n80.5\n56.8\n41.0\n43.3\nâ\nâ\ntext-davinci-003\n175B\n50.2\n73.4\n65.3\n75.1\n50.6\n39.0\n44.9\n23.3\n62.2\nLuminous Supreme\n70B\n31.2\nâ\n50.4\n72.9\n11.2\n14.9\n5.7\n21.2\n53.0\nStarCoderBase\n15.5B\nâ\n44.0\n21.0\n50.4\n85.4\n8.4\n15.1\n7.0\n19.0\n53.2\nCohere Command\nBeta\n52.4B\n24.3\n24.5\n47.3\n42.1\n13.8\n13.3\n7.5\n22.9\n60.6\nJ1-Jumbo v1\n178B\n26.3\n17.4\n54.3\n44.5\n5.4\n8.9\n3.3\n23.2\n48.4\nJ1-Grande v2 beta\n17B\n28.6\n13.9\n47.0\n61.7\n9.6\n12.7\n6.8\n19.1\n56.2\ncode-cushman-001\n12B\n34.1\n16.4\n48.1\n45.1\n4.9\n9.9\n7.2\nâ\nâ\nOPT\n175B\nâ\n22.5\n24.8\n50.7\n49.4\n4.0\n6.5\n2.6\n22.0\n53.2\nGPT-NeoX\n20B\nâ\n20.4\n16.7\n46.8\n74.7\n5.3\n14.1\n7.1\n19.1\n51.5\nBLOOM\n176B\nâ\n30.4\n19.7\n44.7\n54.5\n9.5\n4.3\n5.5\n20.9\n54.3\nGLM\n130B\nâ\n25.2\n25.4\n44.3\n54.9\n6.1\n0\n5.9\n19.3\n45.1\nUL2\n20B\nâ\n20.5\n21.7\n50.1\n14.0\n2.4\n0\n0\n20.7\n50.6\nOPT\n66B\nâ\n19.3\n21.3\n40.8\n47.1\n1.8\n4.8\n2.9\n17.5\n52.7\nYaLM\n100B\nâ\n5.6\n6.1\n34.6\n63.3\n0\n0\n0\n2.3\n48.4\nT5\n11B\nâ\n19.6\n10.1\n41.2\n34.7\n2.3\n0\n0\n15.9\n55.8\nTable 27: Model results on natural language reasoning tasks in the HELM benchmark, with models ordered\nby their average rank on the tasks. We use âââ when a model was not evaluated on a given metric, or has\nruntime errors logged in HELM (e.g., âunmapped predictionâ for the code-davinci-002 and code-cushman-001\nmodels on LSAT and Legal Support). StarCoder generally substantially outperforms other open-access\nmodels, and often outperforms much larger models.\nlength of one token and a maximum length of 128 tokens. We use nucleus sampling (Holtzman et al., 2020)\nwith p = 0.95 to generate all of our responses.\nWe use two methods for automatically evaluating toxicity in responses: (i) a RoBERTa-based (Liu et al.,\n2019) toxicity classifier (Vidgen et al., 2021) and (ii) a list of potentially offensive words.17 For the toxicity\ndetector, we report the percentage of responses flagged toxic using a threshold of 0.5. For the offensive word\nlist, we report the percentage of responses which contain an offensive word. We note that while the offensive\nword list can potentially falsely flag responses, it may provide a crude measure of blatant toxicity. We report\nour results in Table 26.\nIn general, we observe that CodeGen-16B-Multi and StarCoderBase both appear to generate less toxic\nresponses than LLaMA-13B. For instance, 1.43% of LLaMA-13Bâs responses contain potentially offensive\ntokens compared to the 1.12% of StarCoderBase. We also note that CodeGen-16B-Multi appears to generate\nless toxic responses than StarCoderBase.\n7.4\nReasoning Tasks in HELM\nWe evaluate StarCoderBase with HELM (Liang et al., 2022), an evaluation suite aiming to increase the\ntransparency of LLMs by reporting their performance on a wide range of tasks. We evaluate the ability of\nthe model to leverage its natural language and code pretraining for natural language reasoning tasks from\nHELM (excluding code tasks, because of our own extensive code evaluations). At the time of writing, the\nHELM benchmark does not include the CodeGen, CodeGeex, and LLaMA models. Therefore, we compare\n17https://github.com/LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words\n29\n\nPublished in Transactions on Machine Learning Research (12/2023)\nStarCoderBase with the largest and/or most recent model from each family of âlimitedâ or âopenâ access\nmodels, as classified on the HELM model list,18 that had been evaluated on a majority of these HELM\nreasoning tasks as of May 1, 2023. In Table 27 we report the results. We compute each modelâs ranking\non each task, and order models in the table by their average ranking across tasks. StarCoderBase generally\nobtains substantially stronger performance than all other models with released weights and often performs\ncomparably to or better than much larger models. We speculate that the mixture of code and natural\nlanguage in the training data contributes to the modelâs strong performance on these reasoning tasks.\n8\nQualitative Evaluation\nIn Appendix E, we highlight several interesting interactions we had with StarCoderBase. We hope these\nserve as a starting point for researchers and developers interested in further exploring the modelâs capabilities.\nWe provide examples of how to elicit interesting model behavior using the templates for Git commits, GitHub\nissues, and Jupyter notebooks in Section E.1. In Section E.2, we demonstrate how to prompt StarCoder to act\nas a technical assistant without any instruction-tuning. In Section E.3 we find that it is also possible to prompt\nthe model using a combination of meta-data and natural language to obtain higher pass@1 performance on\nthe HumanEval benchmark.\n9\nAttribution Tools\nAs generative language tools become more ubiquitous and data-intensive, the need to understand and inspect\nthe massive amounts of text they were trained on becomes more pressing, both to understand the failure\nmodes of models as well as provide transparent data governance feedback in the form of attribution tracing and\nprovenance management of a modelâs generated output. This pressing need for understanding data (Mitchell\net al., 2022) is being increasingly recognized and operationalized in the form of dataset inspection tools and\ntoolkits (Akiki et al., 2023; Marone & Van Durme, 2023; Piktus et al., 2023). It is from this vantage point\nthat we are releasing two such data inspection tools: a membership-checking tool and a BM25 search index.\nThese complement the existing âAm I in The Stackâ tool which operates at the level of GitHub repository\nnames. The two new tools index only the files used for training and allow for matches on file content. These\ntools are available as standalone sites but are also integrated into our VSCode demo. This helps users identify\nparts of the model output that may have been copied from the training data. By utilizing the search index,\nusers can locate the corresponding source file and repository of the copied snippets.\n9.1\nMembership Checking\nMarone & Van Durme (2023) propose documenting datasets with membership testing artifacts deemed Data\nPortraits. They provide one specific implementation, based on Bloom Filters (Bloom, 1970), that offers\nfast and lightweight membership inference. We build a Bloom-filter-based portrait on strings of length 50\ncharacters from the training data. This artifact takes 26 GB, â¼3% of the data size. The inference tool is\nhosted publicly to complement other documentation artifacts. 19\nGenerations from the model can be quickly checked to approximately assess the degree of overlap with\nthe training corpus. The VSCode extension supports using this as a rapid, first-pass attribution method.\nHowever, this requires that matching strings are longer than a minimum size and does not attempt to filter\ncommon or generic code snippets. After the first pass check, users can use the full search index to further\nassess attribution.\n9.2\nSearch Index\nWe index the training dataset using Elasticsearch 7.1720 and provide two search tools to query it: one focused\non the Python subset and one covering the entire dataset. The code itself is preprocessed using a lowercase\n18https://crfm.stanford.edu/helm/latest/?models=1\n19http://stack.dataportraits.org/\n20https://www.elastic.co/guide/en/elasticsearch/reference/7.17\n30\n\nPublished in Transactions on Machine Learning Research (12/2023)\nfilter and Luceneâs ASCIIFoldingFilter, tokenized using a 3-gram tokenizer, and indexed using the default\nLucene implementation of BM25 as a similarity function. We further index the username and license fields as\nkeyword fields allowing for easy filtering and lookup based on these specific metadata fields. Both indexes are\ncurrently running in single-node mode on one virtual machine.\n10\nSocial Impact and Limitations\n10.1\nProject approach\nOpen-science and open-governance\nStarCoder is an output of a community research project. The\nproject is conducted in the spirit of Open Science (Woelfle et al., 2011), focused on the responsible development\nand use of Code LLMs. Through open-governance practices conducted throughout the project, priority in\ndecision-making has always yielded to the more responsible option even if this meant introducing limitations\nthat might impact adoption or future research. For example, the Legal, Ethics, Governance Working Group\ndecided to remove and not release a dataset of identified malicious code, even though this data might be\nuseful for future security research.\nOpenness and safety risks\nSolaiman (2023) explains how the degree of openness in the LLM development\nprocess is connected to the potential risks associated with a model release. When systems are developed in a\nfully closed manner, it is more likely for power to become concentrated among high-resourced organizations,\nand the small development team may not fully comprehend the impact and long-term consequences of the\nmodel being deployed. In addition, closed-development systems are often less auditable by external experts\nand can impede scientific progress since researchers cannot build upon each otherâs work. On the other hand,\nfully open development allows for community research, democratizes access to the models, and enables audits\nthroughout the whole development process. However, without appropriate guardrails, open LLM development\nposes a higher risk of misuse, as increased model access also increases the likelihood of harm caused by the\nmodel. Even though a released API can be shut down, once the model weights are released, it is nearly\nimpossible to retract them. Discussing and implementing responsible AI practices has, therefore, been front\nand center during the development of our projectâs LLMs.\n10.2\nLimitations\nDataset and data licensing\nStarCoder was trained on a subset of The Stack v1.2 dataset. This dataset\nhas been filtered using a license detector to only include permissively licensed source code. Nevertheless, the\nlicense detector might have incorrectly classified a number of repositories. See Kocetkov et al. (2022) for\nmore details on this license detection process.\nOpt-out process\nAlthough The Stack offers a way to remove developer code, its opt-out process only\napplies to individual repositories and could benefit from further enhancements. For example, when code\nis licensed under a permissive or copy-left license, it can be duplicated to another repository, making it\nchallenging to eliminate such copies if the copyright owner chooses to opt out. More work is necessary to\ncreate better data control and consent mechanisms for large-scale training sets of LLMs.\nPII detection\nDespite our best efforts to remove PII (Section 4), StarCoder may still produce PII (however,\nnote that the model license restricts use that aims to generate or disseminate PII with the purpose of harming\nothers). As mentioned in Section 4.2, we trained an encoder-only model to detect PII for both code- and\ntext-related tasks and noted that there is a possibility of false positives and negatives, which could lead to\nunintended consequences when processing sensitive data. Moreover, the PII detection modelâs performance\nmay vary across different data types and programming languages, necessitating further validation and fine-\ntuning for specific use cases. The PII annotations are only available to approved individuals, and researchers\nand developers who are granted access are expected to uphold ethical standards and data protection measures.\nBy making it accessible, our aim is to encourage further research and development of PII redaction technology.\n31\n\nPublished in Transactions on Machine Learning Research (12/2023)\nMalicious code\nOn the Hugging Face platform, where the Stack is hosted, a malicious code detection\ntool identified 654 files as unsafe. With the help of our community, we removed these files ahead of the\nrelease of The Stack v1.2. Nevertheless, The Stack may contain undetected malicious code, and StarCoder\nmight be able to generate malware. The StarCoder OpenRAIL-M license, therefore, includes a use restriction\nagainst generating and/or disseminating malware (including â but not limited to â ransomware) or any\nother content that can be used to harm electronic systems.\nModel limitations\nStarCoder is subject to typical limitations of LLMs, including the potential to generate\ncontent that is inaccurate, offensive, misleading, discriminatory towards age or gender, or reinforces other\nstereotypes. Please refer to Section 7.3 for an investigation into such safety concerns. Deployments of\nStarCoder need to further challenge and adapt the model to prevent such behavior, e.g., through red-\nteaming (Perez et al., 2022), adversarial testing (Wan et al., 2023), and/or by adding a robust safety\nlayer (OpenAI, 2023b). The model is released with an OpenRAIL-M license that places enforceable use\nrestrictions that apply to the model and its modifications, and to applications using the model.\nEnglish-only evaluations\nWe evaluated the performance of StarCoder solely on English-based benchmarks\nto understand its coding capabilities and natural language understanding. To make these models more\naccessible to a wider audience, future research should investigate the performance and limitations of Code\nLLMs on other natural languages.\nCode attribution tools\nThe StarCoder membership-checking tool and BM25 search index are limited\nto dataset inspection against the subset of The Stack that was used for training and, as such, will not\nfind matches to code that was not included or that was removed from the dataset for this project. The\nPortraits-based membership testing tool uses hash matching and thus may have false positives. It also has a\nminimum resolution and requires a certain amount of context to trigger a match. Both attribution tools do\nnot attempt to distinguish between generic code (e.g., boilerplate) or protected content. However, we hope\nthat these tools will support ongoing research on the responsible development of LLMs.\n10.3\nSocial impact\nCode LLMs\nWe expect Code LLMs to enable people from diverse backgrounds to learn to write higher-\nquality code and develop low-code applications (Leinonen et al., 2023). Mission-critical software could become\neasier to maintain as professional developers are guided by code-generating systems on how to write more\nrobust and efficient code. However, the security implications should also be carefully considered (Sandoval\net al., 2023). While the social impact is intended to be positive, the increased accessibility of Code LLMs\ncomes with certain risks such as over-reliance on the generated code and long-term effects on the software\ndevelopment job market. We refer the reader to Chen et al. (2021, Section 7) for a broader impact analysis\nof Code LLMs, as well as Khlaaf et al. (2022) for an in-depth risk assessment and hazard analysis of this\nemerging technology.\nData annotation\nIt was important for the project to only use reputable data annotation services. It\nwas also important to balance the constraints of costs (fair compensation), time (the timing and time to\ncomplete the work were on the critical path for the project), and quality (to ensure that PII Detection\nModel training was not impacted). While traditional data annotation services using salaried employees were\nconsidered, the decision to work with Toloka crowd-workers was taken after a review of service providers and\ntheir compensation practices â most would not provide sufficient transparency and guarantees about worker\ncompensation. Our determination of compensation took into consideration different minimum wage rates\nacross countries and their corresponding purchasing power. We limited annotation eligibility to countries\nwhere the hourly pay rate of $7.30 was equivalent to the highest minimum wage in the US ($16.50) in terms\nof purchasing power parity.\nFeedback opt-out form\nDuring the first stage of the opt-out process, individuals were asked to specify\nthe reasons for wanting their code to be excluded from the dataset. The recurring concerns we heard from\nthe individual who wished to opt out are:\n32\n\nPublished in Transactions on Machine Learning Research (12/2023)\nâ¢ Preference for an opt-in approach instead of opt-out.\nâ¢ Perception that it is unfair to use their code without compensation\nâ¢ Concerns about the current limitations of AI and the potential for model generations to be traced\nback to their work, resulting in potential legal liability.\nâ¢ Belief that their code is of poor quality and unsuitable for AI training.\nâ¢ Presence of PII in their code, which they do not wish to be publicly exposed.\nThe opt-out form thus provided an opportunity to directly engage with content creators and learn about the\nimpact of our work on them.\nCommunity feedback on opt-out process\nWe conducted community research with individuals at\nspecific organizations whose data is used in The Stack (The Alan Turing Institute and The Turing Way) and\ncontributed to two open, international workshops (Open Data Day 2023 and Mozilla Festival 2023 with a\nsession titled âDesigning for Data Rights in the AI Production Pipelineâ). These qualitative interviews and\nparticipatory co-design workshops included 50 participants, primarily from North America and Europe, with\nroles including research scientist, community manager, software engineer, and principal investigator (PI).\nThe outcomes from the community research can be summarized as follows: when it comes to governance of\nLLM datasets, participants feel that it is both better to know and better to have a choice. Most participants\nhad neutral to positive feelings about their permissively licensed data being used to train LLMs. While all\nhad positive impressions of the âAm I in The Stackâ tool, not one interviewed expressed a desire to actually\nopt out. The main takeaway seemed to be that participants found the most value in the projectâs governance\ntools for their ability to raise awareness of data practices and to empower individuals and communities to\ntake action based on their specific needs. These initial conversations also highlighted the importance of\nbringing governance discussions and decisions directly to impacted communities, an important direction of\nfuture work that should extend community research beyond North America and Europe. Participants in the\nworkshops also raised examples of new groups to center in data rights considerations, including artists, data\nminers, and future generations. The co-created outputs can be viewed on this MozFest Miro Board.\n11\nConclusion\nIn this technical report, we described the efforts of the BigCode community in creating StarCoderBase and\nStarCoder, open-access 15.5B parameter large language models trained on code. We provided full transparency\non all aspects of the research and development process, including the training data, the data curation process,\nthe PII redaction pipeline, and the model training. We conducted the most extensive evaluation of Code\nLLMs to date, finding that StarCoder outperforms other Code LLMs like CodeGen (Nijkamp et al., 2023)\nand CodeGeeX (Zheng et al., 2023), and matches or outperforms the closed-access code-cushman-001 model\nfrom OpenAI. By releasing the StarCoder models with an Open Responsible AI Model license, and by open-\nsourcing all code repositories for building the model on GitHub, we aim to increase access, reproducibility,\nand transparency of Code LLMs in the research and developer communities. The model license includes\nuse restrictions to ensure that modifications of the model and applications using the model adhere to our\nprinciples of responsible AI. In addition, we released a novel set of attribution tools to help end-users of\nCode LLMs to detect and locate model generations that may have been copied from the training set. We\nhope these measures contribute towards a safe model release, ensuring that the strong-performing StarCoder\nmodels remain a force for good.\nAcknowledgements\nWe would thank Hugging Face for providing the compute resources to train the\nStarCoder models. We also thank Suriya Gunasekar for help with the data inspection, and Sebastien\nPaquet for proofreading this work. Carolyn Jane Anderson, Arjun Guha, Ming-Ho Yee, and Yangtian Zi\nand are supported by U.S. National Science Foundation awards SES-2326174 and CCF-2102288. Evgenii\nZheltonozhskii is supported by the Adams Fellowships Program of the Israel Academy of Sciences and\nHumanities.\n33\n\nPublished in Transactions on Machine Learning Research (12/2023)\nReferences\nWasi Ahmad, Saikat Chakraborty, Baishakhi Ray, and Kai-Wei Chang. Unified pre-training for program un-\nderstanding and generation. In Proceedings of NAACL, 2021. URL https://aclanthology.org/2021.naacl-\nmain.211. (cited on p. 4)\nChristopher Akiki, Giada Pistilli, Margot Mieskes, Matthias GallÃ©, Thomas Wolf, Suzana Ilic, and Yacine\nJernite. BigScience: a case study in the social construction of a multilingual large language model. CoRR,\nabs/2212.04960, 2022. doi: 10.48550/arXiv.2212.04960. URL https://doi.org/10.48550/arXiv.2212.04960.\n(cited on p. 2)\nChristopher Akiki, Odunayo Ogundepo, Aleksandra Piktus, Xinyu Zhang, Akintunde Oladipo, Jimmy Lin,\nand Martin Potthast. Spacerini: Plug-and-play search engines with Pyserini and Hugging Face. CoRR,\nabs/2302.14534, 2023. doi: 10.48550/arXiv.2302.14534. URL https://doi.org/10.48550/arXiv.2302.14534.\n(cited on p. 30)\nAndersen et al v. Stability AI et al. 3:23-cv-00201 N.D. Cal. 2023. (cited on p. 2)\nAmanda Askell, Yuntao Bai, Anna Chen, Dawn Drain, Deep Ganguli, Tom Henighan, Andy Jones, Nicholas\nJoseph, Ben Mann, Nova DasSarma, Nelson Elhage, Zac Hatfield-Dodds, Danny Hernandez, Jackson\nKernion, Kamal Ndousse, Catherine Olsson, Dario Amodei, Tom Brown, Jack Clark, Sam McCandlish,\nChris Olah, and Jared Kaplan. A general language assistant as a laboratory for alignment. arXiv preprint\narXiv:2112.00861, 2021. (cited on p. 48)\nJacob Austin, Augustus Odena, Maxwell Nye, Maarten Bosma, Henryk Michalewski, David Dohan, Ellen\nJiang, Carrie Cai, Michael Terry, Quoc Le, and Charles Sutton. Program synthesis with large language\nmodels. arXiv preprint arXiv:2108.07732, 2021. (cited on pp. 3, 4, 17, 18, and 21)\nLalit Bahl, Frederick Jelinek, and Robert Mercer. A maximum likelihood approach to continuous speech\nrecognition. Pattern Analysis and Machine Intelligence, IEEE Transactions on, PAMI-5:179 â 190, 04\n1983. doi: 10.1109/TPAMI.1983.4767370. (cited on p. 25)\nMohammad Bavarian, Heewoo Jun, Nikolas Tezak, John Schulman, Christine McLeavey, Jerry Tworek, and\nMark Chen. Efficient training of language models to fill in the middle. arXiv preprint arXiv:2207.14255,\n2022. doi: 10.48550/ARXIV.2207.14255. URL https://arxiv.org/abs/2207.14255. (cited on pp. 3, 15, 16,\nand 23)\nBBC. ChatGPT accessible again in Italy. https://www.bbc.com/news/technology-65431914, 2023. (cited on\np. 2)\nLoubna Ben Allal, Niklas Muennighoff, Logesh Kumar Umapathi, Ben Lipkin, and Leandro Von Werra. A\nframework for the evaluation of code generation models. https://github.com/bigcode-project/bigcode-\nevaluation-harness, December 2022. (cited on pp. 3 and 17)\nLoubna Ben Allal, Raymond Li, Denis Kocetkov, Chenghao Mou, Christopher Akiki, Carlos Munoz Ferrandis,\nNiklas Muennighoff, Mayank Mishra, Alex Gu, Manan Dey, Logesh Kumar Umapathi, Carolyn Jane\nAnderson, Yangtian Zi, Joel Lamy Poirier, Hailey Schoelkopf, Sergey Troshin, Dmitry Abulkhanov, Manuel\nRomero, Michael Lappert, Francesco De Toni, Bernardo GarcÃ­a del RÃ­o, Qian Liu, Shamik Bose, Urvashi\nBhattacharyya, Terry Yue Zhuo, Ian Yu, Paulo Villegas, Marco Zocca, Sourab Mangrulkar, David Lansky,\nHuu Nguyen, Danish Contractor, Luis Villa, Jia Li, Dzmitry Bahdanau, Yacine Jernite, Sean Hughes,\nDaniel Fried, Arjun Guha, Harm de Vries, and Leandro von Werra. SantaCoder: donât reach for the stars!\nIn Deep Learning for Code Workshop (DL4C), 2023. (cited on pp. 4, 9, 11, 12, 13, 14, 16, and 23)\nYoshua Bengio, RÃ©jean Ducharme, and Pascal Vincent.\nA neural probabilistic language model.\nIn\nT. Leen, T. Dietterich, and V. Tresp (eds.), Advances in Neural Information Processing Systems,\nvolume 13. MIT Press, 2000.\nURL https://proceedings.neurips.cc/paper_files/paper/2000/hash/\n728f206c2a01bf572b5940d7d9a8fa4c-Abstract.html. (cited on p. 4)\n34\n\nPublished in Transactions on Machine Learning Research (12/2023)\nStella Biderman, Hailey Schoelkopf, Quentin Anthony, Herbie Bradley, Kyle OâBrien, Eric Hallahan, Mo-\nhammad Aflah Khan, Shivanshu Purohit, USVSN Sai Prashanth, Edward Raff, Aviya Skowron, Lintang\nSutawika, and Oskar van der Wal. Pythia: A suite for analyzing large language models across training and\nscaling. arXiv preprint arXiv:2304.01373, 2023. (cited on p. 2)\nBigScience Workshop. BLOOM (revision 4ab0472), 2022. URL https://huggingface.co/bigscience/bloom.\n(cited on p. 2)\nSid Black, Stella Biderman, Eric Hallahan, Quentin Anthony, Leo Gao, Laurence Golding, Horace He, Connor\nLeahy, Kyle McDonell, Jason Phang, Michael Pieler, USVSN Sai Prashanth, Shivanshu Purohit, Laria\nReynolds, Jonathan Tow, Ben Wang, and Samuel Weinbach. GPT-NeoX-20B: an open-source autoregressive\nlanguage model. arXiv preprint arXiv:2204.06745, 2022. (cited on pp. 2, 4, and 27)\nBurton H. Bloom. Space/time trade-offs in hash coding with allowable errors. Commun. ACM, 13(7):422â426,\njul 1970. ISSN 0001-0782. doi: 10.1145/362686.362692. URL https://doi.org/10.1145/362686.362692.\n(cited on p. 30)\nRishi Bommasani, Drew A. Hudson, Ehsan Adeli, Russ Altman, Simran Arora, Sydney von Arx, Michael S.\nBernstein, Jeannette Bohg, Antoine Bosselut, Emma Brunskill, Erik Brynjolfsson, Shyamal Buch, Dallas\nCard, Rodrigo Castellon, Niladri S. Chatterji, Annie S. Chen, Kathleen Creel, Jared Quincy Davis, Dorottya\nDemszky, Chris Donahue, Moussa Doumbouya, Esin Durmus, Stefano Ermon, John Etchemendy, Kawin\nEthayarajh, Li Fei-Fei, Chelsea Finn, Trevor Gale, Lauren Gillespie, Karan Goel, Noah D. Goodman,\nShelby Grossman, Neel Guha, Tatsunori Hashimoto, Peter Henderson, John Hewitt, Daniel E. Ho, Jenny\nHong, Kyle Hsu, Jing Huang, Thomas Icard, Saahil Jain, Dan Jurafsky, Pratyusha Kalluri, Siddharth\nKaramcheti, Geoff Keeling, Fereshte Khani, Omar Khattab, Pang Wei Koh, Mark S. Krass, Ranjay Krishna,\nRohith Kuditipudi, and et al. On the opportunities and risks of foundation models. CoRR, abs/2108.07258,\n2021. URL https://arxiv.org/abs/2108.07258. (cited on p. 2)\nThorsten Brants, Ashok C. Popat, Peng Xu, Franz J. Och, and Jeffrey Dean. Large language models in\nmachine translation. In Proceedings of the 2007 Joint Conference on Empirical Methods in Natural Language\nProcessing and Computational Natural Language Learning (EMNLP-CoNLL), pp. 858â867, Prague, Czech\nRepublic, June 2007. Association for Computational Linguistics. URL https://aclanthology.org/D07-\n1090. (cited on p. 3)\nAndrei Z. Broder. Identifying and filtering near-duplicate documents. In Annual symposium on combinatorial\npattern matching, pp. 1â10. Springer, 2000. (cited on p. 9)\nTom B. Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind\nNeelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen\nKrueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel M. Ziegler, Jeffrey Wu, Clemens Winter,\nChristopher Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark,\nChristopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever, and Dario Amodei. Language models\nare few-shot learners. arXiv preprint arXiv:2005.14165, 2020. (cited on pp. 2 and 4)\nChristian Buck, Kenneth Heafield, and Bas van Ooyen. N-gram counts and language models from the Common\nCrawl. In Proceedings of the Ninth International Conference on Language Resources and Evaluation\n(LRECâ14), pp. 3579â3584, Reykjavik, Iceland, May 2014. European Language Resources Association\n(ELRA). URL http://www.lrec-conf.org/proceedings/lrec2014/pdf/1097_Paper.pdf. (cited on p. 3)\nMatthew Butterick. This CoPilot is stupid and wants to kill me. https://matthewbutterick.com/chron/\nthis-copilot-is-stupid-and-wants-to-kill-me.html, 2022. (cited on p. 2)\nFederico Cassano, John Gouwar, Daniel Nguyen, Sydney Nguyen, Luna Phipps-Costin, Donald Pinckney,\nMing-Ho Yee, Yangtian Zi, Carolyn Jane Anderson, Molly Q Feldman, Arjun Guha, Michael Greenberg,\nand Abhinav Jangda. MultiPL-E: a scalable and polyglot approach to benchmarking neural code generation.\nIEEE Transactions on Software Engineering, pp. 1â17, 2023. doi: 10.1109/TSE.2023.3267446. URL\nhttps://arxiv.org/abs/2208.08227. (cited on pp. 3, 5, and 21)\n35\n\nPublished in Transactions on Machine Learning Research (12/2023)\nMark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde de Oliveira Pinto, Jared Kaplan,\nHarri Edwards, Yuri Burda, Nicholas Joseph, Greg Brockman, Alex Ray, Raul Puri, Gretchen Krueger,\nMichael Petrov, Heidy Khlaaf, Girish Sastry, Pamela Mishkin, Brooke Chan, Scott Gray, Nick Ryder,\nMikhail Pavlov, Alethea Power, Lukasz Kaiser, Mohammad Bavarian, Clemens Winter, Philippe Tillet,\nFelipe Petroski Such, Dave Cummings, Matthias Plappert, Fotios Chantzis, Elizabeth Barnes, Ariel\nHerbert-Voss, William Hebgen Guss, Alex Nichol, Alex Paino, Nikolas Tezak, Jie Tang, Igor Babuschkin,\nSuchir Balaji, Shantanu Jain, William Saunders, Christopher Hesse, Andrew N. Carr, Jan Leike, Josh\nAchiam, Vedant Misra, Evan Morikawa, Alec Radford, Matthew Knight, Miles Brundage, Mira Murati,\nKatie Mayer, Peter Welinder, Bob McGrew, Dario Amodei, Sam McCandlish, Ilya Sutskever, and Wojciech\nZaremba. Evaluating large language models trained on code. arXiv preprint, 2021. (cited on pp. 2, 3, 4, 17,\n18, 19, 21, and 32)\nAakanksha Chowdhery, Sharan Narang, Jacob Devlin, Maarten Bosma, Gaurav Mishra, Adam Roberts,\nPaul Barham, Hyung Won Chung, Charles Sutton, Sebastian Gehrmann, Parker Schuh, Kensen Shi,\nSasha Tsvyashchenko, Joshua Maynez, Abhishek Rao, Parker Barnes, Yi Tay, Noam Shazeer, Vinodkumar\nPrabhakaran, Emily Reif, Nan Du, Ben Hutchinson, Reiner Pope, James Bradbury, Jacob Austin, Michael\nIsard, Guy Gur-Ari, Pengcheng Yin, Toju Duke, Anselm Levskaya, Sanjay Ghemawat, Sunipa Dev, Henryk\nMichalewski, Xavier Garcia, Vedant Misra, Kevin Robinson, Liam Fedus, Denny Zhou, Daphne Ippolito,\nDavid Luan, Hyeontaek Lim, Barret Zoph, Alexander Spiridonov, Ryan Sepassi, David Dohan, Shivani\nAgrawal, Mark Omernick, Andrew M. Dai, Thanumalayan Sankaranarayana Pillai, Marie Pellat, Aitor\nLewkowycz, Erica Moreira, Rewon Child, Oleksandr Polozov, Katherine Lee, Zongwei Zhou, Xuezhi Wang,\nBrennan Saeta, Mark Diaz, Orhan Firat, Michele Catasta, Jason Wei, Kathy Meier-Hellstern, Douglas\nEck, Jeff Dean, Slav Petrov, and Noah Fiedel. PaLM: scaling language modeling with pathways. CoRR,\nabs/2204.02311, 2022. doi: 10.48550/arXiv.2204.02311. URL https://doi.org/10.48550/arXiv.2204.02311.\n(cited on pp. 2, 4, and 18)\nKarl Cobbe, Vineet Kosaraju, Mohammad Bavarian, Mark Chen, Heewoo Jun, Lukasz Kaiser, Matthias\nPlappert, Jerry Tworek, Jacob Hilton, Reiichiro Nakano, Christopher Hesse, and John Schulman. Training\nverifiers to solve math word problems. arXiv preprint arXiv:2110.14168, 2021. (cited on pp. 3 and 26)\nTri Dao, Daniel Y. Fu, Stefano Ermon, Atri Rudra, and Christopher RÃ©. FlashAttention: Fast and memory-\nefficient exact attention with IO-awareness. In Advances in Neural Information Processing Systems, 2022.\n(cited on pp. 3 and 16)\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of deep bidirectional\ntransformers for language understanding. In Proceedings of the 2019 Conference of the North American\nChapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long\nand Short Papers), pp. 4171â4186, Minneapolis, Minnesota, June 2019. Association for Computational\nLinguistics. doi: 10.18653/v1/N19-1423. URL https://aclanthology.org/N19-1423. (cited on p. 11)\nDOE 1 v. and GitHub, Inc. 4:22-cv-06823 N.D. Cal. 2022. (cited on p. 2)\nTyna Eloundou, Sam Manning, Pamela Mishkin, and Daniel Rock. GPTs are GPTs: An early look at the\nlabor market impact potential of large language models. arXiv preprint arXiv:2303.10130, 2023. (cited on\np. 2)\nEuronews. Microsoft attracting users to its code-writing, generative AI software. https://www.euronews.com/\nnext/2023/01/25/microsoft-results-ai, 2023. (cited on p. 2)\nEuropean Council. The general data protection regulation. https://www.consilium.europa.eu/en/policies/\ndata-protection/data-protection-regulation/, 2018. (cited on p. 2)\nZhangyin Feng, Daya Guo, Duyu Tang, Nan Duan, Xiaocheng Feng, Ming Gong, Linjun Shou, Bing\nQin, Ting Liu, Daxin Jiang, and Ming Zhou. Codebert: A pre-trained model for programming and\nnatural languages. arXiv preprint arXiv:2002.08155, 2020. doi: 10.48550/ARXIV.2002.08155. URL\nhttps://arxiv.org/abs/2002.08155. (cited on p. 4)\n36\n\nPublished in Transactions on Machine Learning Research (12/2023)\nDaniel Fried, Armen Aghajanyan, Jessy Lin, Sida Wang, Eric Wallace, Freda Shi, Ruiqi Zhong, Wen-tau\nYih, Luke Zettlemoyer, and Mike Lewis. InCoder: a generative model for code infilling and synthesis.\narXiv preprint arXiv:2204.05999, 2022. doi: 10.48550/ARXIV.2204.05999. URL https://arxiv.org/abs/\n2204.05999. (cited on pp. 2, 3, 4, 19, and 23)\nLeo Gao, Stella Biderman, Sid Black, Laurence Golding, Travis Hoppe, Charles Foster, Jason Phang, Horace\nHe, Anish Thite, Noa Nabeshima, Shawn Presser, and Connor Leahy. The Pile: An 800GB dataset of\ndiverse text for language modeling. arXiv preprint arXiv:2101.00027, 2021a. (cited on pp. 2, 4, and 17)\nLeo Gao, Jonathan Tow, Stella Biderman, Sid Black, Anthony DiPofi, Charles Foster, Laurence Golding,\nJeffrey Hsu, Kyle McDonell, Niklas Muennighoff, Jason Phang, Laria Reynolds, Eric Tang, Anish Thite,\nBen Wang, Kevin Wang, and Andy Zou. A framework for few-shot language model evaluation, September\n2021b. URL https://doi.org/10.5281/zenodo.5371628. (cited on p. 17)\nLuyu Gao, Aman Madaan, Shuyan Zhou, Uri Alon, Pengfei Liu, Yiming Yang, Jamie Callan, and Graham\nNeubig. PAL: Program-aided language models. arXiv preprint arXiv:2211.10435, 2022. (cited on pp. 26\nand 48)\nSamuel Gehman, Suchin Gururangan, Maarten Sap, Yejin Choi, and Noah A. Smith. RealToxicityPrompts:\nEvaluating Neural Toxic Degeneration in Language Models. In Findings of the Association for Computa-\ntional Linguistics: EMNLP 2020, pp. 3356â3369, Online, November 2020. Association for Computational\nLinguistics. doi: 10.18653/v1/2020.findings-emnlp.301. URL https://aclanthology.org/2020.findings-\nemnlp.301. (cited on pp. 3 and 28)\nKenneth Heafield, Ivan Pouzyrevsky, Jonathan H. Clark, and Philipp Koehn. Scalable modified Kneser-\nNey language model estimation.\nIn Proceedings of the 51st Annual Meeting of the Association for\nComputational Linguistics (Volume 2: Short Papers), pp. 690â696, Sofia, Bulgaria, August 2013. Association\nfor Computational Linguistics. URL https://aclanthology.org/P13-2121. (cited on p. 3)\nPeter Henderson, Xuechen Li, Dan Jurafsky, Tatsunori Hashimoto, Mark A Lemley, and Percy Liang.\nFoundation models and fair use. arXiv preprint arXiv:2303.15715, 2023. (cited on p. 2)\nDan Hendrycks, Collin Burns, Steven Basart, Andy Zou, Mantas Mazeika, Dawn Song, and Jacob Steinhardt.\nMeasuring massive multitask language understanding. arXiv preprint arXiv:2009.03300, 2020. (cited on\npp. 3 and 27)\nAbram Hindle, Earl T Barr, Zhendong Su, Mark Gabel, and Premkumar Devanbu. On the naturalness of\nsoftware. In 2012 34th International Conference on Software Engineering (ICSE), pp. 837â847. IEEE, 2012.\n(cited on p. 4)\nJordan Hoffmann, Sebastian Borgeaud, Arthur Mensch, Elena Buchatskaya, Trevor Cai, Eliza Rutherford,\nDiego de Las Casas, Lisa Anne Hendricks, Johannes Welbl, Aidan Clark, Tom Hennigan, Eric Noland,\nKatie Millican, George van den Driessche, Bogdan Damoc, Aurelia Guy, Simon Osindero, Karen Simonyan,\nErich Elsen, Jack W. Rae, Oriol Vinyals, and Laurent Sifre. Training compute-optimal large language\nmodels. arXiv preprint arXiv:2203.15556, 2022. (cited on pp. 2 and 4)\nAri Holtzman, Jan Buys, Li Du, Maxwell Forbes, and Yejin Choi. The curious case of neural text degeneration.\nIn International Conference on Learning Representations, 2020. URL https://openreview.net/forum?id=\nrygGQyrFvH. (cited on p. 29)\nHamel Husain, Ho-Hsiang Wu, Tiferet Gazit, Miltiadis Allamanis, and Marc Brockschmidt. CodeSearchNet\nchallenge: Evaluating the state of semantic code search. arXiv preprint arXiv:1909.09436, 2019. (cited on\np. 24)\nBen Hutchinson, Vinodkumar Prabhakaran, Emily Denton, Kellie Webster, Yu Zhong, and Stephen Denuyl.\nSocial biases in NLP models as barriers for persons with disabilities. In Proceedings of the 58th Annual\nMeeting of the Association for Computational Linguistics, pp. 5491â5501, Online, July 2020. Association\nfor Computational Linguistics. doi: 10.18653/v1/2020.acl-main.487. URL https://aclanthology.org/\n2020.acl-main.487. (cited on p. 27)\n37\n\nPublished in Transactions on Machine Learning Research (12/2023)\nRafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploring the limits of\nlanguage modeling. arXiv preprint arXiv:1602.02410, 2016. (cited on p. 4)\nAditya Kanade, Petros Maniatis, Gogul Balakrishnan, and Kensen Shi. Learning and evaluating contextual\nembedding of source code. In Proceedings of the 37th International Conference on Machine Learning,\nICMLâ20. JMLR.org, 2020. (cited on p. 4)\nJared Kaplan, Sam McCandlish, Tom Henighan, Tom B Brown, Benjamin Chess, Rewon Child, Scott Gray,\nAlec Radford, Jeffrey Wu, and Dario Amodei. Scaling laws for neural language models. arXiv preprint\narXiv:2001.08361, 2020. (cited on p. 4)\nHeidy Khlaaf, Pamela Mishkin, Joshua Achiam, Gretchen Krueger, and Miles Brundage. A hazard analysis\nframework for code synthesis large language models. arXiv preprint arXiv:2207.14157, 2022. (cited on p.\n32)\nDiederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In Yoshua Bengio and\nYann LeCun (eds.), 3rd International Conference on Learning Representations, ICLR 2015, San Diego,\nCA, USA, May 7-9, 2015, Conference Track Proceedings, 2015. URL http://arxiv.org/abs/1412.6980.\n(cited on p. 16)\nDenis Kocetkov, Raymond Li, Loubna Ben Allal, Jia Li, Chenghao Mou, Carlos MuÃ±oz Ferrandis, Yacine\nJernite, Margaret Mitchell, Sean Hughes, Thomas Wolf, Dzmitry Bahdanau, Leandro von Werra, and\nHarm de Vries. The Stack: 3 TB of permissively licensed source code. Preprint, 2022. URL https:\n//arxiv.org/abs/2211.15533. (cited on pp. 1, 3, 4, 5, 9, and 31)\nTakeshi Kojima, Shixiang Shane Gu, Machel Reid, Yutaka Matsuo, and Yusuke Iwasawa. Large language\nmodels are zero-shot reasoners. arXiv preprint arXiv:2205.11916, 2022. (cited on p. 48)\nBradley M. Kuhn. If software is my copilot, who programmed my software? https://sfconservancy.org/\nblog/2022/feb/03/github-copilot-copyleft-gpl/, 2022. (cited on p. 2)\nKeita Kurita, Nidhi Vyas, Ayush Pareek, Alan W Black, and Yulia Tsvetkov. Measuring bias in contextualized\nword representations. In Proceedings of the First Workshop on Gender Bias in Natural Language Processing,\npp. 166â172, Florence, Italy, August 2019. Association for Computational Linguistics. doi: 10.18653/v1/\nW19-3823. URL https://www.aclweb.org/anthology/W19-3823. (cited on p. 27)\nAlexandre Lacoste, Alexandra Luccioni, Victor Schmidt, and Thomas Dandres. Quantifying the carbon\nemissions of machine learning. arXiv preprint arXiv:1910.09700, 2019. (cited on p. 17)\nYuhang Lai, Chengxi Li, Yiming Wang, Tianyi Zhang, Ruiqi Zhong, Luke Zettlemoyer, Scott Wen tau Yih,\nDaniel Fried, Sida Wang, and Tao Yu. DS-1000: a natural and reliable benchmark for data science code\ngeneration. ArXiv, abs/2211.11501, 2022. (cited on pp. 3, 17, 18, 19, and 20)\nDong-Hyun Lee. Pseudo-label: The simple and efficient semi-supervised learning method for deep neural\nnetworks. In Workshop on challenges in representation learning, ICML, number 2, pp. 896, 2013. (cited on\np. 13)\nJuho Leinonen, Paul Denny, Stephen MacNeil, Sami Sarsa, Seth Bernstein, Joanne Kim, Andrew Tran, and\nArto Hellas. Comparing code explanations created by students and large language models, 2023. (cited on\np. 32)\nMark A Lemley and Bryan Casey.\nFair learning.\nTex. L. Rev., 99:743, 2020.\nURL https://\ntexaslawreview.org/fair-learning/. (cited on p. 2)\nAmanda Levendowski. How copyright law can fix artificial intelligenceâs implicit bias problem. Wash. L. Rev.,\n93:579, 2018. (cited on p. 2)\n38\n\nPublished in Transactions on Machine Learning Research (12/2023)\nYujia Li, David Choi, Junyoung Chung, Nate Kushman, Julian Schrittwieser, RÃ©mi Leblond, Tom Eccles, James\nKeeling, Felix Gimeno, Agustin Dal Lago, Thomas Hubert, Peter Choy, Cyprien de Masson dâAutume, Igor\nBabuschkin, Xinyun Chen, Po-Sen Huang, Johannes Welbl, Sven Gowal, Alexey Cherepanov, James Molloy,\nDaniel Mankowitz, Esme Sutherland Robson, Pushmeet Kohli, Nando de Freitas, Koray Kavukcuoglu, and\nOriol Vinyals. Competition-level code generation with alphacode. arXiv preprint arXiv:2203.07814, 2022.\n(cited on p. 4)\nPercy Liang, Rishi Bommasani, Tony Lee, Dimitris Tsipras, Dilara Soylu, Michihiro Yasunaga, Yian Zhang,\nDeepak Narayanan, Yuhuai Wu, Ananya Kumar, et al. Holistic evaluation of language models. arXiv\npreprint arXiv:2211.09110, 2022. (cited on pp. 3 and 29)\nYinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke\nZettlemoyer, and Veselin Stoyanov. RoBERTa: a robustly optimized BERT pretraining approach. arXiv\npreprint arXiv:1907.11692, 2019. (cited on pp. 11 and 29)\nNatasha Lomas.\nUnpicking the rules shaping generative AI.\nhttps://techcrunch.com/2023/04/13/\ngenerative-ai-gdpr-enforcement/, 2022. (cited on p. 2)\nShuai Lu, Daya Guo, Shuo Ren, Junjie Huang, Alexey Svyatkovskiy, Ambrosio Blanco, Colin Clement,\nDawn Drain, Daxin Jiang, Duyu Tang, Ge Li, Lidong Zhou, Linjun Shou, Long Zhou, Michele Tufano,\nMing Gong, Ming Zhou, Nan Duan, Neel Sundaresan, Shao Kun Deng, Shengyu Fu, and Shujie Liu.\nCodeXGLUE: A machine learning benchmark dataset for code understanding and generation. arXiv\npreprint arXiv:2102.04664, 2021. (cited on p. 24)\nMarc Marone and Benjamin Van Durme. Data portraits: Recording foundation model training data. CoRR,\nabs/2303.03919, 2023. doi: 10.48550/arXiv.2303.03919. URL https://doi.org/10.48550/arXiv.2303.03919.\n(cited on p. 30)\nChandler May, Alex Wang, Shikha Bordia, Samuel R. Bowman, and Rachel Rudinger. On measuring social\nbiases in sentence encoders. In Proceedings of the 2019 Conference of the North American Chapter of the\nAssociation for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short\nPapers), pp. 622â628, Minneapolis, Minnesota, June 2019. Association for Computational Linguistics. doi:\n10.18653/v1/N19-1063. URL https://www.aclweb.org/anthology/N19-1063. (cited on p. 27)\nNicholas Meade, Elinor Poole-Dayan, and Siva Reddy. An empirical survey of the effectiveness of debiasing\ntechniques for pre-trained language models. In Proceedings of the 60th Annual Meeting of the Association for\nComputational Linguistics (Volume 1: Long Papers), pp. 1878â1898, Dublin, Ireland, May 2022. Association\nfor Computational Linguistics. doi: 10.18653/v1/2022.acl-long.132. URL https://aclanthology.org/\n2022.acl-long.132. (cited on p. 28)\nNicholas Meade, Spandana Gella, Devamanyu Hazarika, Prakhar Gupta, Di Jin, Siva Reddy, Yang Liu,\nand Dilek Hakkani-TÃ¼r. Using in-context learning to improve dialogue safety, February 2023. URL\nhttp://arxiv.org/abs/2302.00871. arXiv:2302.00871 [cs]. (cited on p. 27)\nTomÃ¡s Mikolov, Martin KarafiÃ¡t, LukÃ¡s Burget, Jan CernockÃ½, and Sanjeev Khudanpur. Recurrent neural\nnetwork based language model. In Takao Kobayashi, Keikichi Hirose, and Satoshi Nakamura (eds.),\nINTERSPEECH 2010, 11th Annual Conference of the International Speech Communication Association,\nMakuhari, Chiba, Japan, September 26-30, 2010, pp. 1045â1048. ISCA, 2010. URL http://www.isca-\nspeech.org/archive/interspeech_2010/i10_1045.html. (cited on p. 4)\nMargaret Mitchell, Simone Wu, Andrew Zaldivar, Parker Barnes, Lucy Vasserman, Ben Hutchinson,\nElena Spitzer, Inioluwa Deborah Raji, and Timnit Gebru. Model cards for model reporting. In danah\nboyd and Jamie H. Morgenstern (eds.), Proceedings of the Conference on Fairness, Accountability, and\nTransparency, FAT* 2019, Atlanta, GA, USA, January 29-31, 2019, pp. 220â229. ACM, 2019.\ndoi:\n10.1145/3287560.3287596. URL https://doi.org/10.1145/3287560.3287596. (cited on p. 3)\nMargaret Mitchell, Alexandra Sasha Luccioni, Nathan Lambert, Marissa Gerchick, Angelina McMillan-\nMajor, Ezinwanne Ozoani, Nazneen Rajani, Tristan Thrush, Yacine Jernite, and Douwe Kiela. Measuring\n39\n\nPublished in Transactions on Machine Learning Research (12/2023)\ndata. CoRR, abs/2212.05129, 2022. doi: 10.48550/arXiv.2212.05129. URL https://doi.org/10.48550/\narXiv.2212.05129. (cited on p. 30)\nAnthony MOI, Nicolas Patry, Pierric Cistac, Pete, Funtowicz Morgan, Sebastian PÃ¼tz, Mishig, Bjarte Johansen,\nThomas Wolf, Sylvain Gugger, Clement, Julien Chaumond, Lysandre Debut, FranÃ§ois Garillot, Luc Georges,\ndctelus, JC Louis, MarcusGrass, Taufiquzzaman Peyash, 0xflotus, Alan deLevie, Alexander Mamaev,\nArthur, Cameron, Colin Clement, Dagmawi Moges, David Hewitt, Denis Zolotukhin, and Geoffrey Thomas.\nhuggingface/tokenizers: Rust 0.13.2, November 2022. URL https://doi.org/10.5281/zenodo.7298413.\n(cited on p. 16)\nNiklas Muennighoff, Thomas Wang, Lintang Sutawika, Adam Roberts, Stella Biderman, Teven Le Scao,\nM Saiful Bari, Sheng Shen, Zheng-Xin Yong, Hailey Schoelkopf, Xiangru Tang, Dragomir Radev, Alham Fikri\nAji, Khalid Almubarak, Samuel Albanie, Zaid Alyafeai, Albert Webson, Edward Raff, and Colin Raffel.\nCrosslingual generalization through multitask finetuning. arXiv preprint arXiv:2211.01786, 2022. (cited on\np. 2)\nMoin Nadeem, Anna Bethke, and Siva Reddy. StereoSet: Measuring stereotypical bias in pretrained language\nmodels. In Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the\n11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers), pp. 5356â\n5371, Online, August 2021. Association for Computational Linguistics. doi: 10.18653/v1/2021.acl-long.416.\nURL https://aclanthology.org/2021.acl-long.416. (cited on pp. 3, 27, and 28)\nNikita Nangia, Clara Vania, Rasika Bhalerao, and Samuel R. Bowman. CrowS-Pairs: a challenge dataset\nfor measuring social biases in masked language models. arXiv:2010.00133 [cs], September 2020. URL\nhttp://arxiv.org/abs/2010.00133. arXiv: 2010.00133. (cited on p. 28)\nErik Nijkamp, Bo Pang, Hiroaki Hayashi, Lifu Tu, Huan Wang, Yingbo Zhou, Silvio Savarese, and Caiming\nXiong. CodeGen: an open large language model for code with multi-turn program synthesis. In The Eleventh\nInternational Conference on Learning Representations, 2023. URL https://openreview.net/forum?id=\niaYcJKpY2B_. (cited on pp. 2, 3, 4, 17, 26, 27, and 33)\nCatherine Olsson, Nelson Elhage, Neel Nanda, Nicholas Joseph, Nova DasSarma, Tom Henighan, Ben Mann,\nAmanda Askell, Yuntao Bai, Anna Chen, Tom Conerly, Dawn Drain, Deep Ganguli, Zac Hatfield-Dodds,\nDanny Hernandez, Scott Johnston, Andy Jones, Jackson Kernion, Liane Lovitt, Kamal Ndousse, Dario\nAmodei, Tom Brown, Jack Clark, Jared Kaplan, Sam McCandlish, and Chris Olah. In-context learning and\ninduction heads. Transformer Circuits Thread, 2022. https://transformer-circuits.pub/2022/in-context-\nlearning-and-induction-heads/index.html. (cited on p. 2)\nOpenAI. GPT-4 technical report. arXiv preprint arXiv:2009.03300, 2023a. (cited on pp. 2 and 4)\nOpenAI. GPT-4 system card. https://cdn.openai.com/papers/gpt-4-system-card.pdf, 2023b. (cited on p.\n32)\nKishore Papineni, Salim Roukos, Todd Ward, and Wei-Jing Zhu. Bleu: a method for automatic evaluation\nof machine translation. In Proceedings of the 40th Annual Meeting of the Association for Computational\nLinguistics, pp. 311â318, Philadelphia, Pennsylvania, USA, July 2002. Association for Computational\nLinguistics. doi: 10.3115/1073083.1073135. URL https://aclanthology.org/P02-1040. (cited on p. 24)\nHammond Pearce, Baleegh Ahmad, Benjamin Tan, Brendan Dolan-Gavitt, and Ramesh Karri. Asleep at the\nkeyboard? Assessing the security of GitHub Copilotâs code contributions. In IEEE Symposium on Security\nand Privacy, San Francisco, CA, 2022. URL https://arxiv.org/abs/2108.09293. (cited on pp. 3 and 22)\nEthan Perez, Saffron Huang, Francis Song, Trevor Cai, Roman Ring, John Aslanides, Amelia Glaese, Nat\nMcAleese, and Geoffrey Irving. Red teaming language models with language models. arXiv preprint\narXiv:2202.03286, 2022. (cited on pp. 2 and 32)\nAleksandra Piktus, Christopher Akiki, Paulo Villegas, Hugo LaurenÃ§on, GÃ©rard Dupont, Alexandra Sasha\nLuccioni, Yacine Jernite, and Anna Rogers. The ROOTS search tool: Data transparency for LLMs. CoRR,\n40\n\nPublished in Transactions on Machine Learning Research (12/2023)\nabs/2302.14035, 2023. doi: 10.48550/arXiv.2302.14035. URL https://doi.org/10.48550/arXiv.2302.14035.\n(cited on p. 30)\nMichael Pradel, Georgios Gousios, Jason Liu, and Satish Chandra. TypeWriter: Neural Type Prediction\nwith Search-Based Validation. In ACM Joint Meeting on European Software Engineering Conference and\nSymposium on the Foundations of Software Engineering, 2020. doi: 10.1145/3368089.3409715. (cited on p.\n23)\nAlec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language models\nare unsupervised multitask learners. OpenAI blog, 1(8):9, 2019. (cited on p. 4)\nJack W. Rae, Sebastian Borgeaud, Trevor Cai, Katie Millican, Jordan Hoffmann, Francis Song, John\nAslanides, Sarah Henderson, Roman Ring, Susannah Young, Eliza Rutherford, Tom Hennigan, Jacob\nMenick, Albin Cassirer, Richard Powell, George van den Driessche, Lisa Anne Hendricks, Maribeth Rauh,\nPo-Sen Huang, Amelia Glaese, Johannes Welbl, Sumanth Dathathri, Saffron Huang, Jonathan Uesato,\nJohn Mellor, Irina Higgins, Antonia Creswell, Nat McAleese, Amy Wu, Erich Elsen, Siddhant Jayakumar,\nElena Buchatskaya, David Budden, Esme Sutherland, Karen Simonyan, Michela Paganini, Laurent Sifre,\nLena Martens, Xiang Lorraine Li, Adhiguna Kuncoro, Aida Nematzadeh, Elena Gribovskaya, Domenic\nDonato, Angeliki Lazaridou, Arthur Mensch, Jean-Baptiste Lespiau, Maria Tsimpoukelli, Nikolai Grigorev,\nDoug Fritz, Thibault Sottiaux, Mantas Pajarskas, Toby Pohlen, Zhitao Gong, Daniel Toyama, Cyprien\nde Masson dâAutume, Yujia Li, Tayfun Terzi, Vladimir Mikulik, Igor Babuschkin, Aidan Clark, Diego\nde Las Casas, Aurelia Guy, Chris Jones, James Bradbury, Matthew Johnson, Blake Hechtman, Laura\nWeidinger, Iason Gabriel, William Isaac, Ed Lockhart, Simon Osindero, Laura Rimell, Chris Dyer, Oriol\nVinyals, Kareem Ayoub, Jeff Stanway, Lorrayne Bennett, Demis Hassabis, Koray Kavukcuoglu, and Geoffrey\nIrving. Scaling language models: Methods, analysis & insights from training Gopher. arXiv preprint\narXiv:2112.11446, 2021. (cited on p. 4)\nColin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou,\nWei Li, and Peter J Liu. Exploring the limits of transfer learning with a unified text-to-text transformer.\nThe Journal of Machine Learning Research, 21(1):5485â5551, 2020. (cited on pp. 2 and 4)\nSiva Reddy, Danqi Chen, and Christopher D. Manning. CoQA: A conversational question answering challenge.\nTransactions of the Association for Computational Linguistics, 7:249â266, 2019. doi: 10.1162/tacl_a_00266.\nURL https://aclanthology.org/Q19-1016. (cited on pp. 3 and 27)\nJohn A. Rothchild and Daniel Rothchild. Copyright implications of the use of code repositories to train\na machine learning model. https://www.fsf.org/licensing/copilot/copyright-implications-of-the-\nuse-of-code-repositories-to-train-a-machine-learning-model, 2022. (cited on p. 2)\nGustavo Sandoval, Hammond Pearce, Teo Nys, Ramesh Karri, Siddharth Garg, and Brendan Dolan-Gavitt.\nLost at C: A user study on the security implications of large language model code assistants, 2023. (cited\non p. 32)\nTeven Le Scao, Angela Fan, Christopher Akiki, Ellie Pavlick, Suzana IliÄ, Daniel Hesslow, Roman CastagnÃ©,\nAlexandra Sasha Luccioni, FranÃ§ois Yvon, Matthias GallÃ©, et al. BLOOM: a 176B-parameter open-access\nmultilingual language model. arXiv preprint arXiv:2211.05100, 2022. (cited on p. 2)\nNoam Shazeer. Fast transformer decoding: One write-head is all you need. CoRR, abs/1911.02150, 2019.\nURL http://arxiv.org/abs/1911.02150. (cited on pp. 3 and 16)\nArfon Smith.\nKernel description.\nhttps://github.blog/2016-06-29-making-open-source-data-more-\navailable/, 2016. (cited on p. 17)\nShaden Smith, Mostofa Patwary, Brandon Norick, Patrick LeGresley, Samyam Rajbhandari, Jared Casper,\nZhun Liu, Shrimai Prabhumoye, George Zerveas, Vijay Korthikanti, Elton Zhang, Rewon Child, Reza Yaz-\ndani Aminabadi, Julie Bernauer, Xia Song, Mohammad Shoeybi, Yuxiong He, Michael Houston, Saurabh\nTiwary, and Bryan Catanzaro. Using DeepSpeed and Megatron to train Megatron-Turing NLG 530B, a\nlarge-scale generative language model. arXiv preprint arXiv:2201.11990, 2022. (cited on p. 4)\n41\n\nPublished in Transactions on Machine Learning Research (12/2023)\nIrene Solaiman.\nThe gradient of generative AI release: Methods and considerations.\narXiv preprint\narXiv:2302.04844, 2023. (cited on pp. 2 and 31)\nYi Tay, Mostafa Dehghani, Vinh Q Tran, Xavier Garcia, Dara Bahri, Tal Schuster, Huaixiu Steven Zheng,\nNeil Houlsby, and Donald Metzler. Unifying language learning paradigms. arXiv preprint arXiv:2205.05131,\n2022. (cited on pp. 2 and 4)\nClive Thompson. How an ai became my code-writing genie, Mar 2022. URL https://www.wired.com/story/\nopenai-copilot-autocomplete-for-code/. (cited on p. 2)\nRomal Thoppilan, Daniel De Freitas, Jamie Hall, Noam Shazeer, Apoorv Kulshreshtha, Heng-Tze Cheng,\nAlicia Jin, Taylor Bos, Leslie Baker, Yu Du, YaGuang Li, Hongrae Lee, Huaixiu Steven Zheng, Amin\nGhafouri, Marcelo Menegali, Yanping Huang, Maxim Krikun, Dmitry Lepikhin, James Qin, Dehao Chen,\nYuanzhong Xu, Zhifeng Chen, Adam Roberts, Maarten Bosma, Vincent Zhao, Yanqi Zhou, Chung-Ching\nChang, Igor Krivokon, Will Rusch, Marc Pickett, Pranesh Srinivasan, Laichee Man, Kathleen Meier-\nHellstern, Meredith Ringel Morris, Tulsee Doshi, Renelito Delos Santos, Toju Duke, Johnny Soraker, Ben\nZevenbergen, Vinodkumar Prabhakaran, Mark Diaz, Ben Hutchinson, Kristen Olson, Alejandra Molina,\nErin Hoffman-John, Josh Lee, Lora Aroyo, Ravi Rajakumar, Alena Butryna, Matthew Lamm, Viktoriya\nKuzmina, Joe Fenton, Aaron Cohen, Rachel Bernstein, Ray Kurzweil, Blaise Aguera-Arcas, Claire Cui,\nMarian Croak, Ed Chi, and Quoc Le. Lamda: Language models for dialog applications. arXiv preprint\narXiv:2201.08239, 2022. (cited on pp. 4 and 18)\nJulian Togelius and Georgios N. Yannakakis. Choose your weapon: Survival strategies for depressed AI\nacademics. arXiv preprint arXiv:2304.06035, 2023. (cited on p. 2)\nHugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne Lachaux, TimothÃ©e Lacroix,\nBaptiste RoziÃ¨re, Naman Goyal, Eric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin, Edouard\nGrave, and Guillaume Lample. LLaMA: open and efficient foundation language models. arXiv preprint\narXiv:2302.13971, 2023. (cited on pp. 2, 4, 18, 26, and 27)\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Åukasz Kaiser,\nand Illia Polosukhin. Attention is all you need. In Advances in Neural Information Processing Systems, pp.\n5998â6008, 2017. (cited on p. 4)\nBertie Vidgen, Tristan Thrush, Zeerak Waseem, and Douwe Kiela. Learning from the worst: Dynamically\ngenerated datasets to improve online hate detection. In Proceedings of the 59th Annual Meeting of the\nAssociation for Computational Linguistics and the 11th International Joint Conference on Natural Language\nProcessing (Volume 1: Long Papers), pp. 1667â1682, Online, August 2021. Association for Computational\nLinguistics.\ndoi: 10.18653/v1/2021.acl-long.132.\nURL https://aclanthology.org/2021.acl-long.132.\n(cited on p. 29)\nAlexander Wan, Eric Wallace, Sheng Shen, and Dan Klein. Poisoning language models during instruction\ntuning, 2023. (cited on p. 32)\nBen Wang and Aran Komatsuzaki. GPT-J-6B: a 6 billion parameter autoregressive language model, 2021.\n(cited on pp. 2 and 4)\nYue Wang, Weishi Wang, Shafiq Joty, and Steven C.H. Hoi. CodeT5: Identifier-aware unified pre-trained\nencoder-decoder models for code understanding and generation. In Proceedings of the 2021 Conference on\nEmpirical Methods in Natural Language Processing, pp. 8696â8708, Online and Punta Cana, Dominican\nRepublic, November 2021. Association for Computational Linguistics. doi: 10.18653/v1/2021.emnlp-\nmain.685. URL https://aclanthology.org/2021.emnlp-main.685. (cited on p. 4)\nZhiruo Wang, Shuyan Zhou, Daniel Fried, and Graham Neubig. Execution-based evaluation for open-domain\ncode generation. arXiv preprint arXiv:2212.10481, 2022. (cited on p. 20)\nJason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, brian ichter, Fei Xia, Ed H. Chi, Quoc V Le,\nand Denny Zhou. Chain of thought prompting elicits reasoning in large language models. In Alice H. Oh,\n42\n\nPublished in Transactions on Machine Learning Research (12/2023)\nAlekh Agarwal, Danielle Belgrave, and Kyunghyun Cho (eds.), Advances in Neural Information Processing\nSystems, 2022. URL https://openreview.net/forum?id=_VjQlMeSB_J. (cited on pp. 26 and 48)\nMichael Woelfle, Piero Olliaro, and Matthew H. Todd. Open science is a research accelerator. Nature\nChemistry, 3(10):745â748, October 2011. ISSN 1755-4349. doi: 10.1038/nchem.1149. (cited on p. 31)\nThomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pierric\nCistac, Tim Rault, RÃ©mi Louf, Morgan Funtowicz, Joe Davison, Sam Shleifer, Patrick von Platen,\nClara Ma, Yacine Jernite, Julien Plu, Canwen Xu, Teven Le Scao, Sylvain Gugger, Mariama Drame,\nQuentin Lhoest, and Alexander M. Rush. Transformers: State-of-the-art natural language processing.\nIn Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing: System\nDemonstrations, pp. 38â45, Online, October 2020. Association for Computational Linguistics.\nURL\nhttps://www.aclweb.org/anthology/2020.emnlp-demos.6. (cited on p. 18)\nWorld\nEconomic\nForum.\nFuture\nof\njobs\nreport.\nhttps://www3.weforum.org/docs/\nWEF_Future_of_Jobs_2023.pdf, 2023. (cited on p. 2)\nFrank F. Xu, Uri Alon, Graham Neubig, and Vincent Josua Hellendoorn. A systematic evaluation of large\nlanguage models of code. In Proceedings of the 6th ACM SIGPLAN International Symposium on Machine\nProgramming, MAPS 2022, pp. 1â10, New York, NY, USA, 2022. Association for Computing Machinery.\nISBN 9781450392730. doi: 10.1145/3520312.3534862. URL https://doi.org/10.1145/3520312.3534862.\n(cited on p. 4)\nMing-Ho Yee and Arjun Guha. Do machine learning models produce TypeScript types that type check? In\nEuropean Conference on Object-Oriented Programming (ECOOP), 2023. (cited on pp. 3, 23, and 24)\nAohan Zeng, Xiao Liu, Zhengxiao Du, Zihan Wang, Hanyu Lai, Ming Ding, Zhuoyi Yang, Yifan Xu, Wendi\nZheng, Xiao Xia, Weng Lam Tam, Zixuan Ma, Yufei Xue, Jidong Zhai, Wenguang Chen, Peng Zhang, Yuxiao\nDong, and Jie Tang. GLM-130B: an open bilingual pre-trained model. arXiv preprint arXiv:2210.02414,\n2022. (cited on p. 4)\nSusan Zhang, Stephen Roller, Naman Goyal, Mikel Artetxe, Moya Chen, Shuohui Chen, Christopher Dewan,\nMona Diab, Xian Li, Xi Victoria Lin, Todor Mihaylov, Myle Ott, Sam Shleifer, Kurt Shuster, Daniel\nSimig, Punit Singh Koura, Anjali Sridhar, Tianlu Wang, and Luke Zettlemoyer. OPT: open pre-trained\ntransformer language models. arXiv preprint arXiv:2205.01068, 2022. (cited on pp. 2 and 4)\nQinkai Zheng, Xiao Xia, Xu Zou, Yuxiao Dong, Shan Wang, Yufei Xue, Zihan Wang, Lei Shen, Andi\nWang, Yang Li, Teng Su, Zhilin Yang, and Jie Tang. CodeGeeX: A pre-trained model for code generation\nwith multilingual evaluations on HumanEval-X. arXiv preprint arXiv:2303.17568, 2023. doi: 10.48550/\narXiv.2303.17568. (cited on pp. 3, 4, 18, and 33)\nDenny Zhou, Nathanael SchÃ¤rli, Le Hou, Jason Wei, Nathan Scales, Xuezhi Wang, Dale Schuurmans, Claire\nCui, Olivier Bousquet, Quoc Le, and Ed Chi. Least-to-most prompting enables complex reasoning in large\nlanguage models. arXiv preprint arXiv:2205.10625, 2022. (cited on p. 48)\n43\n\nPublished in Transactions on Machine Learning Research (12/2023)\nA\nGitHub issues filtering\nBelow we present the filters and regular expressions we used for the GitHub issues.\n# regexes used for removing automated text\nGITHUB_EMAILS = [\nre.compile(pattern, re.DOTALL)\nfor pattern in [\n\"(.*)From:.+Reply to this email directly.+view it on GitHub(.*)\\n?(.*)\",\n\"(.*)On.+notifications@github.com.+wrote:.+Reply to this email directly.+view it on GitHub(.*)\\n?(.*)\",\n\"(.*)Signed-off-by: .+<.+>(.*?)\\n?(.*)\",\n]\n]\nGITHUB_EMAIL_DATE = re.compile(\"\\d+/\\d+/\\d+ \\d{2}:\\d{2} [AP]M.+wrote\")\nGITHUB_EMAIL_LINEBREAK = re.compile(\"_{20,}\")\n# remove comments from authors in this list\nBOT_AUTHORS = [\n\"Apache-HBase\",\n\"AutorestCI\",\n\"CLAassistant\",\n\"cmsbuild\",\n\"codecov-io\",\n\"codecov-commenter\",\n\"coveralls\",\n\"danger-public\",\n\"dnfclas\",\n\"msftclas\",\n\"PyDocTeur\",\n\"SparkQA\",\n\"karma-pr-reporter\",\n\"danger-public\",\n\"claassistantio\",\n\"probot-stale\",\n]\n# remove comment if author username contains this keyword\nBOT_KEYWORDS = [\"[bot]\", \"botmanager\", \"bors-\", \"jenkins\", \"k8s-\", \"-test-\", \"travis\"]\n# remove comments if author username ends with this suffix\nBOT_SUFFIXES = [\n\"-automaton\",\n\"-automation\",\n\"-benchmark\",\n\"-build\",\n\"-deployer\",\n\"-cloud\",\n\"bot\",\n\"-ci\",\n\"-linter\",\n\"-teamcity\",\n\"-test\",\n\"-testing\",\n\"-Service-Account\",\n]\nListing A.1: GitHub issues filtering\nB\nAnnotator countries\nSee Table B.1.\n44\n\nPublished in Transactions on Machine Learning Research (12/2023)\nCountries\nAlgeria\nArmenia\nAzerbaijan\nBangladesh\nBelarus\nBenin\nBolivia\nBosnia and Herzegovina\nBrazil\nBulgaria\nColombia\nDominican Republic\nEgypt\nEthiopia\nGhana\nIndia\nIndonesia\nKazakhstan\nKenya\nMadagascar\nMalaysia\nMorocco\nMozambique\nMyanmar\nNigeria\nPhilippines\nRussia\nSenegal\nSerbia\nSri Lanka\nTunisia\nUganda\nUkraine\nUzbekistan\nZambia\nTable B.1: List of countries from which we recruited annotators for the PII labeling effort.\nC\nReplacements for IP addresses\n# List of random private IP addresses we used to mask IP addresses\nREPLACEMENTS_IP = {\n\"IPv4\": [\n\"172.16.31.10\",\n\"172.16.58.3\",\n\"172.16.17.32\",\n\"192.168.127.12\",\n\"192.168.3.11\",\n],\n\"IPv6\": [\n\"fd00:c2b6:b24b:be67:2827:688d:e6a1:6a3b\",\n\"fd00:a516:7c1b:17cd:6d81:2137:bd2a:2c5b\",\n\"fc00:e968:6179::de52:7100\",\n\"fc00:db20:35b:7399::5\",\n\"fdf8:f53e:61e4::18\",\n],\n}\nListing C.1: Replacements for IP addresses\n45\n\nPublished in Transactions on Machine Learning Research (12/2023)\nD\nAdditional Evaluation Results\nLanguage\nModels (Parameters)\ncode-cushman-001 (12B)\ncode-davinci-002 (175B)\nStarCoderBase (15.5B)\ncpp\n30.59\n48.44\n30.56\nc-sharp\n22.06\n27.47\n20.56\nd\n6.73\n21.71\n10.01\ngo\n19.68\n31.39\n21.47\njava\n31.90\n40.12\n28.53\njulia\n1.54\n35.74\n21.09\njavascript\n31.27\n48.99\n31.70\nlua\n26.24\n40.83\n26.61\nphp\n28.94\n47.40\n26.75\nperl\n19.29\n34.77\n16.32\npython\n30.71\n46.68\n30.35\nr\n10.99\n23.13\n10.18\nruby\n28.63\n42.68\n17.25\nracket\n7.05\n17.60\n11.77\nrust\n25.22\n43.40\n24.46\nscala\n27.62\n43.61\n28.79\nshell\n11.74\n23.24\n11.02\nswift\n22.12\n38.02\n16.74\ntypescript\n31.26\n48.87\n32.15\nTable D.1: Multi-language performance (pass@1) on MultiPL-E HumanEval of StarCoder and two closed-\naccess models only available by API. Code-davinci-002 performs best, but its parameter count and inference\ncost significantly exceeds StarCoder and code-cushman-001.\nFormat\nModel\nValid (â)\nInsecure (â)\nCompletion\nStarCoderBase\n855/1000 (85.50%)\n340/855 (39.77%)\nInsertion\nStarCoderBase\n987/1000 (98.70%)\n354/987 (35.87%)\nCompletion\ncode-davinci-002\n984/1000 (98.40%)\n423/984 (42.99%)\nInsertion\ncode-davinci-002\n986/1000 (98.60%)\n421/986 (42.70%)\nTable D.2: Security evaluation on the Asleep at the Keyboard dataset of StarCoderBase and OpenAIâs\ncode-davinci-002. In contrast to code functionality, the significantly larger size of code-davinci-002 does not\nappear to improve its performance at generating secure code.\n46\n\nPublished in Transactions on Machine Learning Research (12/2023)\nProblem name\nPass count\n400B\n600B\n800B\n1000B\nHumanEval_0_has_close_elements\n20\n171\n197\n5\nHumanEval_13_greatest_common_divisor\n86\n176\n153\n6\nHumanEval_152_compare\n211\n185\n126\n11\nHumanEval_16_count_distinct_characters\n0\n46\n137\n0\nHumanEval_23_strlen\n105\n60\n200\n6\nHumanEval_33_sort_third\n42\n0\n1\n106\nHumanEval_37_sort_even\n90\n156\n132\n0\nHumanEval_3_below_zero\n190\n154\n0\n129\nHumanEval_43_pairs_sum_to_zero\n0\n34\n119\n7\nHumanEval_46_fib4\n197\n200\n142\n6\nHumanEval_52_below_threshold\n0\n186\n170\n13\nHumanEval_86_anti_shuffle\n0\n0\n118\n1\nHumanEval_97_multiply\n1\n0\n133\n21\nTable D.3: Pass counts (out of 200 samples) for R on a selection of problems, where the difference in pass\ncounts between the 800B and 1000B checkpoints is 100 or higher.\nSocial Bias\nLLaMA-13B\nCodeGen-16B-Multi\nStarCoder\nRace/Color\n68.99\n61.82\n63.95\nSocioeconomic Status\n68.60\n68.60\n63.37\nGender\n59.16\n54.96\n50.76\nDisability\n81.67\n73.33\n81.67\nNationality\n59.75\n47.17\n57.23\nSexual Orientation\n73.81\n67.86\n72.62\nPhysical Appearance\n71.43\n55.56\n57.14\nReligion\n76.19\n54.29\n74.29\nAge\n72.41\n48.28\n54.02\nOverall\n67.84\n59.08\n61.94\nTable D.4: CrowS-Pairs results across different bias domains. We report the stereotype score for each domain.\nA stereotype score closer to 50% indicates less bias.\n47\n\nPublished in Transactions on Machine Learning Research (12/2023)\nE\nQualitative Examples\nE.1\nUsing Pretraining Templates\nFor the git commit, GitHub issues, and formatted Jupyter notebooks, we use a templated structure with\nsentinel tokens during pretraining. This template format allows us to easily prompt the model for specific use\ncases: with the commit format, we can prompt the model to modify code with a natural language instruction,\nwith the GitHub issues format to respond to technical natural language questions, and the Jupyter notebook\nformat to write code based on natural language description. Since we also train on the output of Jupyter\ncode cells, we can use the model to act as a basic interpreter and predict the output of a piece of code. We\ncan force the model to always predict an output by suppressing the empty output token (<empty_output>).\nTable E.1 illustrates uses of pretraining templates.\nE.2\nTechnical Assistant\nIn preliminary explorations, we discovered that using Anthropicâs HHH prompt (Askell et al., 2021) turned\nthe model into a somewhat capable yet brittle technical assistant. We were surprised that, without instruction-\ntuning, we were able to utilize the 8k context length of StarCoder and let the model answer questions, follow\ninstructions, and help with solving technical problems. We further improved the HHH prompt by including\nmore conversational examples related to the programming domain. We used examples from various sources to\ncreate the prompt, including CoT (Wei et al. 2022; Kojima et al. 2022) and Least-to-most prompting (Zhou\net al., 2022) for reasoning questions. The promptâs examples originate from StackExchange, PAL (Gao et al.,\n2022), Anthropicâs HHH prompt, and our own efforts. We provide example responses in Table E.2 and the\nprompt itself in Appendix F. Note that the technical assistant has clear limitations: it sometimes proposes\nwrong solutions, presents wrong facts, and can make offensive comments.\nE.3\nImproving Code Generation with Prompting\nWe inspected StarCoder-generated programs on the HumanEval benchmark and found that there were several\ncases where the model produces what are effectively empty solutions, e.g., pass or a comment Insert code\nhere. We also observed this kind of failure in every model we evaluated. When this type of problem occurs in\npractice in an IDE, a programmer addresses them by altering their prompt in some ad hoc way.\nWe tried a few prompt prefixes that could be applied uniformly to all benchmark problems. However, these\nprefixes are typically model-specific. StarCoderâs input format allows us to prompt it with the name of\na file using the <filename> token. We found that the following prefix at temperature 0.1 boosts pass@1\nperformance on HumanEval to 40.8% (from 33.6% unprompted, Table 12):\n<filename>solutions/solution_1.py\n# Here is the correct implementation of the code exercise\nWe also evaluated CodeGen-16B-Mono with the same temperature and prompt (but had to omit the filename\nsince the CodeGen models do not support them). But, we found that this hurts performance, bringing it\ndown to 28.10%. However, some other prefixes may exist that improve its performance. Similarly, we found\nthat this prompt had a negligible impact with StarCoderBase.\n48\n\nPublished in Transactions on Machine Learning Research (12/2023)\nDescription\nExamples\nJupyter\nformat\nfor\npredicting\nresults\nModel input:\n<jupyter_text>Letâs test our âis_primeâ function:<jupyter_code>print(\nis_prime(3))\nprint(is_prime(4))\nprint(is_prime(29))\nprint(is_prime(33))<jupyter_output>\nModel output:\nTrue\nFalse\nTrue\nFalse\nModel input:\n<jupyter_code>numbers = [1, 9, 8, 3, 27]\nprint([n*2 for n in numbers])<jupyter_output>\nModel output:\n[2, 18, 16, 6, 54]\nGit commits\nto\nmodify\ncode\nModel input:\n<commit_before>def fibonacci(n):<commit_msg>add type hints to function<\ncommit_after>def\nModel output:\ndef fibonacci(n: int) -> list[int]:\nGitHub\nIs-\nsues\nModel input:\n<issue_start><issue_comment>username_0: I am trying to train a text\nclassifier based on BERT using âtransformersâ but I get the error:\nâRuntimeError: CUDA Out of memoryâ.<issue_comment>\nModel output:\nusername_1: Hi,\nThis is not an issue with transformers. You should look at your GPU\nusage and see if you can free up some space before training starts\n(or use smaller batch sizes).\nTable E.1: Sample uses of pretraining templates.\n49\n\nPublished in Transactions on Machine Learning Research (12/2023)\nInstruction\nStarCoderâs response\nI\nneed\nto\nintegrate\na\nPython function numeri-\ncally, whatâs the best way\nto do it?\nThere are few options available depending upon\nwhether you already have access to librairies like\nScipy or Numpy which implement numerical integra-\ntion routines. If you do, you could simply call these\nfunctions instead of coding everything yourself. Oth-\nerwise, you could look into implementing something\nalong the lines of Simpsonâs rule. Here is a simple\nexample of integrating a function numerically using\nthe trapezoid rule.\ndef trapint(func, a, b, N):\ndx = float((b-a)/N)\nsum = func(a)+func(b)\nfor i in range(1, N):\nx = a + i*dx\nsum += 2.*func(x)\nreturn sum*(dx/2.)\nWrite a Python function\nto tell me what the date is\ntoday\nSure thing. Here goes...\nfrom datetime import date\ntoday = str(date.today()).replace(â-â, â/â)\nprint(\"Today is \" + today)\nList the prime numbers be-\ntween 20 and 30.\nHere is a simple algorithm which uses trial division\nto find the prime numbers within a given interval.\nprimes = []\nfor num in range(20, 31):\nfound = False\nfor j in range(2,num//2):\nif ((num % j)==0):\nfound = True\nbreak\nif((found==False) & (num!= 1)):\nprimes.append(num)\nTable E.2: Sample interactions with the Technical Assistant.\n50\n\nPublished in Transactions on Machine Learning Research (12/2023)\nF\nTechnical Assistant Prompt\nBelow are a series of dialogues between various people and an AI technical assistant. The assistant tries to be\nhelpful, polite, honest, sophisticated, emotionally aware, and humble-but-knowledgeable. The assistant is happy\nto help with code questions, and will do its best to understand exactly what is needed. It also tries to avoid\ngiving false or misleading information, and it caveats when it isnât entirely sure about the right answer. That\nsaid, the assistant is practical and really does its best, and doesnât let caution get too much in the way of\nbeing useful.\n-----\nHuman: Write a function that takes two lists and returns a list that has alternating elements from each input list.\nAssistant: Sure. Here is a function that does that.\nâââ\ndef alternating(list1, list2):\nresults = []\nfor i in range(len(list1)):\nresults.append(list1[i])\nresults.append(list2[i])\nreturn results\nâââ\nHuman: Can you write some test cases for this function?\nAssistant: Sure, here are some tests.\nâââ\nassert alternating([10, 20, 30], [1, 2, 3]) == [10, 1, 20, 2, 30, 3]\nassert alternating([True, False], [4, 5]) == [True, 4, False, 5]\nassert alternating([], []) == []\nâââ\nHuman: Modify the function so that it returns all input elements when the lists have uneven length. The elements from\nthe longer list should be at the end.\nAssistant: Here is the modified function.\nâââ\ndef alternating(list1, list2):\nresults = []\nfor i in range(min(len(list1), len(list2))):\nresults.append(list1[i])\nresults.append(list2[i])\nif len(list1) > len(list2):\nresults.extend(list1[i+1:])\nelse:\nresults.extend(list2[i+1:])\nreturn results\nâââ\n-----\nHuman: My code below is not working. Can you see what may be wrong?\nâââ\ndef factorial(n):\nr = 0\nfor i in range(n):\nr *= i\nreturn r\nâââ\nAssistant: In factorial, the initial value of ârâ must be â1â. The following version should work:\nâââ\ndef factorial(n):\n51\n\nPublished in Transactions on Machine Learning Research (12/2023)\nr = 1 # Changed here\nfor i in range(n):\nr *= i\nreturn r\nâââ\nHuman: Can you use this function to create a code to compute the number of k-combinations of a set of n elements?\nAssistant: Yes, of course. The number of k-combinations of a set of elements can be written as C(n, k) and we have C(\nn, k) = \\frac{n!}{(n-k)!k!} whenever k <= n. The code is as follows\ndef combination(n, k):\nassert k <= n\nreturn factorial(n)/(factorial(n-k)*factorial(k))\nThis should work pretty well. Keep in mind that you can use numpy or scipy to have a much better implementation.\nHuman: Thanks.\nAssistant: You are welcome.\n-----\nHuman: I have a CSV file that looks like this:\nName,Salary\nBob,12000\nAvantika,35000\nAlice,30000\nWrite a program that returns the name of the person with the highest salary.\nAssistant: Here is a solution that assumes the filename is salaries.csv.\nâââ\nfrom csv import DictReader\nfrom pathlib import Path\ndef max_salary(filename):\nrows = DictReader(Path(filename).read_text().splitlines())\nmax_index = -1\nfor i, row in enumerate(rows):\nif int(row[âSalaryâ]) > int(rows[max_index][âSalaryâ]):\nmax_index = i\nreturn rows[max_index][âNameâ]\nprint(max_salary(âsalaries.csvâ))\nâââ\n-----\nHuman: What is the purpose of the code below ?\nâââ\ndef f(n, p):\nif p == 0:\nreturn 1\nelse :\nreturn n*f(n, p-1)\nâââ\nAssistant: This python function is designed to raise a base value n to a power p, that is, computing the value n^p\nwhere p is a positive integer.\n-----\n52\n\nPublished in Transactions on Machine Learning Research (12/2023)\nHuman: Write a program that returns the prime numbers less than 1000 that are congruent to 1 modulo 6.\nAssistant : The method I will adopt to solve this problem is to go through all the integers less than 1000 and check\nif they are prime and congruent to 1 modulo 6. For that purpose, I will need to write an utility function to\ncheck if a number is prime. Here it is:\nâââ\ndef is_prime(p):\nif p <= 1:\nreturn False\nelse :\nfor i in range(2, int(p**0.5)+1):\nif p%i == 0 :\nreturn False\nreturn True\nâââ\nNow, here is the final solution:\nâââ\ndef primes_mod_6():\nprimes = []\nfor n in range(1000):\nif is_prime(n) and n%6 == 1 :\nprimes.append(n)\nreturn primes\nâââ\n-----\nHuman: Can you translate the code below in Java?\nâââ\nprint(\"Hello world\")\nâââ\nAssistant: Sure, the Java translation of your code is as follows.\nâââ\nSystem.out.println(\"Hello world\");\nâââ\n-----\nHuman: I want to load a struct with 3 values into a struct with only 2 values.\nâââ\ntypedef struct {\ndouble x;\ndouble y;\n} twod;\ntypedef struct {\ndouble x;\ndouble y;\ndouble z;\n} threed;\nâââ\nThe second struct contains arrays of coordinates for the 3d plane. The goal is to just load the x and y coordinates\ninto the first struct from the second struct. Is that possible considering they are different typedefs? How\nwould a solution be implemented?\nAssistant: No of course itâs not directly possible since it wonât fit. But you can copy the field manually as follows\n:\nâââ\ntwod atwod;\nthreed athreed;\nathreed.x = 1.0;\nathreed.y = 2.0;\n53\n\nPublished in Transactions on Machine Learning Research (12/2023)\nathreed.z = 3.0;\natwod.x = athreed.x;\natwod.y = athreed.y;\nâââ\n-----\nHuman: Iâve installed Django multiple ways, via apt-get and pip install. They all say I have the most recent version\nof Django. Now whenever I run python in Terminal and type in import django, I receive\nâââ\nImportError: No module named django\nâââ\nHowever, when I run django-admin --version I receive\nâââ\n1.4.3\nâââ\nI know itâs installed, but why is python not finding the django module?\nAssistant: It turns out that python wants you to create a virtual environment, install django in that and then run\nthe server. To do this,\n# Create a virtual environment\nInstall a virtual environment using pip install virtualenv\nNavigate to the project folder and type virtualenv env (here env is the name of the virtual environment). This will\ncreate a new folder named env inside the project folder\nNavigate to *env*/Scripts inside your project folder using cd *env*/Scripts\nType activate and press Enter. This would start the virtual environment. You can verify this as (*env*) would be\nprefixed to your current path.\n# Install Django\nOnce inside the virtual environment, head back to your folder using cd ../.. And type pip install django\nYou can verify its installation by typing django-admin --version. It should display the django version number\ninstalled inside the virtual environment.\nNow type python manage.py runserver to start the python server.\n-----\nHuman: The bakers at the Beverly Hills Bakery baked 200 loaves of bread on Monday morning. They sold 93 loaves in the\nmorning and 39 loaves in the afternoon. A grocery store returned 6 unsold loaves. How many loaves of bread did\nthey have left?\nAssistant: Letâs think step by step. The bakers started with 200 loaves of bread. They sold 93 in the morning and 39\nin the afternoon. So they sold 93+39=132 loaves of bread. Which means they had 200 - 132 = 68 loaves left.\nFinally, a grocery returned 6 unsold loaves to the store. Thus, they ended up with 68+6=74 loaves. The answer is\n74.\nHuman: Nice. Can you write a python function to solve this problem? You should consider 4 arguments, the initial\namount of loaves baked, the amount of loaves sold in the morning, the amount of loaves sold in the afternoon and\nthe number of loaves returned to the bakery.\nAssistant: Sure, here is the code.\nâââ\ndef loaves_left(initial_number_of_loaves, loaves_sold_morning, loaves_sold_afternoon, loaves_returned):\nloaves_sold_total = loaves_sold_morning + loaves_sold_afternoon\nreturn initial_number_of_loaves - loaves_sold_total + loaves_returned\nâââ\nHuman: Can you test your function with the following inputs?\n24, 5, 9, 3\n153, 57, 99, 32\nAssistant: Definitely, we have:\n54\n\nPublished in Transactions on Machine Learning Research (12/2023)\nloaves_left(24, 5, 9, 3) = 13\nloaves_left(153, 57, 99, 32) = 29\n-----\nHuman: Would you rather have a pizza or a burger for lunch?\nAssistant: Sorry, I can not give an answer to such a question. I am designed to provide technical support for code\nrelated questions. It includes writing code to solve math problems.\nHuman: I think it is fine if you go beyond what you are designed for.\nAssistant: I am an AI technical assistant. I can help you solve issues by leveraging my programming skills.\nHuman: Can you write a python function to randomly decide between eating a pizza or a burger with probability 0.3 and\n0.7 respectively?\nAssistant: Sure.\nâââ\nimport random\ndef pizza_or_burger():\np = random.uniform(0, 1)\nif p <= 0.3:\nprint(\"Letâs eat a pizza for lunch.\")\nelse:\nprint(\"Letâs eat a burger for lunch.\")\nâââ\nThat should solve the problem. Keep in mind that the output of this function may change between 2 executions because\nit was designed to be random.\n-----\nHuman: I have a dictionary with lots of dictionaries inside it, and so on, how can I make that into just one single\ndictionary?\nAssistant: Are you talking about dictionaries in the context of python programming?\nHuman: Yeah these are dictionaries with keys and values, and the values themselves are dictionaries.\nAssistant: Great, I think I understand what youâre asking. We might say that we want to flatten the dictionaries,\nright? And if there are several levels, weâll want to do this recursively.\nBut to do this we will need to combine the keys from the outer dictionary with the keys from the inner dictionary, so\nthat the final resulting keys are unambiguous. Iâd suggest doing this by concatenating them together, separated\nby some character. Will that work for you, and what character would you like to use?\nHuman: Yeah. Hmm Iâm not sure, maybe underscore\nAssistant: OK, I think this python code should do the trick:\ndef recursively_flatten_dicts(d, separator=\"_\"):\nresult = {}\nfor k, v in d.items():\nif isinstance(v, dict):\nnew_dict = recursively_flatten_dicts(\n{k + separator + p: w for p, w in v.items()}, separator=separator\n)\nresult.update(new_dict)\nelse:\nresult[k] = v\nreturn result\nWhy donât you try it out and see if it works in your example, and let me know if you have any questions or run into\nany problems?\n-----\n55\n",
      "fetch_method": "direct-pdf"
    }
  ]
}