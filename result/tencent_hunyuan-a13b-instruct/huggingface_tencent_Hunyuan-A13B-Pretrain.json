{
    "model_id": "tencent/Hunyuan-A13B-Pretrain",
    "files": [
        ".gitattributes",
        "LICENSE",
        "README.md",
        "config.json",
        "configuration_hunyuan.py",
        "generation_config.json",
        "hunyuan.py",
        "hy.tiktoken",
        "model-00001-of-00033.safetensors",
        "model-00002-of-00033.safetensors",
        "model-00003-of-00033.safetensors",
        "model-00004-of-00033.safetensors",
        "model-00005-of-00033.safetensors",
        "model-00006-of-00033.safetensors",
        "model-00007-of-00033.safetensors",
        "model-00008-of-00033.safetensors",
        "model-00009-of-00033.safetensors",
        "model-00010-of-00033.safetensors",
        "model-00011-of-00033.safetensors",
        "model-00012-of-00033.safetensors",
        "model-00013-of-00033.safetensors",
        "model-00014-of-00033.safetensors",
        "model-00015-of-00033.safetensors",
        "model-00016-of-00033.safetensors",
        "model-00017-of-00033.safetensors",
        "model-00018-of-00033.safetensors",
        "model-00019-of-00033.safetensors",
        "model-00020-of-00033.safetensors",
        "model-00021-of-00033.safetensors",
        "model-00022-of-00033.safetensors",
        "model-00023-of-00033.safetensors",
        "model-00024-of-00033.safetensors",
        "model-00025-of-00033.safetensors",
        "model-00026-of-00033.safetensors",
        "model-00027-of-00033.safetensors",
        "model-00028-of-00033.safetensors",
        "model-00029-of-00033.safetensors",
        "model-00030-of-00033.safetensors",
        "model-00031-of-00033.safetensors",
        "model-00032-of-00033.safetensors",
        "model-00033-of-00033.safetensors",
        "model.safetensors.index.json",
        "modeling_hunyuan.py",
        "tokenization_hy.py",
        "tokenizer_config.json"
    ],
    "readme": "---\nlicense: other\nlicense_name: tencent-hunyuan-a13b\nlicense_link: https://github.com/Tencent-Hunyuan/Hunyuan-A13B/blob/main/LICENSE\nlibrary_name: transformers\n---\n\n<p align=\"center\">\n <img src=\"https://dscache.tencent-cloud.cn/upload/uploader/hunyuan-64b418fd052c033b228e04bc77bbc4b54fd7f5bc.png\" width=\"400\"/> <br>\n</p><p></p>\n\n\n<p align=\"center\">\n    ü§ó&nbsp;<a href=\"https://huggingface.co/tencent/Hunyuan-A13B-Instruct\"><b>Hugging Face</b></a>&nbsp;&nbsp;|&nbsp;&nbsp;\n    üñ•Ô∏è&nbsp;<a href=\"https://hunyuan.tencent.com\" style=\"color: red;\"><b>Official Website</b></a>&nbsp;&nbsp;|&nbsp;&nbsp;\n    üïñ&nbsp;<a href=\"https://cloud.tencent.com/product/hunyuan\"><b>HunyuanAPI</b></a>&nbsp;&nbsp;|&nbsp;&nbsp;\n    üïπÔ∏è&nbsp;<a href=\"https://hunyuan.tencent.com/?model=hunyuan-a13b\"><b>Demo</b></a>&nbsp;&nbsp;|&nbsp;&nbsp;\n    ü§ñ&nbsp;<a href=\"https://modelscope.cn/models/Tencent-Hunyuan/Hunyuan-A13B-Instruct\"><b>ModelScope</b></a>\n</p>\n\n\n<p align=\"center\">\n    <a href=\"https://github.com/Tencent-Hunyuan/Hunyuan-A13B/blob/main/report/Hunyuan_A13B_Technical_Report.pdf\"><b>Technical Report</b> </a> |\n    <a href=\"https://github.com/Tencent-Hunyuan/Hunyuan-A13B\"><b>GITHUB</b></a> | \n    <a href=\"https://cnb.cool/tencent/hunyuan/Hunyuan-A13B\"><b>cnb.cool</b></a> | \n    <a href=\"https://github.com/Tencent-Hunyuan/Hunyuan-A13B/blob/main/LICENSE\"><b>LICENSE</b></a> | \n    <a href=\"https://raw.githubusercontent.com/Tencent-Hunyuan/Hunyuan-A13B/main/assets/1751881231452.jpg\"><b>WeChat</b></a> | \n    <a href=\"https://discord.gg/bsPcMEtV7v\"><b>Discord</b></a>\n</p>\n\n\n  \nWelcome to the official repository of **Hunyuan-A13B**, an innovative and open-source large language model (LLM) built on a fine-grained Mixture-of-Experts (MoE) architecture. Designed for efficiency and scalability, Hunyuan-A13B delivers cutting-edge performance with minimal computational overhead, making it an ideal choice for advanced reasoning and general-purpose applications, especially in resource-constrained environments.\n\n## Model Introduction\n\nWith the rapid advancement of artificial intelligence technology, large language models (LLMs) have achieved remarkable progress in natural language processing, computer vision, and scientific tasks. However, as model scales continue to expand, optimizing resource consumption while maintaining high performance has become a critical challenge. To address this, we have explored Mixture of Experts (MoE) architectures. The newly introduced Hunyuan-A13B model features a total of 80 billion parameters with 13 billion active parameters. It not only delivers high-performance results but also achieves optimal resource efficiency, successfully balancing computational power and resource utilization.\n\n### Key Features and Advantages\n\n- **Compact yet Powerful**: With only 13 billion active parameters (out of a total of 80 billion), the model delivers competitive performance on a wide range of benchmark tasks, rivaling much larger models.\n- **Hybrid Reasoning Support**: Supports both fast and slow thinking modes, allowing users to flexibly choose according to their needs.\n- **Ultra-Long Context Understanding**: Natively supports a 256K context window, maintaining stable performance on long-text tasks.\n- **Enhanced Agent Capabilities**: Optimized for agent tasks, achieving leading results on benchmarks such as BFCL-v3, œÑ-Bench and C3-Bench.\n- **Efficient Inference**: Utilizes Grouped Query Attention (GQA) and supports multiple quantization formats, enabling highly efficient inference.\n\n### Why Choose Hunyuan-A13B?\n\nAs a powerful yet computationally efficient large model, Hunyuan-A13B is an ideal choice for researchers and developers seeking high performance under resource constraints. Whether for academic research, cost-effective AI solution development, or innovative application exploration, this model provides a robust foundation for advancement.\n\n&nbsp;\n\n## Related News\n* 2025.6.27 We have open-sourced  **Hunyuan-A13B-Pretrain** , **Hunyuan-A13B-Instruct** , **Hunyuan-A13B-Instruct-FP8** , **Hunyuan-A13B-Instruct-GPTQ-Int4** on Hugging Face. In addition, we have released a <a href=\"report/Hunyuan_A13B_Technical_Report.pdf\">technical report </a> and a training and inference operation manual, which provide detailed information about the model‚Äôs capabilities as well as the operations for training and inference.\n\n<br>\n\n\n## Benchmark\n\nNote: The following benchmarks are evaluated by TRT-LLM-backend on several **base models**. \n\n| Model            | Hunyuan-Large | Qwen2.5-72B  | Qwen3-A22B | Hunyuan-A13B |\n|------------------|---------------|--------------|-------------|---------------|\n| MMLU             | 88.40          | 86.10         | 87.81        | 88.17          |\n| MMLU-Pro         | 60.20          | 58.10        | 68.18           | 67.23          |\n| MMLU-Redux              |  87.47         | 83.90         | 87.40        | 87.67          |\n| BBH        | 86.30             | 85.80            | 88.87        | 87.56          |\n| SuperGPQA    |  38.90         | 36.20          | 44.06           | 41.32          |\n| EvalPlus       | 75.69          | 65.93         | 77.60        | 78.64          |\n| MultiPL-E             | 59.13             | 60.50            | 65.94        | 69.33          |\n| MBPP | 72.60             | 76.00            | 81.40        | 83.86          |\n| CRUX-I             | 57.00          | 57.63          | -        | 70.13          |\n| CRUX-O             | 60.63          | 66.20          | 79.00        | 77.00          |\n| MATH            | 69.80          | 62.12         | 71.84        | 72.35          |\n| CMATH            | 91.30          | 84.80         | -        | 91.17          |\n| GSM8k         | 92.80             | 91.50           | 94.39        | 91.83          |\n| GPQA            | 25.18             | 45.90            | 47.47        | 49.12          |\n\n\nHunyuan-A13B-Instruct has achieved highly competitive performance across multiple benchmarks, particularly in mathematics, science, agent domains, and more. We compared it with several powerful models, and the results are shown below.\n\n| Topic               |                        Bench                         | OpenAI-o1-1217 | DeepSeek R1 | Qwen3-A22B | Hunyuan-A13B-Instruct |\n|:-------------------:|:----------------------------------------------------:|:-------------:|:------------:|:-----------:|:---------------------:|\n| **Mathematics**     |            AIME 2024<br>AIME 2025<br>MATH            | 74.3<br>79.2<br>96.4 | 79.8<br>70<br>94.9 | 85.7<br>81.5<br>94.0 | 87.3<br>76.8<br>94.3 |\n| **Science**         |            GPQA-Diamond<br>OlympiadBench             | 78<br>83.1 | 71.5<br>82.4 | 71.1<br>85.7 | 71.2<br>82.7 |\n| **Coding**          |  Livecodebench<br>Fullstackbench<br>ArtifactsBench   | 63.9<br>64.6<br>38.6 | 65.9<br>71.6<br>44.6 | 70.7<br>65.6<br>44.6 | 63.9<br>67.8<br>43 |\n| **Reasoning**       |              BBH<br>DROP<br>ZebraLogic               | 80.4<br>90.2<br>81 | 83.7<br>92.2<br>78.7 | 88.9<br>90.3<br>80.3 | 89.1<br>91.1<br>84.7 |\n| **Instruction<br>Following** |                 IF-Eval<br>SysBench                  | 91.8<br>82.5 | 88.3<br>77.7 | 83.4<br>74.2 | 84.7<br>76.1 |\n| **Text<br>Creation**|                LengthCtrl<br>InsCtrl                 | 60.1<br>74.8 | 55.9<br>69 | 53.3<br>73.7 | 55.4<br>71.9 |\n| **NLU**             |               ComplexNLU<br>Word-Task                | 64.7<br>67.1 | 64.5<br>76.3 | 59.8<br>56.4 | 61.2<br>62.9 |\n| **Agent**           | BFCL v3<br> œÑ-Bench<br>ComplexFuncBench<br> C3-Bench | 67.8<br>60.4<br>47.6<br>58.8 | 56.9<br>43.8<br>41.1<br>55.3 | 70.8<br>44.6<br>40.6<br>51.7 | 78.3<br>54.7<br>61.2<br>63.5 |\n\n\n&nbsp;\n\n## Use with transformers\n\nOur model defaults to using slow-thinking reasoning, and there are two ways to disable CoT reasoning. \n1. Pass \"enable_thinking=False\" when calling apply_chat_template.\n2. Adding \"/no_think\" before the prompt will force the model not to use perform CoT reasoning. Similarly, adding \"/think\" before the prompt will force the model to perform CoT reasoning.\n\nThe following code snippet shows how to use the transformers library to load and apply the model. It also demonstrates how to enable and disable the reasoning mode , and how to parse the reasoning process along with the final output.\n\n\n\n```python\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\nimport os\nimport re\n\nmodel_name_or_path = os.environ['MODEL_PATH']\n# model_name_or_path = \"tencent/Hunyuan-A13B-Instruct\"\n\ntokenizer = AutoTokenizer.from_pretrained(model_name_or_path, trust_remote_code=True)\nmodel = AutoModelForCausalLM.from_pretrained(model_name_or_path, device_map=\"auto\",trust_remote_code=True)  # You may want to use bfloat16 and/or move to GPU here\nmessages = [\n    {\"role\": \"user\", \"content\": \"Write a short summary of the benefits of regular exercise\"},\n]\ntokenized_chat = tokenizer.apply_chat_template(messages, tokenize=True, return_tensors=\"pt\",\n                                                enable_thinking=True # Toggle thinking mode (default: True)\n                                                )\n                                                \noutputs = model.generate(tokenized_chat.to(model.device), max_new_tokens=4096)\n\noutput_text = tokenizer.decode(outputs[0])\n\nthink_pattern = r'<think>(.*?)</think>'\nthink_matches = re.findall(think_pattern, output_text, re.DOTALL)\n\nanswer_pattern = r'<answer>(.*?)</answer>'\nanswer_matches = re.findall(answer_pattern, output_text, re.DOTALL)\n\nthink_content = [match.strip() for match in think_matches][0]\nanswer_content = [match.strip() for match in answer_matches][0]\nprint(f\"thinking_content:{think_content}\\n\\n\")\nprint(f\"answer_content:{answer_content}\\n\\n\")\n```\n\n## Deployment   \n\nFor deployment, you can use frameworks such as **TensorRT-LLM**, **vLLM**, or **SGLang** to serve the model and create an OpenAI-compatible API endpoint.\n\nimage: https://hub.docker.com/r/hunyuaninfer/hunyuan-a13b/tags \n\n\n### TensorRT-LLM\n\n#### Docker Image \n\nWe provide a pre-built Docker image based on the latest version of TensorRT-LLM.\n\n- To get started:\n\nhttps://hub.docker.com/r/hunyuaninfer/hunyuan-large/tags \n\n```\ndocker pull hunyuaninfer/hunyuan-a13b:hunyuan-moe-A13B-trtllm\n```\n```\ndocker run --name hunyuanLLM_infer --rm -it --ipc=host --ulimit memlock=-1 --ulimit stack=67108864 --gpus=all hunyuaninfer/hunyuan-a13b:hunyuan-moe-A13B-trtllm\n```\n\n- Prepare Configuration file:\n\n```\ncat >/path/to/extra-llm-api-config.yml <<EOF\nuse_cuda_graph: true\ncuda_graph_padding_enabled: true\ncuda_graph_batch_sizes:\n- 1\n- 2\n- 4\n- 8\n- 16\n- 32\nprint_iter_log: true\nEOF\n```\n\n\n- Start the API server:\n\n\n```\ntrtllm-serve \\\n  /path/to/HunYuan-moe-A13B \\\n  --host localhost \\\n  --port 8000 \\\n  --backend pytorch \\\n  --max_batch_size 32 \\\n  --max_num_tokens 16384 \\\n  --tp_size 2 \\\n  --kv_cache_free_gpu_memory_fraction 0.6 \\\n  --trust_remote_code \\\n  --extra_llm_api_options /path/to/extra-llm-api-config.yml\n```\n\n\n### vllm\n\n#### Docker Image\nWe provide a pre-built Docker image containing vLLM 0.8.5 with full support for this model. The official vllm release is currently under developmentÔºå **note: cuda 12.8 is require for this docker**.\n\n- To get started:\n\n```\ndocker pull docker.cnb.cool/tencent/hunyuan/hunyuan-a13b:hunyuan-moe-A13B-vllm \nor\ndocker pull hunyuaninfer/hunyuan-a13b:hunyuan-moe-A13B-vllm\n```\n\n- Download Model file: \n  - Huggingface:  will download automicly by vllm.\n  - ModelScope: `modelscope download --model Tencent-Hunyuan/Hunyuan-A13B-Instruct`\n \n\n- Start the API server:\n\nmodel download by huggingface:\n```\ndocker run  --privileged --user root  --net=host --ipc=host \\\n        -v ~/.cache:/root/.cache/ \\\n        --gpus=all -it --entrypoint python  hunyuaninfer/hunyuan-a13b:hunyuan-moe-A13B-vllm\n \\\n         -m vllm.entrypoints.openai.api_server --host 0.0.0.0 --port 8000 \\\n         --tensor-parallel-size 4 --model tencent/Hunyuan-A13B-Instruct --trust-remote-code \n\n``` \n\nmodel downloaded by modelscope:\n```\ndocker run  --privileged --user root  --net=host --ipc=host \\\n        -v ~/.cache/modelscope:/root/.cache/modelscope \\\n        --gpus=all -it --entrypoint python   hunyuaninfer/hunyuan-a13b:hunyuan-moe-A13B-vllm \\\n         -m vllm.entrypoints.openai.api_server --host 0.0.0.0 --tensor-parallel-size 4 --port 8000 \\ \n         --model /root/.cache/modelscope/hub/models/Tencent-Hunyuan/Hunyuan-A13B-Instruct/ --trust_remote_code  \n```\n\n\n### SGLang\n\n#### Docker Image \n\nWe also provide a pre-built Docker image based on the latest version of SGLang.\n\nTo get started:\n\n- Pull the Docker image\n\n```\ndocker pull docker.cnb.cool/tencent/hunyuan/hunyuan-a13b:hunyuan-moe-A13B-sglang\nor\ndocker pull hunyuaninfer/hunyuan-a13b:hunyuan-moe-A13B-sglang\n```\n\n- Start the API server:\n\n```\ndocker run --gpus all \\\n    --shm-size 32g \\\n    -p 30000:30000 \\\n    --ipc=host \\\n    docker.cnb.cool/tencent/hunyuan/hunyuan-a13b:hunyuan-moe-A13B-sglang \\\n    -m sglang.launch_server --model-path hunyuan/huanyuan_A13B --tp 4 --trust-remote-code --host 0.0.0.0 --port 30000\n```\n\n\n## Contact Us\n\nIf you would like to leave a message for our R&D and product teams, Welcome to contact our open-source team . You can also contact us via email (hunyuan_opensource@tencent.com).",
    "config": "{\n  \"add_classification_head\": false,\n  \"anyres_pooling_size\": 2,\n  \"anyres_vit_max_image_size\": null,\n  \"anyres_vit_two_views\": false,\n  \"architectures\": [\n    \"HunYuanMoEV1ForCausalLM\"\n  ],\n  \"attention_bias\": false,\n  \"attention_dropout\": 0.0,\n  \"attention_head_dim\": 128,\n  \"auto_map\": {\n    \"AutoConfig\": \"configuration_hunyuan.HunYuanConfig\",\n    \"AutoModel\": \"hunyuan.HunYuanModel\",\n    \"AutoModelForCausalLM\": \"hunyuan.HunYuanMoEV1ForCausalLM\"\n  },\n  \"bos_token_id\": 1,\n  \"cla_share_factor\": 2,\n  \"class_num\": 0,\n  \"dense_list\": [\n    4096,\n    0\n  ],\n  \"eod_token_id\": 127957,\n  \"eos_token_id\": 127960,\n  \"group_limited_greedy\": false,\n  \"hidden_act\": \"silu\",\n  \"hidden_size\": 4096,\n  \"im_end_id\": 6,\n  \"im_newline_id\": 12,\n  \"im_start_id\": 5,\n  \"image_token_id\": 9,\n  \"initializer_range\": 0.02,\n  \"intermediate_size\": 3072,\n  \"kv_lora_rank\": null,\n  \"mask_init_id\": 13,\n  \"max_position_embeddings\": 32768,\n  \"mlp_bias\": false,\n  \"model_type\": \"hunyuan\",\n  \"moe_drop_tokens\": false,\n  \"moe_intermediate_size\": [\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072,\n    3072\n  ],\n  \"moe_layer_num_skipped\": 0,\n  \"moe_random_routing_dropped_token\": false,\n  \"moe_topk\": [\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8\n  ],\n  \"n_group\": null,\n  \"norm_topk_prob\": true,\n  \"norm_type\": \"rms\",\n  \"num_attention_heads\": 32,\n  \"num_experts\": 64,\n  \"num_hidden_layers\": 32,\n  \"num_key_value_heads\": 8,\n  \"num_media_embeds\": 257,\n  \"num_shared_expert\": [\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1\n  ],\n  \"org_vocab_size\": 128167,\n  \"pad_id\": 127961,\n  \"pad_token_id\": 127961,\n  \"pool_type\": \"last\",\n  \"position_embedding_xdrope\": false,\n  \"pretraining_tp\": 1,\n  \"q_lora_rank\": null,\n  \"qk_nope_head_dim\": null,\n  \"qk_rope_head_dim\": null,\n  \"rms_norm_eps\": 1e-05,\n  \"rope_scaling\": {\n    \"alpha\": 1000.0,\n    \"beta_fast\": 32,\n    \"beta_slow\": 1,\n    \"factor\": 1.0,\n    \"mscale\": 1.0,\n    \"mscale_all_dim\": 1.0,\n    \"type\": \"dynamic\"\n  },\n  \"rope_theta\": 10000.0,\n  \"routed_scaling_factor\": 1.0,\n  \"sep_token_id\": 127962,\n  \"skip_cls_token\": false,\n  \"text_end_id\": 8,\n  \"text_start_id\": 7,\n  \"tie_word_embeddings\": true,\n  \"topk_group\": null,\n  \"torch_dtype\": \"bfloat16\",\n  \"transformers_version\": \"4.41.2\",\n  \"use_cache\": true,\n  \"use_cla\": false,\n  \"use_mixed_mlp_moe\": true,\n  \"use_mla\": false,\n  \"use_qk_norm\": true,\n  \"use_rotary_pos_emb\": true,\n  \"v_head_dim\": null,\n  \"video_end_id\": 11,\n  \"video_start_id\": 10,\n  \"vit_add_patchemb_bias\": false,\n  \"vit_input_resolution\": 224,\n  \"vit_mapping_type\": \"resampler\",\n  \"vit_norm_type\": \"fused\",\n  \"vit_patch\": 1,\n  \"vit_path\": null,\n  \"vit_remove_prenorm\": false,\n  \"vit_token\": 64,\n  \"vit_type\": null,\n  \"vit_used_rms_norm\": false,\n  \"vocab_size\": 128167,\n  \"xdrope_section\": null\n}\n",
    "generation_config": "{\n  \"eos_token_id\": [127960, 127967],\n  \"pad_token_id\": 127961,\n  \"do_sample\": true,\n  \"top_k\": 20,\n  \"top_p\": 0.8,\n  \"repetition_penalty\": 1.05,\n  \"temperature\": 0.7,\n  \"transformers_version\": \"4.31.0\"\n}\n",
    "license_file": "",
    "py_files": {
        "configuration_hunyuan.py": "# coding=utf-8\n# Copyright (C) 2024 THL A29 Limited, a Tencent company.  All rights reserved.\n\"\"\" HunYuan model configuration\"\"\"\nfrom torch import nn\nfrom transformers.configuration_utils import PretrainedConfig\nfrom transformers.utils import logging\nfrom typing import List, Union, Optional\n\n\nlogger = logging.get_logger(__name__)\n\n\nclass HunYuanConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`HunYuanModel`]. It is used to instantiate an\n    HunYuan model according to the specified arguments, defining the model architecture. Instantiating a configuration\n    with the defaults will yield a similar configuration to that of the HunYuan-7B.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 32000):\n            Vocabulary size of the HunYuan model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`HunYuanModel`]\n        hidden_size (`int`, *optional*, defaults to 4096):\n            Dimension of the hidden representations.\n        intermediate_size (`int`, *optional*, defaults to 11008):\n            Dimension of the MLP representations or shared MLP representations.\n        moe_intermediate_size (`int` or `List`, *optional*, defaults to 11008):\n            Dimension of the MLP representations in MoE. Use a list if you want a different size per layer.\n        num_hidden_layers (`int`, *optional*, defaults to 32):\n            Number of hidden layers in the Transformer decoder.\n        num_attention_heads (`int`, *optional*, defaults to 32):\n            Number of attention heads for each attention layer in the Transformer decoder.\n        num_key_value_heads (`int`, *optional*):\n            This is the number of key_value heads that should be used to implement Grouped Query Attention. If\n            `num_key_value_heads=num_attention_heads`, the model will use Multi Head Attention (MHA), if\n            `num_key_value_heads=1 the model will use Multi Query Attention (MQA) otherwise GQA is used. When\n            converting a multi-head checkpoint to a GQA checkpoint, each group key and value head should be constructed\n            by meanpooling all the original heads within that group. For more details checkout [this\n            paper](https://arxiv.org/pdf/2305.13245.pdf). If it is not specified, will default to\n            `num_attention_heads`.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"silu\"`):\n            The non-linear activation function (function or string) in the decoder.\n        max_position_embeddings (`int`, *optional*, defaults to 2048):\n            The maximum sequence length that this model might ever be used with.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        rms_norm_eps (`float`, *optional*, defaults to 1e-06):\n            The epsilon used by the rms normalization layers.\n        use_cache (`bool`, *optional*, defaults to `True`):\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        pad_token_id (`int`, *optional*):\n            Padding token id.\n        bos_token_id (`int`, *optional*, defaults to 1):\n            Beginning of stream token id.\n        eos_token_id (`int`, *optional*, defaults to 2):\n            End of stream token id.\n        pretraining_tp (`int`, *optional*, defaults to 1):\n            Experimental feature. Tensor parallelism rank used during pretraining. Please refer to [this\n            document](https://huggingface.co/docs/transformers/parallelism) to understand more about it. This value is\n            necessary to ensure exact reproducibility of the pretraining results. Please refer to [this\n            issue](https://github.com/pytorch/pytorch/issues/76232).\n        tie_word_embeddings (`bool`, *optional*, defaults to `False`):\n            Whether to tie weight embeddings\n        rope_theta (`float`, *optional*, defaults to 10000.0):\n            The base period of the RoPE embeddings.\n        rope_scaling (`Dict`, *optional*):\n            Dictionary containing the scaling configuration for the RoPE embeddings. Currently supports two scaling\n            strategies: linear and dynamic. Their scaling factor must be a float greater than 1. The expected format is\n            `{\"type\": strategy name, \"factor\": scaling factor}`. When using this flag, don't update\n            `max_position_embeddings` to the expected new maximum. See the following thread for more information on how\n            these scaling strategies behave:\n            https://www.reddit.com/r/LocalLLaMA/comments/14mrgpr/dynamically_scaled_rope_further_increases/. This is an\n            experimental feature, subject to breaking API changes in future versions.\n        attention_bias (`bool`, defaults to `False`, *optional*, defaults to `False`):\n            Whether to use a bias in the query, key, value and output projection layers during self-attention.\n        attention_dropout (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        use_qk_norm (`bool`, *optional*, defaults to `False`):\n            Whether query and key in attention use norm\n        use_cla (`bool`, *optional*, defaults to `False`):\n            Whether to use CLA in attention\n        cla_share_factor (`int`, *optional*, defaults to 1):\n            The share factor of CLA\n        num_experts (`int` or `List`, *optional*, defaults to 1):\n            The number of experts for moe. If it is a list, it will be used as the number of experts for each layer.\n        num_shared_expert (`int` or `List`, *optional*, defaults to 1):\n            The number of shared experts for moe. If it is a list, it will be used as the number of shared experts for each layer.\n        moe_topk (`int` or `List`, *optional*, defaults to 1):\n            The topk value for moe. If it is a list, it will be used as the topk value for each layer.\n        capacity_factor (Not used) (`float` or `List`, *optional*, defaults to 1.0):\n            The capacity factor for moe. If it is a list, it will be used as the capacity factor for each layer.\n        moe_layer_num_skipped (`int`, *optional*, defaults to 0):\n            First moe_layer_num_skipped layers do not use MoE.\n    \"\"\"\n\n    model_type = \"hunyuan\"\n    keys_to_ignore_at_inference = [\"past_key_values\"]\n\n    def __init__(\n        self,\n        vocab_size=290943,\n        org_vocab_size=290943,\n        hidden_size=4096,\n        intermediate_size: int=11008,\n        moe_intermediate_size: Union[int, List]=None,\n        num_hidden_layers=32,\n        num_attention_heads=32,\n        num_key_value_heads=None,\n        attention_head_dim=None,\n        hidden_act=\"silu\",\n        max_position_embeddings=2048,\n        initializer_range=0.02,\n        rms_norm_eps=1e-5,\n        use_cache=True,\n        pad_token_id=0,\n        bos_token_id=1,\n        eos_token_id=2,\n        eod_token_id=3,\n        sep_token_id=4,\n        im_start_id=5,\n        im_end_id=6,\n        text_start_id=7,\n        text_end_id=8,\n        image_token_id=9,\n        video_start_id=10,\n        video_end_id=11,\n        im_newline_id=12,\n        mask_init_id=13,\n        pretraining_tp=1,\n        tie_word_embeddings=False,\n        rope_theta=10000.0,\n        rope_scaling=None,\n        attention_bias=False,\n        mlp_bias=False,\n        attention_dropout=0.0,\n        use_qk_norm=False,\n        use_rotary_pos_emb=True,\n        use_cla=False,\n        cla_share_factor=1,\n        norm_type=\"hf_rms\",\n        num_experts: Union[int, List]=1,\n        use_mixed_mlp_moe=False,\n        num_shared_expert: Union[int, List]=1,\n        moe_topk: Union[int, List]=1,\n        # capacity_factor: Union[int, List]=1.0,\n        moe_drop_tokens=False,\n        moe_random_routing_dropped_token=False,\n        use_mla=False,\n        kv_lora_rank=512,\n        q_lora_rank=1536,\n        qk_rope_head_dim=64,\n        v_head_dim=128,\n        qk_nope_head_dim=128,\n        moe_layer_num_skipped=0,\n        norm_topk_prob=True,\n        routed_scaling_factor=1.0,\n        group_limited_greedy=False,\n        n_group=None,\n        topk_group=None,\n        vit_path=None,\n        num_media_embeds=257,\n        vit_type=\"AnyResVit\",\n        vit_input_resolution=224,\n        vit_token=64,\n        vit_patch=1,\n        vit_mapping_type=\"simple_conv_mlp\",\n        vit_norm_type=\"fused\",\n        vit_used_rms_norm=True,\n        vit_remove_prenorm=True,\n        vit_add_patchemb_bias=True,\n        anyres_vit_max_image_size=2048,\n        anyres_pooling_size=2,\n        anyres_vit_two_views=False,\n        skip_cls_token=False,\n        position_embedding_xdrope=False,\n        xdrope_section=None,\n        add_classification_head=False,\n        class_num=0,\n        pool_type=\"last\",\n        pad_id=-1,\n        **kwargs,\n    ):\n        self.vocab_size = vocab_size\n        self.org_vocab_size = org_vocab_size\n        self.max_position_embeddings = max_position_embeddings\n        self.hidden_size = hidden_size\n        self.intermediate_size = intermediate_size\n        self.moe_intermediate_size = moe_intermediate_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.num_experts = num_experts\n        self.use_mixed_mlp_moe = use_mixed_mlp_moe\n        self.num_shared_expert = num_shared_expert\n        self.moe_topk = moe_topk\n        # self.capacity_factor = capacity_factor\n        self.moe_drop_tokens = moe_drop_tokens\n        self.moe_random_routing_dropped_token = moe_random_routing_dropped_token\n\n        if attention_head_dim is not None:\n            self.attention_head_dim = attention_head_dim\n        else:\n            self.attention_head_dim = self.hidden_size // num_attention_heads\n\n        # for backward compatibility\n        if num_key_value_heads is None:\n            num_key_value_heads = num_attention_heads\n\n        self.num_key_value_heads = num_key_value_heads\n        self.hidden_act = hidden_act\n        self.initializer_range = initializer_range\n        self.rms_norm_eps = rms_norm_eps\n        self.pretraining_tp = pretraining_tp\n        self.use_cache = use_cache\n        self.rope_theta = rope_theta\n        self.rope_scaling = rope_scaling\n        # self._rope_scaling_validation()   # TODO: Need validation?\n        self.attention_bias = attention_bias\n        self.mlp_bias = mlp_bias\n        self.attention_dropout = attention_dropout\n        self.use_qk_norm = use_qk_norm\n        self.use_rotary_pos_emb = use_rotary_pos_emb\n        self.use_cla = use_cla\n        self.cla_share_factor = cla_share_factor\n        self.norm_type = norm_type\n        # MLA args\n        self.use_mla = use_mla\n        self.kv_lora_rank = kv_lora_rank\n        self.q_lora_rank = q_lora_rank\n        self.qk_rope_head_dim = qk_rope_head_dim\n        self.qk_nope_head_dim = qk_nope_head_dim\n        self.v_head_dim = v_head_dim\n\n        # DeepSeek related args\n        self.moe_layer_num_skipped = moe_layer_num_skipped\n        self.norm_topk_prob = norm_topk_prob\n        self.routed_scaling_factor = routed_scaling_factor\n        self.group_limited_greedy = group_limited_greedy\n        self.n_group = n_group\n        self.topk_group = topk_group\n        self.add_classification_head = add_classification_head\n        self.class_num = class_num\n        self.pool_type = pool_type\n        self.pad_id = pad_id\n\n        if self.class_num is not None:\n            self.dense_list = [self.hidden_size, self.class_num]\n\n        # Vit args\n        self.vit_path = vit_path\n        self.num_media_embeds = num_media_embeds\n        self.vit_type = vit_type\n        self.vit_input_resolution = vit_input_resolution\n        self.vit_token = vit_token\n        self.vit_patch = vit_patch\n        self.vit_mapping_type = vit_mapping_type\n        self.vit_norm_type = vit_norm_type\n        self.vit_used_rms_norm = vit_used_rms_norm\n        self.vit_remove_prenorm = vit_remove_prenorm\n        self.vit_add_patchemb_bias = vit_add_patchemb_bias\n        self.anyres_vit_max_image_size = anyres_vit_max_image_size\n        self.anyres_pooling_size = anyres_pooling_size\n        self.anyres_vit_two_views = anyres_vit_two_views\n        self.skip_cls_token = skip_cls_token\n        self.position_embedding_xdrope = position_embedding_xdrope\n        self.xdrope_section = xdrope_section\n\n        # token id\n        self.eod_token_id = eod_token_id\n        self.im_start_id = im_start_id\n        self.im_end_id = im_end_id\n        self.text_start_id = text_start_id\n        self.text_end_id = text_end_id\n        self.image_token_id = image_token_id\n        self.video_start_id = video_start_id\n        self.video_end_id = video_end_id\n        self.im_newline_id = im_newline_id\n        self.mask_init_id = mask_init_id\n\n        super().__init__(\n            pad_token_id=pad_token_id,\n            bos_token_id=bos_token_id,\n            eos_token_id=eos_token_id,\n            sep_token_id=sep_token_id,\n            tie_word_embeddings=tie_word_embeddings,\n            **kwargs,\n        )\n\n    def _rope_scaling_validation(self):\n        \"\"\"\n        Validate the `rope_scaling` configuration.\n        \"\"\"\n        if self.rope_scaling is None:\n            return\n\n        if not isinstance(self.rope_scaling, dict) or len(self.rope_scaling) != 2:\n            raise ValueError(\n                \"`rope_scaling` must be a dictionary with with two fields, `type` and `factor` or `type` and `alpha`, \"\n                f\"got {self.rope_scaling}\"\n            )\n        rope_scaling_type = self.rope_scaling.get(\"type\", None)\n        rope_scaling_factor = self.rope_scaling.get(\"factor\", None)\n        rope_scaling_alpha = self.rope_scaling.get(\"alpha\", None)\n        if rope_scaling_type is None or rope_scaling_type not in [\"linear\", \"dynamic\"]:\n            raise ValueError(\n                f\"`rope_scaling`'s type field must be one of ['linear', 'dynamic'], got {rope_scaling_type}\"\n            )\n        if rope_scaling_factor is None and rope_scaling_alpha is None:\n            raise ValueError(\"`rope_scaling`'s factor or alpha field must be have one, got both of none\")\n        if rope_scaling_factor is not None:\n            if not isinstance(rope_scaling_factor, float) or rope_scaling_factor <= 1.0:\n                raise ValueError(f\"`rope_scaling`'s factor field must be a float > 1.0, got {rope_scaling_factor}\")\n        if rope_scaling_alpha is not None:\n            if not isinstance(rope_scaling_alpha, float) or rope_scaling_alpha <= 1.0:\n                raise ValueError(f\"`rope_scaling`'s alpha field must be a float > 1.0, got {rope_scaling_alpha}\")\n",
        "hunyuan.py": "# coding=utf-8\n# Copyright (C) 2024 THL A29 Limited, a Tencent company.  All rights reserved.\n#\n\"\"\" PyTorch HunYuan model.\"\"\"\n\nimport math\nimport warnings\nfrom typing import List, Optional, Tuple, Union\n\nimport torch\nfrom torch import Tensor\nimport torch.nn.functional as F\nimport torch.utils.checkpoint\nfrom torch import nn\nfrom torch.nn import BCEWithLogitsLoss, CrossEntropyLoss, MSELoss\n\nfrom transformers.activations import ACT2FN\nfrom transformers.cache_utils import Cache, DynamicCache\nfrom transformers.modeling_attn_mask_utils import (\n    AttentionMaskConverter,\n    _prepare_4d_attention_mask,\n    _prepare_4d_causal_attention_mask,\n    _prepare_4d_causal_attention_mask_for_sdpa,\n)\nfrom transformers.modeling_outputs import (\n    BaseModelOutputWithPast,\n    CausalLMOutputWithPast,\n    SequenceClassifierOutputWithPast\n)\nfrom transformers.modeling_utils import PreTrainedModel\nfrom transformers.pytorch_utils import ALL_LAYERNORM_LAYERS, is_torch_greater_or_equal_than_1_13\nfrom transformers.utils import (\n    add_start_docstrings,\n    add_start_docstrings_to_model_forward,\n    is_flash_attn_2_available,\n    is_flash_attn_greater_or_equal_2_10,\n    logging,\n    replace_return_docstrings,\n)\nfrom transformers.utils.import_utils import is_torch_fx_available\nfrom transformers.generation.utils import GenerateOutput\nfrom .configuration_hunyuan import HunYuanConfig\nfrom .modeling_hunyuan import HunYuanDecoderLayer, HunYuanRMSNorm\n\n\nif is_flash_attn_2_available():\n    from flash_attn import flash_attn_func, flash_attn_varlen_func\n    from flash_attn.bert_padding import index_first_axis, pad_input, unpad_input  # noqa\n\n\n# This makes `_prepare_4d_causal_attention_mask` a leaf function in the FX graph.\n# It means that the function will not be traced through and simply appear as a node in the graph.\nif is_torch_fx_available():\n    if not is_torch_greater_or_equal_than_1_13:\n        import torch.fx\n\n    _prepare_4d_causal_attention_mask = torch.fx.wrap(_prepare_4d_causal_attention_mask)\n\n\n\n_CONFIG_FOR_DOC = \"HunYuanConfig\"\n\n\nHUNYUAN_START_DOCSTRING = r\"\"\"\n    This model inherits from [`PreTrainedModel`]. Check the superclass documentation for the generic methods the\n    library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads\n    etc.)\n\n    This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module) subclass.\n    Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage\n    and behavior.\n\n    Parameters:\n        config ([`HunYuanConfig`]):\n            Model configuration class with all the parameters of the model. Initializing with a config file does not\n            load the weights associated with the model, only the configuration. Check out the\n            [`~PreTrainedModel.from_pretrained`] method to load the model weights.\n\"\"\"\n\n\n@add_start_docstrings(\n    \"The bare HunYuan Model outputting raw hidden-states without any specific head on top.\",\n    HUNYUAN_START_DOCSTRING,\n)\nclass HunYuanPreTrainedModel(PreTrainedModel):\n    config_class = HunYuanConfig\n    base_model_prefix = \"model\"\n    supports_gradient_checkpointing = True\n    _no_split_modules = [\"HunYuanDecoderLayer\"]\n    _skip_keys_device_placement = \"past_key_values\"\n    _supports_flash_attn_2 = True\n    _supports_sdpa = True\n    _supports_cache_class = True\n\n    def _init_weights(self, module):\n        std = self.config.initializer_range\n        if isinstance(module, nn.Linear):\n            module.weight.data.normal_(mean=0.0, std=std)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=std)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n\n\nHUNYUAN_INPUTS_DOCSTRING = r\"\"\"\n    Args:\n        input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):\n            Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide\n            it.\n\n            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and\n            [`PreTrainedTokenizer.__call__`] for details.\n\n            [What are input IDs?](../glossary#input-ids)\n        attention_mask (`torch.Tensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on padding token indices. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n\n            [What are attention masks?](../glossary#attention-mask)\n\n            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and\n            [`PreTrainedTokenizer.__call__`] for details.\n\n            If `past_key_values` is used, optionally only the last `input_ids` have to be input (see\n            `past_key_values`).\n\n            If you want to change padding behavior, you should read [`modeling_opt._prepare_decoder_attention_mask`]\n            and modify to your needs. See diagram 1 in [the paper](https://arxiv.org/abs/1910.13461) for more\n            information on the default strategy.\n\n            - 1 indicates the head is **not masked**,\n            - 0 indicates the head is **masked**.\n        position_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Indices of positions of each input sequence tokens in the position embeddings. Selected in the range `[0,\n            config.n_positions - 1]`.\n\n            [What are position IDs?](../glossary#position-ids)\n        past_key_values (`Cache` or `tuple(tuple(torch.FloatTensor))`, *optional*):\n            Pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention\n            blocks) that can be used to speed up sequential decoding. This typically consists in the `past_key_values`\n            returned by the model at a previous stage of decoding, when `use_cache=True` or `config.use_cache=True`.\n\n            Two formats are allowed:\n            - a [`~cache_utils.Cache`] instance;\n            - Tuple of `tuple(torch.FloatTensor)` of length `config.n_layers`, with each tuple having 2 tensors of\n            shape `(batch_size, num_heads, sequence_length, embed_size_per_head)`). This is also known as the legacy\n            cache format.\n\n            The model will output the same cache format that is fed as input. If no `past_key_values` are passed, the\n            legacy cache format will be returned.\n\n            If `past_key_values` are used, the user can optionally input only the last `input_ids` (those that don't\n            have their past key value states given to this model) of shape `(batch_size, 1)` instead of all `input_ids`\n            of shape `(batch_size, sequence_length)`.\n        inputs_embeds (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Optionally, instead of passing `input_ids` you can choose to directly pass an embedded representation. This\n            is useful if you want more control over how to convert `input_ids` indices into associated vectors than the\n            model's internal embedding lookup matrix.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        output_attentions (`bool`, *optional*):\n            Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned\n            tensors for more detail.\n        output_hidden_states (`bool`, *optional*):\n            Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for\n            more detail.\n        return_dict (`bool`, *optional*):\n            Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n\"\"\"\n\n\n@add_start_docstrings(\n    \"The bare HunYuan Model outputting raw hidden-states without any specific head on top.\",\n    HUNYUAN_START_DOCSTRING,\n)\nclass HunYuanModel(HunYuanPreTrainedModel):\n    \"\"\"\n    Transformer decoder consisting of *config.num_hidden_layers* layers. Each layer is a [`HunYuanDecoderLayer`]\n\n    Args:\n        config: HunYuanConfig\n    \"\"\"\n\n    def __init__(self, config: HunYuanConfig):\n        super().__init__(config)\n        self.padding_idx = config.pad_token_id\n        self.vocab_size = config.vocab_size\n        self.add_classification_head = config.add_classification_head\n        self.embed_tokens = nn.Embedding(config.vocab_size, config.hidden_size, self.padding_idx)\n        self.layers = nn.ModuleList(\n            [HunYuanDecoderLayer(config, layer_idx) for layer_idx in range(config.num_hidden_layers)]\n        )\n        self._use_sdpa = config._attn_implementation == \"sdpa\"\n        self._use_flash_attention_2 = config._attn_implementation == \"flash_attention_2\"\n        if not config.add_classification_head:\n            self.norm = HunYuanRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n\n        self.cla = config.use_cla\n        self.cla_share_factor = config.cla_share_factor\n\n        self.gradient_checkpointing = False\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embed_tokens\n\n    def set_input_embeddings(self, value):\n        self.embed_tokens = value\n\n    @add_start_docstrings_to_model_forward(HUNYUAN_INPUTS_DOCSTRING)\n    def forward(\n        self,\n        input_ids: torch.LongTensor = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_values: Optional[List[torch.FloatTensor]] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple, BaseModelOutputWithPast]:\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        # retrieve input_ids and inputs_embeds\n        # if input_ids is not None and inputs_embeds is not None:\n        #     raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        if input_ids is not None:\n            batch_size, seq_length = input_ids.shape[:2]\n        elif inputs_embeds is not None:\n            batch_size, seq_length = inputs_embeds.shape[:2]\n        else:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        if self.gradient_checkpointing and self.training:\n            if use_cache:\n                logger.warning_once(\n                    \"`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`...\"\n                )\n                use_cache = False\n\n        past_key_values_length = 0\n        if use_cache:\n            use_legacy_cache = not isinstance(past_key_values, Cache)\n            if use_legacy_cache:\n                past_key_values = DynamicCache.from_legacy_cache(past_key_values)\n            past_key_values_length = past_key_values.get_usable_length(seq_length)\n\n        if position_ids is None:\n            device = input_ids.device if input_ids is not None else inputs_embeds.device\n            position_ids = torch.arange(\n                past_key_values_length, seq_length + past_key_values_length, dtype=torch.long, device=device\n            )\n            position_ids = position_ids.unsqueeze(0)\n\n        if inputs_embeds is None:\n            inputs_embeds = self.embed_tokens(input_ids)\n        \n        # Fix lora with gradient checkpointing training\n        if self.training and inputs_embeds.is_leaf:\n            inputs_embeds.requires_grad = True\n\n        if self._use_flash_attention_2:\n            # 2d mask is passed through the layers\n            attention_mask = attention_mask if (attention_mask is not None and 0 in attention_mask) else None\n        elif self._use_sdpa and not output_attentions:\n            # output_attentions=True can not be supported when using SDPA, and we fall back on\n            # the manual implementation that requires a 4D causal mask in all cases.\n            attention_mask = _prepare_4d_causal_attention_mask_for_sdpa(\n                attention_mask,\n                (batch_size, seq_length),\n                inputs_embeds,\n                past_key_values_length,\n            )\n        else:\n            # 4d mask is passed through the layers\n            attention_mask = _prepare_4d_causal_attention_mask(\n                attention_mask, (batch_size, seq_length), inputs_embeds, past_key_values_length\n            )\n\n        # embed positions\n        hidden_states = inputs_embeds\n\n        # decoder layers\n        all_hidden_states = () if output_hidden_states else None\n        all_self_attns = () if output_attentions else None\n        next_decoder_cache = None\n\n        prev_kv_states = None\n        for layer_idx, decoder_layer in enumerate(self.layers):\n            if output_hidden_states:\n                all_hidden_states += (hidden_states,)\n\n            if self.gradient_checkpointing and self.training:\n                layer_outputs = self._gradient_checkpointing_func(\n                    decoder_layer.__call__,\n                    hidden_states,\n                    attention_mask,\n                    position_ids,\n                    past_key_values,\n                    output_attentions,\n                    use_cache,\n                    prev_kv_states,\n                )\n            else:\n                layer_outputs = decoder_layer(\n                    hidden_states,\n                    attention_mask=attention_mask,\n                    position_ids=position_ids,\n                    past_key_value=past_key_values,\n                    output_attentions=output_attentions,\n                    use_cache=use_cache,\n                    kv_states=prev_kv_states\n                )\n\n            hidden_states = layer_outputs[0]\n\n            if use_cache:\n                next_decoder_cache = layer_outputs[2 if output_attentions else 1]\n\n            if output_attentions:\n                all_self_attns += (layer_outputs[1],)\n\n            kv_states = layer_outputs[-1]\n\n            if self.cla and layer_idx % self.cla_share_factor == 0:\n                prev_kv_states = kv_states\n        if not self.add_classification_head:\n            hidden_states = self.norm(hidden_states)\n\n        # add hidden states from the last decoder layer\n        if output_hidden_states:\n            all_hidden_states += (hidden_states,)\n\n        next_cache = None\n        if use_cache:\n            next_cache = next_decoder_cache.to_legacy_cache() if use_legacy_cache else next_decoder_cache\n        if not return_dict:\n            return tuple(v for v in [hidden_states, next_cache, all_hidden_states, all_self_attns] if v is not None)\n        return BaseModelOutputWithPast(\n            last_hidden_state=hidden_states,\n            past_key_values=next_cache,\n            hidden_states=all_hidden_states,\n            attentions=all_self_attns,\n        )\n\n\nclass HunYuanMoEV1ForCausalLM(HunYuanPreTrainedModel):\n    _tied_weights_keys = [\"lm_head.weight\"]\n\n    def __init__(self, config: HunYuanConfig):\n        super().__init__(config)\n        \n        self.config = config\n        self.model = HunYuanModel(config)\n        self.add_classification_head = config.add_classification_head\n        self.pad_id = config.pad_id\n        self.vocab_size = config.vocab_size\n        self.lm_head = nn.Linear(config.hidden_size, config.vocab_size, bias=False)\n        if config.add_classification_head:\n            self.pool_head = nn.Linear(config.hidden_size, config.hidden_size, bias=False)\n            self.pool_head2 = nn.Linear(config.hidden_size, config.class_num, bias=False)\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.model.embed_tokens\n\n    def set_input_embeddings(self, value):\n        self.model.embed_tokens = value\n\n    def get_output_embeddings(self):\n        return self.lm_head\n\n    def set_output_embeddings(self, new_embeddings):\n        self.lm_head = new_embeddings\n\n    def set_decoder(self, decoder):\n        self.model = decoder\n\n    def get_decoder(self):\n        return self.model\n\n    @add_start_docstrings_to_model_forward(HUNYUAN_INPUTS_DOCSTRING)\n    @replace_return_docstrings(output_type=CausalLMOutputWithPast, config_class=_CONFIG_FOR_DOC)\n    def forward(\n        self,\n        input_ids: torch.LongTensor = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_values: Optional[List[torch.FloatTensor]] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n        labels: Optional[torch.LongTensor] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple, CausalLMOutputWithPast]:\n        r\"\"\"\n        Args:\n            labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n                Labels for computing the masked language modeling loss. Indices should either be in `[0, ...,\n                config.vocab_size]` or -100 (see `input_ids` docstring). Tokens with indices set to `-100` are ignored\n                (masked), the loss is only computed for the tokens with labels in `[0, ..., config.vocab_size]`.\n\n        Returns:\n\n        Example:\n\n        ```python\n        >>> from transformers import AutoTokenizer, AutoModelForCausalLM\n\n        >>> model = AutoModelForCausalLM.from_pretrained(PATH_TO_CONVERTED_WEIGHTS)\n        >>> tokenizer = AutoTokenizer.from_pretrained(PATH_TO_CONVERTED_TOKENIZER)\n\n        >>> prompt = \"Hey, are you conscious? Can you talk to me?\"\n        >>> inputs = tokenizer(prompt, return_tensors=\"pt\")\n\n        >>> # Generate\n        >>> generate_ids = model.generate(inputs.input_ids, max_length=30)\n        >>> tokenizer.batch_decode(generate_ids, skip_special_tokens=True, clean_up_tokenization_spaces=False)[0]\n        \"Hey, are you conscious? Can you talk to me?\\nI'm not conscious, but I can talk to you.\"\n        ```\"\"\"\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        # decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)\n        outputs = self.model(\n            input_ids=input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            past_key_values=past_key_values,\n            inputs_embeds=inputs_embeds,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        hidden_states = outputs[0]\n\n        if not self.add_classification_head:\n            if self.config.pretraining_tp > 1:\n                lm_head_slices = self.lm_head.weight.split(self.vocab_size // self.config.pretraining_tp, dim=0)\n                logits = [F.linear(hidden_states, lm_head_slices[i]) for i in range(self.config.pretraining_tp)]\n                logits = torch.cat(logits, dim=-1)\n            else:\n                logits = self.lm_head(hidden_states)\n            logits = logits.float()\n        else:\n            logits = hidden_states\n            logits = logits.float()\n            pooled_output = self.pool_head(logits)\n            pooled_output = torch.tanh(pooled_output)\n            pooled_output = self.pool_head2(pooled_output).contiguous()  # bs * class_num\n            if len(pooled_output.shape) < 2:\n                raise ValueError(\"pooled_output does not have enough dimensions for transpose\")\n\n            if self.config.pool_type == \"mean\":\n                reward = pooled_output.mean(dim=1).squeeze(-1)\n            elif self.config.pool_type == \"last\":\n                # bs * hidden_size\n                seq_length = (input_ids != self.pad_id).long().sum(dim=1) - 1\n                batch_size = input_ids.size(0)\n                reward = pooled_output[torch.arange(batch_size, device=pooled_output.device), seq_length].squeeze(-1)\n            else:\n                reward = pooled_output[:, 0].squeeze(-1)\n\n        loss = None\n        if labels is not None:\n            # Shift so that tokens < n predict n\n            shift_logits = logits[..., :-1, :].contiguous()\n            shift_labels = labels[..., 1:].contiguous()\n            # Flatten the tokens\n            loss_fct = CrossEntropyLoss()\n            shift_logits = shift_logits.reshape(-1, self.config.vocab_size)\n            shift_labels = shift_labels.reshape(-1)\n            # Enable model parallelism\n            shift_labels = shift_labels.to(shift_logits.device)\n            loss = loss_fct(shift_logits, shift_labels)\n\n        if not return_dict:\n            output = (logits,) + outputs[1:]\n            return (loss,) + output if loss is not None else output\n\n        output = CausalLMOutputWithPast(\n            loss=loss,\n            logits=logits,\n            past_key_values=outputs.past_key_values,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n        if self.add_classification_head:\n            output['reward'] = reward\n\n        return output\n\n    def prepare_inputs_for_generation(\n        self, input_ids, past_key_values=None, attention_mask=None, inputs_embeds=None, **kwargs\n    ):\n        if past_key_values is not None:\n            if isinstance(past_key_values, Cache):\n                cache_length = past_key_values.get_seq_length()\n                past_length = past_key_values.seen_tokens\n                max_cache_length = past_key_values.get_max_cache_shape()\n            else:\n                cache_length = past_length = past_key_values[0][0].shape[2]\n                max_cache_length = None\n\n            # Keep only the unprocessed tokens:\n            # 1 - If the length of the attention_mask exceeds the length of input_ids, then we are in a setting where\n            # some of the inputs are exclusivelly passed as part of the cache (e.g. when passing input_embeds as\n            # input)\n            if attention_mask is not None and attention_mask.shape[1] > input_ids.shape[1]:\n                input_ids = input_ids[:, -(attention_mask.shape[1] - past_length):]\n            # 2 - If the past_length is smaller than input_ids', then input_ids holds all input tokens. We can discard\n            # input_ids based on the past_length.\n            elif past_length < input_ids.shape[1]:\n                input_ids = input_ids[:, past_length:]\n            # 3 - Otherwise (past_length >= input_ids.shape[1]), let's assume input_ids only has unprocessed tokens.\n\n            # If we are about to go beyond the maximum cache length, we need to crop the input attention mask.\n            if (\n                max_cache_length is not None\n                and attention_mask is not None\n                and cache_length + input_ids.shape[1] > max_cache_length\n            ):\n                attention_mask = attention_mask[:, -max_cache_length:]\n\n        position_ids = kwargs.get(\"position_ids\", None)\n        if attention_mask is not None and position_ids is None:\n            # create position_ids on the fly for batch generation\n            position_ids = attention_mask.long().cumsum(-1) - 1\n            position_ids.masked_fill_(attention_mask == 0, 1)\n            if past_key_values:\n                position_ids = position_ids[:, -input_ids.shape[1]:]\n\n        # if `inputs_embeds` are passed, we only want to use them in the 1st generation step\n        if inputs_embeds is not None and past_key_values is None:\n            model_inputs = {\"inputs_embeds\": inputs_embeds}\n        else:\n            model_inputs = {\"input_ids\": input_ids}\n\n        model_inputs.update(\n            {\n                \"position_ids\": position_ids,\n                \"past_key_values\": past_key_values,\n                \"use_cache\": kwargs.get(\"use_cache\"),\n                \"attention_mask\": attention_mask,\n            }\n        )\n        return model_inputs\n\n    @staticmethod\n    def _reorder_cache(past_key_values, beam_idx):\n        reordered_past = ()\n        for layer_past in past_key_values:\n            reordered_past += (\n                tuple(past_state.index_select(0, beam_idx.to(past_state.device)) for past_state in layer_past),\n            )\n        return reordered_past\n\n\nclass MultimodelHunYuanForCausalLM(HunYuanMoEV1ForCausalLM):\n    _tied_weights_keys = [\"lm_head.weight\"]\n\n    def __init__(self, config: HunYuanConfig):\n        super().__init__(config)\n\n    @add_start_docstrings_to_model_forward(HUNYUAN_INPUTS_DOCSTRING)\n    @replace_return_docstrings(output_type=CausalLMOutputWithPast, config_class=_CONFIG_FOR_DOC)\n    def forward(\n        self,\n        input_ids: torch.LongTensor = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_values: Optional[List[torch.FloatTensor]] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n        labels: Optional[torch.LongTensor] = None,\n        imgs: Optional[List[torch.FloatTensor]] = None,\n        imgs_pos: Optional[List[int]] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple, CausalLMOutputWithPast]:\n        r\"\"\"\n        Args:\n            labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n                Labels for computing the masked language modeling loss. Indices should either be in `[0, ...,\n                config.vocab_size]` or -100 (see `input_ids` docstring). Tokens with indices set to `-100` are ignored\n                (masked), the loss is only computed for the tokens with labels in `[0, ..., config.vocab_size]`.\n\n        Returns:\n\n        Example:\n\n        ```python\n        >>> from transformers import AutoTokenizer, AutoModelForCausalLM\n\n        >>> model = AutoModelForCausalLM.from_pretrained(PATH_TO_CONVERTED_WEIGHTS)\n        >>> tokenizer = AutoTokenizer.from_pretrained(PATH_TO_CONVERTED_TOKENIZER)\n\n        >>> prompt = \"Hey, are you conscious? Can you talk to me?\"\n        >>> inputs = tokenizer(prompt, return_tensors=\"pt\")\n\n        >>> # Generate\n        >>> generate_ids = model.generate(inputs.input_ids, max_length=30)\n        >>> tokenizer.batch_decode(generate_ids, skip_special_tokens=True, clean_up_tokenization_spaces=False)[0]\n        \"Hey, are you conscious? Can you talk to me?\\nI'm not conscious, but I can talk to you.\"\n        ```\"\"\"\n        mask_init_id = self.config.mask_init_id\n        pad_id = self.config.pad_token_id\n        eod_id = self.config.eod_token_id\n        image_token_id = self.config.image_token_id\n        im_start_id = self.config.im_start_id\n        im_end_id = self.config.im_end_id\n        video_start_id = self.config.video_start_id\n        video_end_id = self.config.video_end_id\n\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        # decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)\n\n        outputs = self.model(\n            input_ids=input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            past_key_values=past_key_values,\n            inputs_embeds=inputs_embeds,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        hidden_states = outputs[0]\n        if self.config.pretraining_tp > 1:\n            lm_head_slices = self.lm_head.weight.split(self.vocab_size // self.config.pretraining_tp, dim=0)\n            logits = [F.linear(hidden_states, lm_head_slices[i]) for i in range(self.config.pretraining_tp)]\n            logits = torch.cat(logits, dim=-1)\n        else:\n            logits = self.lm_head(hidden_states)\n        logits = logits.float()\n\n        loss = None\n        if labels is not None:\n            labels = labels.to(logits.device)\n            # Shift so that tokens < n predict n\n            shift_logits = logits\n            shift_labels = labels\n            # Flatten the tokens\n            loss_fct = CrossEntropyLoss()\n            shift_logits = shift_logits.reshape(-1, self.config.vocab_size)\n            shift_labels = shift_labels.reshape(-1)\n            shift_tokens = input_ids.reshape(-1)\n            # compute loss\n            mask = (shift_labels < mask_init_id) & (shift_labels != pad_id) & (shift_labels != image_token_id) & (shift_labels != im_start_id) \\\n                    & (shift_labels != im_end_id) & (shift_labels != video_start_id) & (shift_labels != video_end_id) & (shift_tokens != pad_id) & (shift_tokens != eod_id)\n            shift_logits = shift_logits[mask, :]\n            shift_labels = shift_labels[mask]\n            loss = loss_fct(shift_logits, shift_labels)\n\n        if not return_dict:\n            output = (logits,) + outputs[1:]\n            return (loss,) + output if loss is not None else output\n\n        return CausalLMOutputWithPast(\n            loss=loss,\n            logits=logits,\n            past_key_values=outputs.past_key_values,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n\n    def prepare_inputs_for_generation(\n        self, input_ids, past_key_values=None, attention_mask=None, inputs_embeds=None, **kwargs\n    ):\n        imgs = kwargs.pop(\"imgs\", None)\n        imgs_pos = kwargs.pop(\"imgs_pos\", None)\n        inputs = super().prepare_inputs_for_generation(\n            input_ids, past_key_values=past_key_values, attention_mask=attention_mask, inputs_embeds=inputs_embeds, **kwargs\n        )\n\n        if imgs is not None:\n            inputs['imgs'] = imgs\n        if imgs_pos is not None:\n            inputs['imgs_pos'] = imgs_pos\n        return inputs\n    \n    @torch.no_grad()\n    def generate(\n        self,\n        inputs: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        imgs: Optional[List[torch.FloatTensor]] = None,\n        imgs_pos: Optional[List[int]] = None,\n        **kwargs,\n    ) -> Union[GenerateOutput, torch.LongTensor]:\n        if \"inputs_embeds\" in kwargs:\n            raise NotImplementedError(\"`inputs_embeds` is not supported\")\n        \n        return super().generate(\n            inputs=input_ids,\n            position_ids=position_ids,\n            attention_mask=attention_mask,\n            inputs_embeds=inputs_embeds,\n            eos_token_id=self.config.eod_token_id,\n            **kwargs\n        )\n\n\n@add_start_docstrings(\n    \"\"\"\n    The HunYuan Model transformer with a sequence classification head on top (linear layer).\n\n    [`HunYuanForSequenceClassification`] uses the last token in order to do the classification, as other causal models\n    (e.g. GPT-2) do.\n\n    Since it does classification on the last token, it requires to know the position of the last token. If a\n    `pad_token_id` is defined in the configuration, it finds the last token that is not a padding token in each row. If\n    no `pad_token_id` is defined, it simply takes the last value in each row of the batch. Since it cannot guess the\n    padding tokens when `inputs_embeds` are passed instead of `input_ids`, it does the same (take the last value in\n    each row of the batch).\n    \"\"\",\n    HUNYUAN_START_DOCSTRING,\n)\nclass HunYuanForSequenceClassification(HunYuanPreTrainedModel):\n    def __init__(self, config):\n        super().__init__(config)\n        self.num_labels = config.num_labels\n        self.model = HunYuanModel(config)\n        self.score = nn.Linear(config.hidden_size, self.num_labels, bias=False)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.model.embed_tokens\n\n    def set_input_embeddings(self, value):\n        self.model.embed_tokens = value\n\n    @add_start_docstrings_to_model_forward(HUNYUAN_INPUTS_DOCSTRING)\n    def forward(\n        self,\n        input_ids: torch.LongTensor = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_values: Optional[List[torch.FloatTensor]] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n        labels: Optional[torch.LongTensor] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple, SequenceClassifierOutputWithPast]:\n        r\"\"\"\n        labels (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n            Labels for computing the sequence classification/regression loss. Indices should be in `[0, ...,\n            config.num_labels - 1]`. If `config.num_labels == 1` a regression loss is computed (Mean-Square loss), If\n            `config.num_labels > 1` a classification loss is computed (Cross-Entropy).\n        \"\"\"\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        transformer_outputs = self.model(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            past_key_values=past_key_values,\n            inputs_embeds=inputs_embeds,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        hidden_states = transformer_outputs[0]\n        logits = self.score(hidden_states)\n\n        if input_ids is not None:\n            batch_size = input_ids.shape[0]\n        else:\n            batch_size = inputs_embeds.shape[0]\n\n        if self.config.pad_token_id is None and batch_size != 1:\n            raise ValueError(\"Cannot handle batch sizes > 1 if no padding token is defined.\")\n        if self.config.pad_token_id is None:\n            sequence_lengths = -1\n        else:\n            if input_ids is not None:\n                sequence_lengths = (torch.eq(input_ids, self.config.pad_token_id).int().argmax(-1) - 1).to(\n                    logits.device\n                )\n            else:\n                sequence_lengths = -1\n\n        pooled_logits = logits[torch.arange(batch_size, device=logits.device), sequence_lengths]\n\n        loss = None\n        if labels is not None:\n            labels = labels.to(logits.device)\n            if self.config.problem_type is None:\n                if self.num_labels == 1:\n                    self.config.problem_type = \"regression\"\n                elif self.num_labels > 1 and (labels.dtype == torch.long or labels.dtype == torch.int):\n                    self.config.problem_type = \"single_label_classification\"\n                else:\n                    self.config.problem_type = \"multi_label_classification\"\n\n            if self.config.problem_type == \"regression\":\n                loss_fct = MSELoss()\n                if self.num_labels == 1:\n                    loss = loss_fct(pooled_logits.squeeze(), labels.squeeze())\n                else:\n                    loss = loss_fct(pooled_logits, labels)\n            elif self.config.problem_type == \"single_label_classification\":\n                loss_fct = CrossEntropyLoss()\n                loss = loss_fct(pooled_logits.reshape(-1, self.num_labels), labels.reshape(-1))\n            elif self.config.problem_type == \"multi_label_classification\":\n                loss_fct = BCEWithLogitsLoss()\n                loss = loss_fct(pooled_logits, labels)\n        if not return_dict:\n            output = (pooled_logits,) + transformer_outputs[1:]\n            return ((loss,) + output) if loss is not None else output\n\n        return SequenceClassifierOutputWithPast(\n            loss=loss,\n            logits=pooled_logits,\n            past_key_values=transformer_outputs.past_key_values,\n            hidden_states=transformer_outputs.hidden_states,\n            attentions=transformer_outputs.attentions,\n        )",
        "modeling_hunyuan.py": "# Copyright (C) 2024 THL A29 Limited, a Tencent company.  All rights reserved.\n#\n# Licensed under the TENCENT HUNYUAN COMMUNITY LICENSE AGREEMENT (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://github.com/Tencent/Tencent-Hunyuan-Large/blob/main/License.docx\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\"\"\" PyTorch HunYuan model.\"\"\"\n\nimport math\nimport warnings\nfrom typing import List, Optional, Tuple, Union\n\nimport torch\nfrom torch import Tensor\nimport torch.nn.functional as F\nimport torch.utils.checkpoint\nfrom torch import nn\nfrom torch.nn import BCEWithLogitsLoss, CrossEntropyLoss, MSELoss\n\nfrom transformers.activations import ACT2FN\nfrom transformers.cache_utils import Cache, DynamicCache\nfrom transformers.modeling_attn_mask_utils import (\n    AttentionMaskConverter,\n    _prepare_4d_attention_mask,\n    _prepare_4d_causal_attention_mask,\n    _prepare_4d_causal_attention_mask_for_sdpa,\n)\nfrom transformers.modeling_outputs import (\n    BaseModelOutputWithPast,\n    CausalLMOutputWithPast,\n    SequenceClassifierOutputWithPast\n)\nfrom transformers.modeling_utils import PreTrainedModel\nfrom transformers.pytorch_utils import ALL_LAYERNORM_LAYERS, is_torch_greater_or_equal_than_1_13\nfrom transformers.utils import (\n    add_start_docstrings,\n    add_start_docstrings_to_model_forward,\n    is_flash_attn_2_available,\n    is_flash_attn_greater_or_equal_2_10,\n    logging,\n    replace_return_docstrings,\n)\nfrom transformers.utils.import_utils import is_torch_fx_available\nfrom .configuration_hunyuan import HunYuanConfig\n\n\nif is_flash_attn_2_available():\n    from flash_attn import flash_attn_func, flash_attn_varlen_func\n    from flash_attn.bert_padding import index_first_axis, pad_input, unpad_input  # noqa\n\n\n# This makes `_prepare_4d_causal_attention_mask` a leaf function in the FX graph.\n# It means that the function will not be traced through and simply appear as a node in the graph.\nif is_torch_fx_available():\n    if not is_torch_greater_or_equal_than_1_13:\n        import torch.fx\n\n    _prepare_4d_causal_attention_mask = torch.fx.wrap(_prepare_4d_causal_attention_mask)\n\n\nlogger = logging.get_logger(__name__)\n\n_CONFIG_FOR_DOC = \"HunYuanConfig\"\n\n\ndef topkgating(logits: Tensor, topk: int):\n    logits = logits.float()\n    gates = F.softmax(logits, dim=1)\n    # expert_capacity = topk * gates.shape[0]\n    expert_capacity = max(topk, topk * gates.shape[0] // gates.shape[1])\n    num_experts = int(gates.shape[1])\n    # Top-k router probability and corresponding expert indices for each token.\n    # Shape: [tokens_per_group, num_selected_experts].\n    expert_gate, expert_index = torch.topk(gates, topk)\n    expert_mask = F.one_hot(expert_index, num_experts)\n    # For a given token, determine if it was routed to a given expert.\n    # Shape: [tokens_per_group, num_experts]\n    expert_mask_aux = expert_mask.max(dim=-2)[0]\n    tokens_per_group_and_expert = torch.mean(expert_mask_aux.float(), dim=-2)\n    router_prob_per_group_and_expert = torch.mean(gates.float(), dim=-2)\n    l_aux = num_experts**2 * torch.mean(tokens_per_group_and_expert * router_prob_per_group_and_expert)\n\n    gates_s = torch.clamp(\n        torch.matmul(expert_mask.float(), gates.unsqueeze(-1)).sum(dim=1), min=torch.finfo(gates.dtype).eps\n    )\n    router_probs = gates / gates_s\n    # Make num_selected_experts the leading axis to ensure that top-1 choices\n    # have priority over top-2 choices, which have priority over top-3 choices,\n    # etc.\n    expert_index = torch.transpose(expert_index, 0, 1)\n    # Shape: [num_selected_experts * tokens_per_group]\n    expert_index = expert_index.reshape(-1)\n\n    # Create mask out of indices.\n    # Shape: [tokens_per_group * num_selected_experts, num_experts].\n    expert_mask = F.one_hot(expert_index, num_experts).to(torch.int32)\n    exp_counts = torch.sum(expert_mask, dim=0).detach()\n\n    # Experts have a fixed capacity that we cannot exceed. A token's priority\n    # within the expert's buffer is given by the masked, cumulative capacity of\n    # its target expert.\n    # Shape: [tokens_per_group * num_selected_experts, num_experts].\n    token_priority = torch.cumsum(expert_mask, dim=0) * expert_mask - 1\n    # Shape: [num_selected_experts, tokens_per_group, num_experts].\n    token_priority = token_priority.reshape((topk, -1, num_experts))\n    # Shape: [tokens_per_group, num_selected_experts, num_experts].\n    token_priority = torch.transpose(token_priority, 0, 1)\n    # For each token, across all selected experts, select the only non-negative\n    # (unmasked) priority. Now, for group G routing to expert E, token T has\n    # non-negative priority (i.e. token_priority[G,T,E] >= 0) if and only if E\n    # is its targeted expert.\n    # Shape: [tokens_per_group, num_experts].\n    token_priority = torch.max(token_priority, dim=1)[0]\n\n    # Token T can only be routed to expert E if its priority is positive and\n    # less than the expert capacity. One-hot matrix will ignore indices outside\n    # the range [0, expert_capacity).\n    # Shape: [tokens_per_group, num_experts, expert_capacity].\n    valid_mask = torch.logical_and(token_priority >= 0, token_priority < expert_capacity)\n    token_priority = torch.masked_fill(token_priority, ~valid_mask, 0)\n    dispatch_mask = F.one_hot(token_priority, expert_capacity).to(torch.bool)\n    valid_mask = valid_mask.unsqueeze(-1).expand(-1, -1, expert_capacity)\n    dispatch_mask = torch.masked_fill(dispatch_mask, ~valid_mask, 0)\n\n    # The combine array will be used for combining expert outputs, scaled by the\n    # router probabilities. Shape: [num_groups, tokens_per_group, num_experts,\n    # expert_capacity].\n    combine_weights = torch.einsum(\"...te,...tec->...tec\", router_probs, dispatch_mask)\n    exp_counts_capacity = torch.sum(dispatch_mask)\n    exp_capacity_rate = exp_counts_capacity / (logits.shape[0]*topk)\n\n    return [l_aux, exp_capacity_rate], combine_weights, dispatch_mask, exp_counts\n\n\ndef top1gating(logits: Tensor, random_routing_dropped_token: bool = False):\n    \"\"\"Implements Top1Gating on logits.\"\"\"\n    # everything is in fp32 in this function\n    logits = logits.float()\n    gates = F.softmax(logits, dim=1)\n    capacity = gates.shape[0]\n\n    # Create a mask for 1st's expert per token\n    # noisy gating\n    indices1_s = torch.argmax(gates, dim=1)\n    num_experts = int(gates.shape[1])\n    mask1 = F.one_hot(indices1_s, num_classes=num_experts)\n\n    # gating decisions\n    # exp_counts = torch.sum(mask1, dim=0).detach().to('cpu')\n    exp_counts = torch.sum(mask1, dim=0).detach()\n\n    # Compute l_aux\n    me = torch.mean(gates, dim=0)\n    ce = torch.mean(mask1.float(), dim=0)\n    l_aux = torch.sum(me * ce) * num_experts\n    mask1_rand = mask1\n\n    top_idx = torch.topk(mask1_rand, k=capacity, dim=0)[1]\n\n    new_mask1 = mask1 * torch.zeros_like(mask1).scatter_(0, top_idx, 1)\n    mask1 = new_mask1\n    mask1_bk = mask1\n    if random_routing_dropped_token:\n        not_full = capacity - new_mask1.sum(dim=0)\n        sorted_notfull, indices_notfull = torch.sort(not_full, descending=True)\n        sorted_notfull = sorted_notfull.to(torch.int64)\n        not_full_experts_ids = torch.repeat_interleave(indices_notfull, sorted_notfull)\n        shuffle_not_full_ids = torch.randperm(not_full_experts_ids.shape[0])\n        not_full_experts_ids = not_full_experts_ids[shuffle_not_full_ids]\n        indices1_s_after_drop = torch.argmax(new_mask1, dim=1)\n        # get drop idx\n        drop_mask = 1 - new_mask1.sum(dim=1)\n        drop_mask = drop_mask.bool()\n        drop_idx = drop_mask.nonzero().view(-1)\n        drop_num = drop_mask.sum().to(torch.int64)\n        indices1_s_after_drop.scatter_(0, drop_idx, not_full_experts_ids[:drop_num])\n        nodrop_mask1 = F.one_hot(indices1_s_after_drop, num_classes=num_experts)\n        mask1 = nodrop_mask1\n\n    # Compute locations in capacity buffer\n    locations1 = torch.cumsum(mask1, dim=0) - 1\n\n    # Store the capacity location for each token\n    locations1_s = torch.sum(locations1 * mask1, dim=1)\n\n    # Normalize gate probabilities\n    mask1_float = mask1.float()\n    gates = gates * mask1_float\n\n    locations1_sc = F.one_hot(locations1_s, num_classes=capacity).float()   # one hot to float\n    combine_weights = torch.einsum(\"se,sc->sec\", gates, locations1_sc)\n\n    dispatch_mask = combine_weights.bool()\n\n    exp_counts_capacity = torch.sum(mask1_bk)\n    exp_capacity_rate = exp_counts_capacity / (logits.shape[0])\n    return [l_aux, exp_capacity_rate], combine_weights, dispatch_mask, exp_counts\n\n\ndef _get_unpad_data(attention_mask):\n    seqlens_in_batch = attention_mask.sum(dim=-1, dtype=torch.int32)\n    indices = torch.nonzero(attention_mask.flatten(), as_tuple=False).flatten()\n    max_seqlen_in_batch = seqlens_in_batch.max().item()\n    cu_seqlens = F.pad(torch.cumsum(seqlens_in_batch, dim=0, dtype=torch.torch.int32), (1, 0))\n    return (\n        indices,\n        cu_seqlens,\n        max_seqlen_in_batch,\n    )\n\n\ndef _expand_mask(mask: torch.Tensor, dtype: torch.dtype, tgt_len: Optional[int] = None):\n    warnings.warn(\n        \"Calling `transformers.models.llama.modeling_llama._prepare_4d_attention_mask` is deprecated and will be \"\n        \"removed in v4.37. Use `transformers.modeling_attn_mask_utils._prepare_4d_attention_mask\"\n    )\n    return _prepare_4d_attention_mask(mask=mask, dtype=dtype, tgt_len=tgt_len)\n\n\ndef _make_causal_mask(\n    input_ids_shape: torch.Size, dtype: torch.dtype, device: torch.device, past_key_values_length: int = 0\n):\n    warnings.warn(\n        \"Calling `transformers.models.llama.modeling_llama._make_causal_mask` is deprecated and will be removed in \"\n        \"v4.37. Use `transformers.models.llama.modeling_llama.AttentionMaskConverter._make_causal_mask\"\n    )\n    return AttentionMaskConverter._make_causal_mask(\n        input_ids_shape=input_ids_shape, dtype=dtype, device=device, past_key_values_length=past_key_values_length\n    )\n\n\nclass HunYuanRMSNorm(nn.Module):\n    def __init__(self, hidden_size, eps=1e-6):\n        \"\"\"\n        HunYuanRMSNorm is equivalent to T5LayerNorm\n        \"\"\"\n        super().__init__()\n        self.weight = nn.Parameter(torch.ones(hidden_size))\n        self.variance_epsilon = eps\n\n    def forward(self, hidden_states):\n        input_dtype = hidden_states.dtype\n        hidden_states = hidden_states.to(torch.float32)\n        variance = hidden_states.pow(2).mean(-1, keepdim=True)\n        hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)\n        return self.weight * hidden_states.to(input_dtype)\n\n\nALL_LAYERNORM_LAYERS.append(HunYuanRMSNorm)\n\n\nclass HunYuanRotaryEmbedding(nn.Module):\n    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None):\n        super().__init__()\n\n        self.dim = dim\n        self.max_position_embeddings = max_position_embeddings\n        self.base = base\n        inv_freq = 1.0 / (self.base ** (torch.arange(0, self.dim, 2).float().to(device) / self.dim))\n        # inv_freq = inv_freq.bfloat16()\n        self.register_buffer(\"inv_freq\", inv_freq, persistent=False)\n\n        # Build here to make `torch.jit.trace` work.\n        self._set_cos_sin_cache(\n            seq_len=max_position_embeddings, device=self.inv_freq.device, dtype=torch.get_default_dtype()\n        )\n\n    def _set_cos_sin_cache(self, seq_len, device, dtype):\n        self.max_seq_len_cached = seq_len\n        t = torch.arange(self.max_seq_len_cached, device=device, dtype=torch.float32)\n\n        self.inv_freq = 1.0 / (self.base ** (torch.arange(0, self.dim, 2).float().to(device) / self.dim))\n        freqs = torch.outer(t, self.inv_freq)\n        # Different from paper, but it uses a different permutation in order to obtain the same calculation\n        emb = torch.cat((freqs, freqs), dim=-1).float()\n        self.register_buffer(\"cos_cached\", emb.cos().to(dtype), persistent=False)\n        self.register_buffer(\"sin_cached\", emb.sin().to(dtype), persistent=False)\n\n    def forward(self, x, seq_len=None):\n        # x: [bs, num_attention_heads, seq_len, head_size]\n        if seq_len > self.max_seq_len_cached or self.inv_freq.dtype != torch.float32:\n            self._set_cos_sin_cache(seq_len=seq_len, device=x.device, dtype=x.dtype)\n\n        return (\n            self.cos_cached[:seq_len].to(dtype=x.dtype),\n            self.sin_cached[:seq_len].to(dtype=x.dtype),\n        )\n\n\nclass HunYuanLinearScalingRotaryEmbedding(HunYuanRotaryEmbedding):\n    \"\"\"HunYuanRotaryEmbedding extended with linear scaling. Credits to the Reddit user /u/kaiokendev\"\"\"\n\n    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None, scaling_factor=1.0):\n        self.scaling_factor = scaling_factor\n        super().__init__(dim, max_position_embeddings, base, device)\n\n    def _set_cos_sin_cache(self, seq_len, device, dtype):\n        self.max_seq_len_cached = seq_len\n        t = torch.arange(self.max_seq_len_cached, device=device, dtype=self.inv_freq.dtype)\n        t = t / self.scaling_factor\n\n        freqs = torch.outer(t, self.inv_freq)\n        # Different from paper, but it uses a different permutation in order to obtain the same calculation\n        emb = torch.cat((freqs, freqs), dim=-1)\n        self.register_buffer(\"cos_cached\", emb.cos().to(dtype), persistent=False)\n        self.register_buffer(\"sin_cached\", emb.sin().to(dtype), persistent=False)\n\n\nclass HunYuanDynamicNTKScalingRotaryEmbedding(HunYuanRotaryEmbedding):\n    \"\"\"\n    HunYuanRotaryEmbedding extended with Dynamic NTK scaling.\n    Credits to the Reddit users /u/bloc97 and /u/emozilla\n    \"\"\"\n\n    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None, scaling_factor=1.0):\n        self.scaling_factor = scaling_factor\n        super().__init__(dim, max_position_embeddings, base, device)\n\n    def _set_cos_sin_cache(self, seq_len, device, dtype):\n        self.max_seq_len_cached = seq_len\n\n        if seq_len > self.max_position_embeddings:\n            base = self.base * (\n                (self.scaling_factor * seq_len / self.max_position_embeddings) - (self.scaling_factor - 1)\n            ) ** (self.dim / (self.dim - 2))\n            inv_freq = 1.0 / (base ** (torch.arange(0, self.dim, 2).float().to(device) / self.dim))\n            self.register_buffer(\"inv_freq\", inv_freq, persistent=False)\n\n        t = torch.arange(self.max_seq_len_cached, device=device, dtype=self.inv_freq.dtype)\n\n        freqs = torch.outer(t, self.inv_freq)\n        # Different from paper, but it uses a different permutation in order to obtain the same calculation\n        emb = torch.cat((freqs, freqs), dim=-1)\n        self.register_buffer(\"cos_cached\", emb.cos().to(dtype), persistent=False)\n        self.register_buffer(\"sin_cached\", emb.sin().to(dtype), persistent=False)\n\n\nclass HunYuanDynamicNTKAlphaRotaryEmbedding(HunYuanRotaryEmbedding):\n    \"\"\"\n    HunYuanRotaryEmbedding extended with Dynamic NTK scaling.\n    Credits to the Reddit users /u/bloc97 and /u/emozilla\n    \"\"\"\n\n    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None, scaling_alpha=1.0):\n        self.scaling_alpha = scaling_alpha\n        super().__init__(dim, max_position_embeddings, base, device)\n\n    def _set_cos_sin_cache(self, seq_len, device, dtype):\n        self.max_seq_len_cached = seq_len\n        base = self.base * self.scaling_alpha ** (self.dim / (self.dim-2))\n        inv_freq = 1.0 / (base ** (torch.arange(0, self.dim, 2).float().to(device) / self.dim))\n\n        self.register_buffer(\"inv_freq\", inv_freq, persistent=False)\n\n        t = torch.arange(self.max_seq_len_cached, device=device, dtype=self.inv_freq.dtype)\n\n        freqs = torch.outer(t, self.inv_freq)\n        # Different from paper, but it uses a different permutation in order to obtain the same calculation\n        emb = torch.cat((freqs, freqs), dim=-1)\n        self.register_buffer(\"cos_cached\", emb.cos().to(dtype), persistent=False)\n        self.register_buffer(\"sin_cached\", emb.sin().to(dtype), persistent=False)\n\n\ndef rotate_half(x):\n    \"\"\"Rotates half the hidden dims of the input.\"\"\"\n    x1 = x[..., : x.shape[-1] // 2]\n    x2 = x[..., x.shape[-1] // 2:]\n    return torch.cat((-x2, x1), dim=-1)\n\n\ndef apply_rotary_pos_emb(q, k, cos, sin, position_ids, unsqueeze_dim=1):\n    \"\"\"Applies Rotary Position Embedding to the query and key tensors.\n\n    Args:\n        q (`torch.Tensor`): The query tensor.\n        k (`torch.Tensor`): The key tensor.\n        cos (`torch.Tensor`): The cosine part of the rotary embedding.\n        sin (`torch.Tensor`): The sine part of the rotary embedding.\n        position_ids (`torch.Tensor`):\n            The position indices of the tokens corresponding to the query and key tensors. For example, this can be\n            used to pass offsetted position ids when working with a KV-cache.\n        unsqueeze_dim (`int`, *optional*, defaults to 1):\n            The 'unsqueeze_dim' argument specifies the dimension along which to unsqueeze cos[position_ids] and\n            sin[position_ids] so that they can be properly broadcasted to the dimensions of q and k. For example, note\n            that cos[position_ids] and sin[position_ids] have the shape [batch_size, seq_len, head_dim]. Then, if q and\n            k have the shape [batch_size, heads, seq_len, head_dim], then setting unsqueeze_dim=1 makes\n            cos[position_ids] and sin[position_ids] broadcastable to the shapes of q and k. Similarly, if q and k have\n            the shape [batch_size, seq_len, heads, head_dim], then set unsqueeze_dim=2.\n    Returns:\n        `tuple(torch.Tensor)` comprising of the query and key tensors rotated using the Rotary Position Embedding.\n    \"\"\"\n    cos = cos[position_ids].unsqueeze(unsqueeze_dim)\n    sin = sin[position_ids].unsqueeze(unsqueeze_dim)\n    q_embed = (q * cos) + (rotate_half(q) * sin)\n    k_embed = (k * cos) + (rotate_half(k) * sin)\n    return q_embed, k_embed\n\n\nclass HunYuanMLP(nn.Module):\n    def __init__(self, config: HunYuanConfig, layer_idx=None, is_shared_mlp=False):\n        super().__init__()\n        self.config = config\n        self.layer_idx = layer_idx\n        self.hidden_size = config.hidden_size\n        if is_shared_mlp:\n            self.intermediate_size = config.intermediate_size * config.num_shared_expert[0]\n        else:\n            self.intermediate_size = config.intermediate_size\n        self.gate_proj = nn.Linear(self.hidden_size, self.intermediate_size, bias=False)\n        self.up_proj = nn.Linear(self.hidden_size, self.intermediate_size, bias=False)\n        self.down_proj = nn.Linear(self.intermediate_size, self.hidden_size, bias=False)\n        self.act_fn = ACT2FN[config.hidden_act]\n\n    def forward(self, x):\n        if self.config.pretraining_tp > 1:\n            slice = self.intermediate_size // self.config.pretraining_tp\n            gate_proj_slices = self.gate_proj.weight.split(slice, dim=0)\n            up_proj_slices = self.up_proj.weight.split(slice, dim=0)\n            down_proj_slices = self.down_proj.weight.split(slice, dim=1)\n\n            gate_proj = torch.cat(\n                [F.linear(x, gate_proj_slices[i]) for i in range(self.config.pretraining_tp)], dim=-1\n            )\n            up_proj = torch.cat([F.linear(x, up_proj_slices[i]) for i in range(self.config.pretraining_tp)], dim=-1)\n\n            intermediate_states = (self.act_fn(gate_proj) * up_proj).split(slice, dim=2)\n            down_proj = [\n                F.linear(intermediate_states[i], down_proj_slices[i]) for i in range(self.config.pretraining_tp)\n            ]\n            down_proj = sum(down_proj)\n        else:\n            down_proj = self.down_proj(self.act_fn(self.gate_proj(x)) * self.up_proj(x))\n\n        return down_proj\n\n\nclass HunYuanTopKGate(nn.Module):\n    def __init__(self, config: HunYuanConfig, layer_idx: Optional[int] = None):\n        super().__init__()\n        self.config = config\n        self.layer_idx = layer_idx\n        self.moe_topk = config.moe_topk\n        self.drop_tokens = config.moe_drop_tokens\n        self.min_capacity = 8\n        self.random_routing_dropped_token = config.moe_random_routing_dropped_token\n        self.wg = nn.Linear(config.hidden_size, config.num_experts, bias=False, dtype=torch.float32)\n\n    def forward(self, hidden_states):\n        bsz, seq_len, hidden_size = hidden_states.shape\n        hidden_states = hidden_states.reshape(-1, hidden_size)\n        if self.wg.weight.dtype == torch.float32:\n            hidden_states = hidden_states.float()\n        logits = self.wg(hidden_states)\n        if self.moe_topk == 1:\n            gate_output = top1gating(logits, random_routing_dropped_token=self.random_routing_dropped_token)\n        else:\n            gate_output = topkgating(logits, self.moe_topk[0])\n\n        return gate_output\n\n\nclass HunYuanMoE(nn.Module):\n    def __init__(self, config: HunYuanConfig, layer_idx: Optional[int] = None):\n        super().__init__()\n        self.config = config\n        self.layer_idx = layer_idx\n        self.moe_topk = config.moe_topk\n        self.num_experts = config.num_experts\n        if config.use_mixed_mlp_moe:\n            self.shared_mlp = HunYuanMLP(config, layer_idx=layer_idx, is_shared_mlp=True)\n        self.gate = HunYuanTopKGate(config, layer_idx=layer_idx)\n        self.experts = nn.ModuleList(\n            [HunYuanMLP(config, layer_idx=layer_idx, is_shared_mlp=False) for _ in range(config.num_experts)]\n        )\n\n    def forward(self, hidden_states):\n        bsz, seq_len, hidden_size = hidden_states.shape\n\n        if self.config.use_mixed_mlp_moe:\n            hidden_states_mlp = self.shared_mlp(hidden_states)\n\n        l_moe, combine_weights, dispatch_mask, exp_counts = self.gate(hidden_states)\n\n        reshaped_input = hidden_states.reshape(-1, hidden_size)\n\n        dispatched_input = torch.einsum(\"sec,sm->ecm\", dispatch_mask.type_as(hidden_states), reshaped_input)\n\n        chunks = dispatched_input.chunk(self.num_experts, dim=0)\n        expert_outputs = []\n        for chunk, expert in zip(chunks, self.experts):\n            expert_outputs.append(expert(chunk))\n\n        expert_output = torch.cat(expert_outputs, dim=0)\n        combined_output = torch.einsum(\"sec,ecm->sm\", combine_weights.type_as(hidden_states), expert_output)\n        combined_output = combined_output.reshape(bsz, seq_len, hidden_size)\n\n        if self.config.use_mixed_mlp_moe:\n            output = hidden_states_mlp + combined_output\n        else:\n            output = combined_output\n\n        return output\n\n\ndef repeat_kv(hidden_states: torch.Tensor, n_rep: int) -> torch.Tensor:\n    \"\"\"\n    This is the equivalent of torch.repeat_interleave(x, dim=1, repeats=n_rep). The hidden states go from (batch,\n    num_key_value_heads, seqlen, head_dim) to (batch, num_attention_heads, seqlen, head_dim)\n    \"\"\"\n    batch, num_key_value_heads, slen, head_dim = hidden_states.shape\n    if n_rep == 1:\n        return hidden_states\n    hidden_states = hidden_states[:, :, None, :, :].expand(batch, num_key_value_heads, n_rep, slen, head_dim)\n    return hidden_states.reshape(batch, num_key_value_heads * n_rep, slen, head_dim)\n\n\nclass HunYuanAttention(nn.Module):\n    \"\"\"Multi-headed attention from 'Attention Is All You Need' paper\"\"\"\n\n    def __init__(self, config: HunYuanConfig, layer_idx: Optional[int] = None):\n        super().__init__()\n        self.config = config\n        self.layer_idx = layer_idx\n        # layer_idx ‰ªé 0 ÂºÄÂßã\n        self.attention_type = 'cross' if config.use_cla and layer_idx % config.cla_share_factor != 0 else 'self'\n        if layer_idx is None:\n            logger.warning_once(\n                f\"Instantiating {self.__class__.__name__} without passing `layer_idx` is not recommended and will \"\n                \"to errors during the forward call, if caching is used. Please make sure to provide a `layer_idx` \"\n                \"when creating this class.\"\n            )\n\n        self.attention_dropout = config.attention_dropout\n        self.hidden_size = config.hidden_size\n        self.num_heads = config.num_attention_heads\n        self.head_dim = self.hidden_size // self.num_heads\n        self.num_key_value_heads = config.num_key_value_heads\n        self.num_key_value_groups = self.num_heads // self.num_key_value_heads\n        self.max_position_embeddings = config.max_position_embeddings\n        self.rope_theta = config.rope_theta\n        self.is_causal = True\n        self.use_qk_norm = config.use_qk_norm\n\n        if (self.head_dim * self.num_heads) != self.hidden_size:\n            raise ValueError(\n                f\"hidden_size must be divisible by num_heads (got `hidden_size`: {self.hidden_size}\"\n                f\" and `num_heads`: {self.num_heads}).\"\n            )\n\n        self.q_proj = nn.Linear(self.hidden_size, self.num_heads * self.head_dim, bias=config.attention_bias)\n        if self.attention_type == 'self':\n            self.k_proj = nn.Linear(\n                self.hidden_size, self.num_key_value_heads * self.head_dim, bias=config.attention_bias\n            )\n            self.v_proj = nn.Linear(\n                self.hidden_size, self.num_key_value_heads * self.head_dim, bias=config.attention_bias\n            )\n        self.o_proj = nn.Linear(self.num_heads * self.head_dim, self.hidden_size, bias=config.attention_bias)\n        if self.use_qk_norm:\n            self.query_layernorm = HunYuanRMSNorm(self.head_dim, eps=config.rms_norm_eps)\n            self.key_layernorm = HunYuanRMSNorm(self.head_dim, eps=config.rms_norm_eps)\n        self._init_rope()\n\n    def _init_rope(self):\n        if self.config.rope_scaling is None:\n            self.rotary_emb = HunYuanRotaryEmbedding(\n                self.head_dim,\n                max_position_embeddings=self.max_position_embeddings,\n                base=self.rope_theta,\n            )\n        else:\n            scaling_type = self.config.rope_scaling[\"type\"]\n            scaling_factor = self.config.rope_scaling[\"factor\"]\n            scaling_alpha = self.config.rope_scaling[\"alpha\"]\n            if scaling_type == \"linear\":\n                self.rotary_emb = HunYuanLinearScalingRotaryEmbedding(\n                    self.head_dim,\n                    max_position_embeddings=self.max_position_embeddings,\n                    scaling_factor=scaling_factor,\n                    base=self.rope_theta,\n                )\n            elif scaling_type == \"dynamic\":\n                if scaling_alpha:\n                    self.rotary_emb = HunYuanDynamicNTKAlphaRotaryEmbedding(\n                        self.head_dim,\n                        max_position_embeddings=self.max_position_embeddings,\n                        scaling_alpha=scaling_alpha,\n                        base=self.rope_theta,\n                    )\n                else:\n                    self.rotary_emb = HunYuanDynamicNTKScalingRotaryEmbedding(\n                        self.head_dim,\n                        max_position_embeddings=self.max_position_embeddings,\n                        scaling_factor=scaling_factor,\n                        base=self.rope_theta,\n                    )\n            else:\n                raise ValueError(f\"Unknown RoPE scaling type {scaling_type}\")\n\n    def _shape(self, tensor: torch.Tensor, seq_len: int, bsz: int):\n        return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()\n\n    def forward(\n        self,\n        hidden_states: torch.Tensor,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_value: Optional[Cache] = None,\n        output_attentions: bool = False,\n        use_cache: bool = False,\n        kv_states: torch.Tensor = None,\n        **kwargs,\n    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:\n        if \"padding_mask\" in kwargs:\n            warnings.warn(\n                \"Passing `padding_mask` is deprecated and will be removed in v4.37. Please make sure use \"\n                \"`attention_mask` instead.`\"\n            )\n\n        bsz, q_len, _ = hidden_states.size()\n\n        if self.config.pretraining_tp > 1:\n            query_slices = self.q_proj.weight.split(\n                (self.num_heads * self.head_dim) // self.config.pretraining_tp, dim=0\n            )\n            query_states = [F.linear(hidden_states, query_slices[i]) for i in range(self.config.pretraining_tp)]\n            query_states = torch.cat(query_states, dim=-1)\n\n            if self.attention_type == \"cross\" and kv_states is not None and isinstance(kv_states, tuple):\n                orig_key_states, orig_value_states = kv_states\n                key_states, value_states = kv_states\n            else:\n                key_value_slicing = (self.num_key_value_heads * self.head_dim) // self.config.pretraining_tp\n                key_slices = self.k_proj.weight.split(key_value_slicing, dim=0)\n                value_slices = self.v_proj.weight.split(key_value_slicing, dim=0)\n\n                key_states = [F.linear(hidden_states, key_slices[i]) for i in range(self.config.pretraining_tp)]\n                key_states = torch.cat(key_states, dim=-1)\n\n                value_states = [F.linear(hidden_states, value_slices[i]) for i in range(self.config.pretraining_tp)]\n                value_states = torch.cat(value_states, dim=-1)\n                orig_key_states, orig_value_states = key_states, value_states\n\n        else:\n            query_states = self.q_proj(hidden_states)\n            if self.attention_type == \"cross\" and kv_states is not None and isinstance(kv_states, tuple):\n                orig_key_states, orig_value_states = kv_states\n                key_states, value_states = kv_states\n            else:\n                key_states = self.k_proj(hidden_states)\n                value_states = self.v_proj(hidden_states)\n                orig_key_states, orig_value_states = key_states, value_states\n\n        query_states = query_states.view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)\n        key_states = key_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)\n        value_states = value_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)\n\n        kv_seq_len = key_states.shape[-2]\n        if past_key_value is not None:\n            if self.layer_idx is None:\n                raise ValueError(\n                    f\"The cache structure has changed since version v4.36. If you are using {self.__class__.__name__} \"\n                    \"for auto-regressive decoding with k/v caching, please make sure to initialize the attention class \"\n                    \"with a layer index.\"\n                )\n            kv_seq_len += past_key_value.get_usable_length(kv_seq_len, self.layer_idx)\n        cos, sin = self.rotary_emb(value_states, seq_len=kv_seq_len)\n        query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin, position_ids)\n\n        if self.use_qk_norm:\n            query_states = self.query_layernorm(query_states)\n            key_states = self.key_layernorm(key_states)\n\n        if past_key_value is not None:\n            cache_kwargs = {\"sin\": sin, \"cos\": cos}  # Specific to RoPE models\n            key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)\n\n        key_states = repeat_kv(key_states, self.num_key_value_groups)\n        value_states = repeat_kv(value_states, self.num_key_value_groups)\n\n        attn_weights = torch.matmul(query_states, key_states.transpose(2, 3)) / math.sqrt(self.head_dim)\n\n        if attn_weights.size() != (bsz, self.num_heads, q_len, kv_seq_len):\n            raise ValueError(\n                f\"Attention weights should be of size {(bsz, self.num_heads, q_len, kv_seq_len)}, but is\"\n                f\" {attn_weights.size()}\"\n            )\n\n        if attention_mask is not None:\n            if attention_mask.size() != (bsz, 1, q_len, kv_seq_len):\n                raise ValueError(\n                    f\"Attention mask should be of size {(bsz, 1, q_len, kv_seq_len)}, but is {attention_mask.size()}\"\n                )\n            attn_weights = attn_weights + attention_mask\n\n        # upcast attention to fp32\n        attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query_states.dtype)\n        attn_weights = nn.functional.dropout(attn_weights, p=self.attention_dropout, training=self.training)\n        attn_output = torch.matmul(attn_weights, value_states)\n\n        if attn_output.size() != (bsz, self.num_heads, q_len, self.head_dim):\n            raise ValueError(\n                f\"`attn_output` should be of size {(bsz, self.num_heads, q_len, self.head_dim)}, but is\"\n                f\" {attn_output.size()}\"\n            )\n\n        attn_output = attn_output.transpose(1, 2).contiguous()\n\n        attn_output = attn_output.reshape(bsz, q_len, self.hidden_size)\n\n        if self.config.pretraining_tp > 1:\n            attn_output = attn_output.split(self.hidden_size // self.config.pretraining_tp, dim=2)\n            o_proj_slices = self.o_proj.weight.split(self.hidden_size // self.config.pretraining_tp, dim=1)\n            attn_output = sum([F.linear(attn_output[i], o_proj_slices[i]) for i in range(self.config.pretraining_tp)])\n        else:\n            attn_output = self.o_proj(attn_output)\n\n        if not output_attentions:\n            attn_weights = None\n\n        return attn_output, attn_weights, past_key_value, (orig_key_states, orig_value_states)\n\n\nclass HunYuanFlashAttention2(HunYuanAttention):\n    \"\"\"\n    HunYuan flash attention module. This module inherits from `HunYuanAttention` as the weights of the module stays\n    untouched. The only required change would be on the forward pass where it needs to correctly call the public API of\n    flash attention and deal with padding tokens in case the input contains any of them.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self._flash_attn_uses_top_left_mask = not is_flash_attn_greater_or_equal_2_10()\n\n    def forward(\n        self,\n        hidden_states: torch.Tensor,\n        attention_mask: Optional[torch.LongTensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_value: Optional[Cache] = None,\n        output_attentions: bool = False,\n        use_cache: bool = False,\n        kv_states: torch.Tensor = None,\n        **kwargs,\n    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:\n        # HunYuanFlashAttention2 attention does not support output_attentions\n        if \"padding_mask\" in kwargs:\n            warnings.warn(\n                \"Passing `padding_mask` is deprecated and will be removed in v4.37. Please make sure use \"\n                \"`attention_mask` instead.`\"\n            )\n\n            # overwrite attention_mask with padding_mask\n            attention_mask = kwargs.pop(\"padding_mask\")\n\n        bsz, q_len, _ = hidden_states.size()\n\n        query_states = self.q_proj(hidden_states)\n        if self.attention_type == \"cross\" and kv_states is not None and isinstance(kv_states, tuple):\n            orig_key_states, orig_value_states = kv_states\n            key_states, value_states = kv_states\n        else:\n            key_states = self.k_proj(hidden_states)\n            value_states = self.v_proj(hidden_states)\n            orig_key_states, orig_value_states = key_states, value_states\n\n        # Flash attention requires the input to have the shape\n        # batch_size x seq_length x head_dim x hidden_dim\n        # therefore we just need to keep the original shape\n        query_states = query_states.view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)\n        key_states = key_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)\n        value_states = value_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)\n\n        kv_seq_len = key_states.shape[-2]\n        if past_key_value is not None:\n            kv_seq_len += past_key_value.get_usable_length(kv_seq_len, self.layer_idx)\n        cos, sin = self.rotary_emb(value_states, seq_len=kv_seq_len)\n        query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin, position_ids)\n\n        if self.use_qk_norm:\n            query_states = self.query_layernorm(query_states)\n            key_states = self.key_layernorm(key_states)\n\n        if past_key_value is not None:\n            cache_kwargs = {\"sin\": sin, \"cos\": cos}  # Specific to RoPE models\n            key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)\n\n        query_states = query_states.transpose(1, 2)\n        key_states = key_states.transpose(1, 2)\n        value_states = value_states.transpose(1, 2)\n\n        dropout_rate = self.attention_dropout if self.training else 0.0\n\n        # In PEFT, usually we cast the layer norms in float32 for training stability reasons\n        # therefore the input hidden states gets silently casted in float32. Hence, we need\n        # cast them back in the correct dtype just to be sure everything works as expected.\n        # This might slowdown training & inference so it is recommended to not cast the LayerNorms\n        # in fp32. (HunYuanRMSNorm handles it correctly)\n\n        input_dtype = query_states.dtype\n        if input_dtype == torch.float32:\n            # Handle the case where the model is quantized\n            if hasattr(self.config, \"_pre_quantization_dtype\"):\n                target_dtype = self.config._pre_quantization_dtype\n            else:\n                target_dtype = self.q_proj.weight.dtype\n\n            logger.warning_once(\n                f\"The input hidden states seems to be silently casted in float32, this might be related to\"\n                f\" the fact you have upcasted embedding or layer norm layers in float32. We will cast back the input in\"\n                f\" {target_dtype}.\"\n            )\n\n            query_states = query_states.to(target_dtype)\n            key_states = key_states.to(target_dtype)\n            value_states = value_states.to(target_dtype)\n\n        attn_output = self._flash_attention_forward(\n            query_states, key_states, value_states, attention_mask, q_len, dropout=dropout_rate\n        )\n\n        attn_output = attn_output.reshape(bsz, q_len, self.hidden_size).contiguous()\n        attn_output = self.o_proj(attn_output)\n\n        return attn_output, None, past_key_value, (orig_key_states, orig_value_states)\n\n    def _flash_attention_forward(\n        self, query_states, key_states, value_states, attention_mask, query_length, dropout=0.0, softmax_scale=None\n    ):\n        \"\"\"\n        Calls the forward method of Flash Attention - if the input hidden states contain at least one padding token\n        first unpad the input, then computes the attention scores and pad the final attention scores.\n\n        Args:\n            query_states (`torch.Tensor`):\n                Input query states to be passed to Flash Attention API\n            key_states (`torch.Tensor`):\n                Input key states to be passed to Flash Attention API\n            value_states (`torch.Tensor`):\n                Input value states to be passed to Flash Attention API\n            attention_mask (`torch.Tensor`):\n                The padding mask - corresponds to a tensor of size `(batch_size, seq_len)` where 0 stands for the\n                position of padding tokens and 1 for the position of non-padding tokens.\n            dropout (`int`, *optional*):\n                Attention dropout\n            softmax_scale (`float`, *optional*):\n                The scaling of QK^T before applying softmax. Default to 1 / sqrt(head_dim)\n        \"\"\"\n        if not self._flash_attn_uses_top_left_mask:\n            causal = self.is_causal\n        else:\n            causal = self.is_causal and query_length != 1\n\n        # Contains at least one padding token in the sequence\n        if attention_mask is not None:\n            batch_size = query_states.shape[0]\n            query_states, key_states, value_states, indices_q, cu_seq_lens, max_seq_lens = self._upad_input(\n                query_states, key_states, value_states, attention_mask, query_length\n            )\n\n            cu_seqlens_q, cu_seqlens_k = cu_seq_lens\n            max_seqlen_in_batch_q, max_seqlen_in_batch_k = max_seq_lens\n\n            attn_output_unpad = flash_attn_varlen_func(\n                query_states,\n                key_states,\n                value_states,\n                cu_seqlens_q=cu_seqlens_q,\n                cu_seqlens_k=cu_seqlens_k,\n                max_seqlen_q=max_seqlen_in_batch_q,\n                max_seqlen_k=max_seqlen_in_batch_k,\n                dropout_p=dropout,\n                softmax_scale=softmax_scale,\n                causal=causal,\n            )\n\n            attn_output = pad_input(attn_output_unpad, indices_q, batch_size, query_length)\n        else:\n            attn_output = flash_attn_func(\n                query_states, key_states, value_states, dropout, softmax_scale=softmax_scale, causal=causal\n            )\n\n        return attn_output\n\n    def _upad_input(self, query_layer, key_layer, value_layer, attention_mask, query_length):\n        indices_k, cu_seqlens_k, max_seqlen_in_batch_k = _get_unpad_data(attention_mask)\n        batch_size, kv_seq_len, num_key_value_heads, head_dim = key_layer.shape\n\n        key_layer = index_first_axis(\n            key_layer.reshape(batch_size * kv_seq_len, num_key_value_heads, head_dim), indices_k\n        )\n        value_layer = index_first_axis(\n            value_layer.reshape(batch_size * kv_seq_len, num_key_value_heads, head_dim), indices_k\n        )\n        if query_length == kv_seq_len:\n            query_layer = index_first_axis(\n                query_layer.reshape(batch_size * kv_seq_len, self.num_heads, head_dim), indices_k\n            )\n            cu_seqlens_q = cu_seqlens_k\n            max_seqlen_in_batch_q = max_seqlen_in_batch_k\n            indices_q = indices_k\n        elif query_length == 1:\n            max_seqlen_in_batch_q = 1\n            cu_seqlens_q = torch.arange(\n                batch_size + 1, dtype=torch.int32, device=query_layer.device\n            )  # There is a memcpy here, that is very bad.\n            indices_q = cu_seqlens_q[:-1]\n            query_layer = query_layer.squeeze(1)\n        else:\n            # The -q_len: slice assumes left padding.\n            attention_mask = attention_mask[:, -query_length:]\n            query_layer, indices_q, cu_seqlens_q, max_seqlen_in_batch_q = unpad_input(query_layer, attention_mask)\n\n        return (\n            query_layer,\n            key_layer,\n            value_layer,\n            indices_q,\n            (cu_seqlens_q, cu_seqlens_k),\n            (max_seqlen_in_batch_q, max_seqlen_in_batch_k),\n        )\n\n\nclass HunYuanSdpaAttention(HunYuanAttention):\n    \"\"\"\n    HunYuan attention module using torch.nn.functional.scaled_dot_product_attention. This module inherits from\n    `HunYuanAttention` as the weights of the module stays untouched. The only changes are on the forward pass to adapt\n    to SDPA API.\n    \"\"\"\n\n    # Adapted from HunYuanAttention.forward\n    def forward(\n        self,\n        hidden_states: torch.Tensor,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_value: Optional[Cache] = None,\n        output_attentions: bool = False,\n        use_cache: bool = False,\n        kv_states: torch.Tensor = None,\n    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:\n        if output_attentions:\n            logger.warning_once(\n                'HunYuanModel is using HunYuanSdpaAttention,'\n                'but `torch.nn.functional.scaled_dot_product_attention`'\n                'does not support `output_attentions=True`. Falling back to the manual attention implementation, '\n                'but specifying the manual implementation will be required from Transformers version v5.0.0 onwards. '\n                'This warning can be removed using the argument `attn_implementation=\"eager\"` when loading the model.'\n            )\n            return super().forward(\n                hidden_states=hidden_states,\n                attention_mask=attention_mask,\n                position_ids=position_ids,\n                past_key_value=past_key_value,\n                output_attentions=output_attentions,\n                use_cache=use_cache,\n            )\n\n        bsz, q_len, _ = hidden_states.size()\n\n        query_states = self.q_proj(hidden_states)\n        if self.attention_type == \"cross\" and kv_states is not None and isinstance(kv_states, tuple):\n            orig_key_states, orig_value_states = kv_states\n            key_states, value_states = kv_states\n        else:\n            key_states = self.k_proj(hidden_states)\n            value_states = self.v_proj(hidden_states)\n            orig_key_states, orig_value_states = key_states, value_states\n\n        query_states = query_states.view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)\n        key_states = key_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)\n        value_states = value_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)\n\n        kv_seq_len = key_states.shape[-2]\n        if past_key_value is not None:\n            kv_seq_len += past_key_value.get_usable_length(kv_seq_len, self.layer_idx)\n        cos, sin = self.rotary_emb(value_states, seq_len=kv_seq_len)\n\n        query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin, position_ids)\n\n        if self.use_qk_norm:\n            query_states = self.query_layernorm(query_states)\n            key_states = self.key_layernorm(key_states)\n\n        if past_key_value is not None:\n            cache_kwargs = {\"sin\": sin, \"cos\": cos}  # Specific to RoPE models\n            key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)\n\n        key_states = repeat_kv(key_states, self.num_key_value_groups)\n        value_states = repeat_kv(value_states, self.num_key_value_groups)\n\n        if attention_mask is not None:\n            if attention_mask.size() != (bsz, 1, q_len, kv_seq_len):\n                raise ValueError(\n                    f\"Attention mask should be of size {(bsz, 1, q_len, kv_seq_len)}, but is {attention_mask.size()}\"\n                )\n\n        # SDPA with memory-efficient backend is currently (torch==2.1.2) bugged with non-contiguous inputs with\n        # custom attn_mask,\n        # Reference: https://github.com/pytorch/pytorch/issues/112577.\n        if query_states.device.type == \"cuda\" and attention_mask is not None:\n            query_states = query_states.contiguous()\n            key_states = key_states.contiguous()\n            value_states = value_states.contiguous()\n\n        attn_output = torch.nn.functional.scaled_dot_product_attention(\n            query_states,\n            key_states,\n            value_states,\n            attn_mask=attention_mask,\n            dropout_p=self.attention_dropout if self.training else 0.0,\n            # The q_len > 1 is necessary to match with AttentionMaskConverter.to_causal_4d that does not create a\n            # causal mask in case q_len == 1.\n            is_causal=self.is_causal and attention_mask is None and q_len > 1,\n        )\n\n        attn_output = attn_output.transpose(1, 2).contiguous()\n        attn_output = attn_output.reshape(bsz, q_len, self.hidden_size)\n\n        attn_output = self.o_proj(attn_output)\n\n        return attn_output, None, past_key_value, (orig_key_states, orig_value_states)\n\n\nHUNYUAN_ATTENTION_CLASSES = {\n    \"eager\": HunYuanAttention,\n    \"flash_attention_2\": HunYuanFlashAttention2,\n    \"sdpa\": HunYuanSdpaAttention,\n}\n\n\nclass HunYuanDecoderLayer(nn.Module):\n    def __init__(self, config: HunYuanConfig, layer_idx: int):\n        super().__init__()\n        self.hidden_size = config.hidden_size\n        self.layer_idx = layer_idx\n\n        self.self_attn = HUNYUAN_ATTENTION_CLASSES[config._attn_implementation](config=config, layer_idx=layer_idx)\n\n        if config.num_experts > 1:\n            self.mlp = HunYuanMoE(config, layer_idx=layer_idx)\n        else:\n            self.mlp = HunYuanMLP(config, layer_idx=layer_idx, is_shared_mlp=False)\n        self.input_layernorm = HunYuanRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n        self.post_attention_layernorm = HunYuanRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n\n    def forward(\n        self,\n        hidden_states: torch.Tensor,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_value: Optional[Tuple[torch.Tensor]] = None,\n        output_attentions: Optional[bool] = False,\n        use_cache: Optional[bool] = False,\n        kv_states: Optional[Tuple[torch.Tensor]] = None,\n        **kwargs,\n    ) -> Tuple[torch.FloatTensor, Optional[Tuple[torch.FloatTensor, torch.FloatTensor]]]:\n        \"\"\"\n        Args:\n            hidden_states (`torch.FloatTensor`): input to the layer of shape `(batch, seq_len, embed_dim)`\n            attention_mask (`torch.FloatTensor`, *optional*):\n                attention mask of size `(batch_size, sequence_length)` if flash attention is used or `(batch_size, 1,\n                query_sequence_length, key_sequence_length)` if default attention is used.\n            output_attentions (`bool`, *optional*):\n                Whether or not to return the attentions tensors of all attention layers. See `attentions` under\n                returned tensors for more detail.\n            use_cache (`bool`, *optional*):\n                If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding\n                (see `past_key_values`).\n            past_key_value (`Tuple(torch.FloatTensor)`, *optional*): cached past key and value projection states\n            kv_states (`Tuple(torch.FloatTensor)`, *optional*): Used when CLA is enabled,\n                key and value states from past attention blocks\n        \"\"\"\n        if \"padding_mask\" in kwargs:\n            warnings.warn(\n                \"Passing `padding_mask` is deprecated and will be removed in v4.37. Please make sure use \"\n                \"`attention_mask` instead.`\"\n            )\n\n        residual = hidden_states\n\n        hidden_states = self.input_layernorm(hidden_states)\n\n        # Self Attention\n        hidden_states, self_attn_weights, present_key_value, kv_states = self.self_attn(\n            hidden_states=hidden_states,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            past_key_value=past_key_value,\n            output_attentions=output_attentions,\n            use_cache=use_cache,\n            kv_states=kv_states,\n            **kwargs,\n        )\n        hidden_states = residual + hidden_states\n\n        # Fully Connected\n        residual = hidden_states\n        hidden_states = self.post_attention_layernorm(hidden_states)\n        hidden_states = self.mlp(hidden_states)\n        hidden_states = residual + hidden_states\n\n        outputs = (hidden_states,)\n\n        if output_attentions:\n            outputs += (self_attn_weights,)\n\n        if use_cache:\n            outputs += (present_key_value,)\n\n        outputs += (kv_states,)\n\n        return outputs\n\n\nHUNYUAN_START_DOCSTRING = r\"\"\"\n    This model inherits from [`PreTrainedModel`]. Check the superclass documentation for the generic methods the\n    library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads\n    etc.)\n\n    This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module) subclass.\n    Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage\n    and behavior.\n\n    Parameters:\n        config ([`HunYuanConfig`]):\n            Model configuration class with all the parameters of the model. Initializing with a config file does not\n            load the weights associated with the model, only the configuration. Check out the\n            [`~PreTrainedModel.from_pretrained`] method to load the model weights.\n\"\"\"\n\n\n@add_start_docstrings(\n    \"The bare HunYuan Model outputting raw hidden-states without any specific head on top.\",\n    HUNYUAN_START_DOCSTRING,\n)\nclass HunYuanPreTrainedModel(PreTrainedModel):\n    config_class = HunYuanConfig\n    base_model_prefix = \"model\"\n    supports_gradient_checkpointing = True\n    _no_split_modules = [\"HunYuanDecoderLayer\"]\n    _skip_keys_device_placement = \"past_key_values\"\n    _supports_flash_attn_2 = True\n    _supports_sdpa = True\n    _supports_cache_class = True\n\n    def _init_weights(self, module):\n        std = self.config.initializer_range\n        if isinstance(module, nn.Linear):\n            module.weight.data.normal_(mean=0.0, std=std)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=std)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n\n\nHUNYUAN_INPUTS_DOCSTRING = r\"\"\"\n    Args:\n        input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):\n            Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide\n            it.\n\n            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and\n            [`PreTrainedTokenizer.__call__`] for details.\n\n            [What are input IDs?](../glossary#input-ids)\n        attention_mask (`torch.Tensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on padding token indices. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n\n            [What are attention masks?](../glossary#attention-mask)\n\n            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and\n            [`PreTrainedTokenizer.__call__`] for details.\n\n            If `past_key_values` is used, optionally only the last `input_ids` have to be input (see\n            `past_key_values`).\n\n            If you want to change padding behavior, you should read [`modeling_opt._prepare_decoder_attention_mask`]\n            and modify to your needs. See diagram 1 in [the paper](https://arxiv.org/abs/1910.13461) for more\n            information on the default strategy.\n\n            - 1 indicates the head is **not masked**,\n            - 0 indicates the head is **masked**.\n        position_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Indices of positions of each input sequence tokens in the position embeddings. Selected in the range `[0,\n            config.n_positions - 1]`.\n\n            [What are position IDs?](../glossary#position-ids)\n        past_key_values (`Cache` or `tuple(tuple(torch.FloatTensor))`, *optional*):\n            Pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention\n            blocks) that can be used to speed up sequential decoding. This typically consists in the `past_key_values`\n            returned by the model at a previous stage of decoding, when `use_cache=True` or `config.use_cache=True`.\n\n            Two formats are allowed:\n            - a [`~cache_utils.Cache`] instance;\n            - Tuple of `tuple(torch.FloatTensor)` of length `config.n_layers`, with each tuple having 2 tensors of\n            shape `(batch_size, num_heads, sequence_length, embed_size_per_head)`). This is also known as the legacy\n            cache format.\n\n            The model will output the same cache format that is fed as input. If no `past_key_values` are passed, the\n            legacy cache format will be returned.\n\n            If `past_key_values` are used, the user can optionally input only the last `input_ids` (those that don't\n            have their past key value states given to this model) of shape `(batch_size, 1)` instead of all `input_ids`\n            of shape `(batch_size, sequence_length)`.\n        inputs_embeds (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Optionally, instead of passing `input_ids` you can choose to directly pass an embedded representation. This\n            is useful if you want more control over how to convert `input_ids` indices into associated vectors than the\n            model's internal embedding lookup matrix.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        output_attentions (`bool`, *optional*):\n            Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned\n            tensors for more detail.\n        output_hidden_states (`bool`, *optional*):\n            Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for\n            more detail.\n        return_dict (`bool`, *optional*):\n            Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n\"\"\"\n\n\n@add_start_docstrings(\n    \"The bare HunYuan Model outputting raw hidden-states without any specific head on top.\",\n    HUNYUAN_START_DOCSTRING,\n)\nclass HunYuanModel(HunYuanPreTrainedModel):\n    \"\"\"\n    Transformer decoder consisting of *config.num_hidden_layers* layers. Each layer is a [`HunYuanDecoderLayer`]\n\n    Args:\n        config: HunYuanConfig\n    \"\"\"\n\n    def __init__(self, config: HunYuanConfig):\n        super().__init__(config)\n        self.padding_idx = config.pad_token_id\n        self.vocab_size = config.vocab_size\n\n        self.embed_tokens = nn.Embedding(config.vocab_size, config.hidden_size, self.padding_idx)\n        self.layers = nn.ModuleList(\n            [HunYuanDecoderLayer(config, layer_idx) for layer_idx in range(config.num_hidden_layers)]\n        )\n        self._use_sdpa = config._attn_implementation == \"sdpa\"\n        self._use_flash_attention_2 = config._attn_implementation == \"flash_attention_2\"\n        self.norm = HunYuanRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n\n        self.cla = config.use_cla\n        self.cla_share_factor = config.cla_share_factor\n\n        self.gradient_checkpointing = False\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embed_tokens\n\n    def set_input_embeddings(self, value):\n        self.embed_tokens = value\n\n    @add_start_docstrings_to_model_forward(HUNYUAN_INPUTS_DOCSTRING)\n    def forward(\n        self,\n        input_ids: torch.LongTensor = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_values: Optional[List[torch.FloatTensor]] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple, BaseModelOutputWithPast]:\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        # retrieve input_ids and inputs_embeds\n        if input_ids is not None and inputs_embeds is not None:\n            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        elif input_ids is not None:\n            batch_size, seq_length = input_ids.shape[:2]\n        elif inputs_embeds is not None:\n            batch_size, seq_length = inputs_embeds.shape[:2]\n        else:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        if self.gradient_checkpointing and self.training:\n            if use_cache:\n                logger.warning_once(\n                    \"`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`...\"\n                )\n                use_cache = False\n\n        past_key_values_length = 0\n        if use_cache:\n            use_legacy_cache = not isinstance(past_key_values, Cache)\n            if use_legacy_cache:\n                past_key_values = DynamicCache.from_legacy_cache(past_key_values)\n            past_key_values_length = past_key_values.get_usable_length(seq_length)\n\n        if position_ids is None:\n            device = input_ids.device if input_ids is not None else inputs_embeds.device\n            position_ids = torch.arange(\n                past_key_values_length, seq_length + past_key_values_length, dtype=torch.long, device=device\n            )\n            position_ids = position_ids.unsqueeze(0)\n\n        if inputs_embeds is None:\n            inputs_embeds = self.embed_tokens(input_ids)\n        \n        # Fix lora with gradient checkpointing training\n        if self.training and inputs_embeds.is_leaf:\n            inputs_embeds.requires_grad = True\n\n        if self._use_flash_attention_2:\n            # 2d mask is passed through the layers\n            attention_mask = attention_mask if (attention_mask is not None and 0 in attention_mask) else None\n        elif self._use_sdpa and not output_attentions:\n            # output_attentions=True can not be supported when using SDPA, and we fall back on\n            # the manual implementation that requires a 4D causal mask in all cases.\n            attention_mask = _prepare_4d_causal_attention_mask_for_sdpa(\n                attention_mask,\n                (batch_size, seq_length),\n                inputs_embeds,\n                past_key_values_length,\n            )\n        else:\n            # 4d mask is passed through the layers\n            attention_mask = _prepare_4d_causal_attention_mask(\n                attention_mask, (batch_size, seq_length), inputs_embeds, past_key_values_length\n            )\n\n        # embed positions\n        hidden_states = inputs_embeds\n\n        # decoder layers\n        all_hidden_states = () if output_hidden_states else None\n        all_self_attns = () if output_attentions else None\n        next_decoder_cache = None\n\n        prev_kv_states = None\n        for layer_idx, decoder_layer in enumerate(self.layers):\n            if output_hidden_states:\n                all_hidden_states += (hidden_states,)\n\n            if self.gradient_checkpointing and self.training:\n                layer_outputs = self._gradient_checkpointing_func(\n                    decoder_layer.__call__,\n                    hidden_states,\n                    attention_mask,\n                    position_ids,\n                    past_key_values,\n                    output_attentions,\n                    use_cache,\n                    prev_kv_states,\n                )\n            else:\n                layer_outputs = decoder_layer(\n                    hidden_states,\n                    attention_mask=attention_mask,\n                    position_ids=position_ids,\n                    past_key_value=past_key_values,\n                    output_attentions=output_attentions,\n                    use_cache=use_cache,\n                    kv_states=prev_kv_states\n                )\n\n            hidden_states = layer_outputs[0]\n\n            if use_cache:\n                next_decoder_cache = layer_outputs[2 if output_attentions else 1]\n\n            if output_attentions:\n                all_self_attns += (layer_outputs[1],)\n\n            kv_states = layer_outputs[-1]\n\n            if self.cla and layer_idx % self.cla_share_factor == 0:\n                prev_kv_states = kv_states\n\n        hidden_states = self.norm(hidden_states)\n\n        # add hidden states from the last decoder layer\n        if output_hidden_states:\n            all_hidden_states += (hidden_states,)\n\n        next_cache = None\n        if use_cache:\n            next_cache = next_decoder_cache.to_legacy_cache() if use_legacy_cache else next_decoder_cache\n        if not return_dict:\n            return tuple(v for v in [hidden_states, next_cache, all_hidden_states, all_self_attns] if v is not None)\n        return BaseModelOutputWithPast(\n            last_hidden_state=hidden_states,\n            past_key_values=next_cache,\n            hidden_states=all_hidden_states,\n            attentions=all_self_attns,\n        )\n\n\nclass HunYuanMoEV1ForCausalLM(HunYuanPreTrainedModel):\n    _tied_weights_keys = [\"lm_head.weight\"]\n\n    def __init__(self, config: HunYuanConfig):\n        super().__init__(config)\n        self.model = HunYuanModel(config)\n        self.vocab_size = config.vocab_size\n        self.lm_head = nn.Linear(config.hidden_size, config.vocab_size, bias=False)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.model.embed_tokens\n\n    def set_input_embeddings(self, value):\n        self.model.embed_tokens = value\n\n    def get_output_embeddings(self):\n        return self.lm_head\n\n    def set_output_embeddings(self, new_embeddings):\n        self.lm_head = new_embeddings\n\n    def set_decoder(self, decoder):\n        self.model = decoder\n\n    def get_decoder(self):\n        return self.model\n\n    @add_start_docstrings_to_model_forward(HUNYUAN_INPUTS_DOCSTRING)\n    @replace_return_docstrings(output_type=CausalLMOutputWithPast, config_class=_CONFIG_FOR_DOC)\n    def forward(\n        self,\n        input_ids: torch.LongTensor = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_values: Optional[List[torch.FloatTensor]] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n        labels: Optional[torch.LongTensor] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple, CausalLMOutputWithPast]:\n        r\"\"\"\n        Args:\n            labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n                Labels for computing the masked language modeling loss. Indices should either be in `[0, ...,\n                config.vocab_size]` or -100 (see `input_ids` docstring). Tokens with indices set to `-100` are ignored\n                (masked), the loss is only computed for the tokens with labels in `[0, ..., config.vocab_size]`.\n\n        Returns:\n\n        Example:\n\n        ```python\n        >>> from transformers import AutoTokenizer, AutoModelForCausalLM\n\n        >>> model = AutoModelForCausalLM.from_pretrained(PATH_TO_CONVERTED_WEIGHTS)\n        >>> tokenizer = AutoTokenizer.from_pretrained(PATH_TO_CONVERTED_TOKENIZER)\n\n        >>> prompt = \"Hey, are you conscious? Can you talk to me?\"\n        >>> inputs = tokenizer(prompt, return_tensors=\"pt\")\n\n        >>> # Generate\n        >>> generate_ids = model.generate(inputs.input_ids, max_length=30)\n        >>> tokenizer.batch_decode(generate_ids, skip_special_tokens=True, clean_up_tokenization_spaces=False)[0]\n        \"Hey, are you conscious? Can you talk to me?\\nI'm not conscious, but I can talk to you.\"\n        ```\"\"\"\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        # decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)\n        outputs = self.model(\n            input_ids=input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            past_key_values=past_key_values,\n            inputs_embeds=inputs_embeds,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        hidden_states = outputs[0]\n        if self.config.pretraining_tp > 1:\n            lm_head_slices = self.lm_head.weight.split(self.vocab_size // self.config.pretraining_tp, dim=0)\n            logits = [F.linear(hidden_states, lm_head_slices[i]) for i in range(self.config.pretraining_tp)]\n            logits = torch.cat(logits, dim=-1)\n        else:\n            logits = self.lm_head(hidden_states)\n        logits = logits.float()\n\n        loss = None\n        if labels is not None:\n            # Shift so that tokens < n predict n\n            shift_logits = logits[..., :-1, :].contiguous()\n            shift_labels = labels[..., 1:].contiguous()\n            # Flatten the tokens\n            loss_fct = CrossEntropyLoss()\n            shift_logits = shift_logits.view(-1, self.config.vocab_size)\n            shift_labels = shift_labels.view(-1)\n            # Enable model parallelism\n            shift_labels = shift_labels.to(shift_logits.device)\n            loss = loss_fct(shift_logits, shift_labels)\n\n        if not return_dict:\n            output = (logits,) + outputs[1:]\n            return (loss,) + output if loss is not None else output\n\n        return CausalLMOutputWithPast(\n            loss=loss,\n            logits=logits,\n            past_key_values=outputs.past_key_values,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n\n    def prepare_inputs_for_generation(\n        self, input_ids, past_key_values=None, attention_mask=None, inputs_embeds=None, **kwargs\n    ):\n        if past_key_values is not None:\n            if isinstance(past_key_values, Cache):\n                cache_length = past_key_values.get_seq_length()\n                past_length = past_key_values.seen_tokens\n                max_cache_length = past_key_values.get_max_cache_shape()\n            else:\n                cache_length = past_length = past_key_values[0][0].shape[2]\n                max_cache_length = None\n\n            # Keep only the unprocessed tokens:\n            # 1 - If the length of the attention_mask exceeds the length of input_ids, then we are in a setting where\n            # some of the inputs are exclusivelly passed as part of the cache (e.g. when passing input_embeds as\n            # input)\n            if attention_mask is not None and attention_mask.shape[1] > input_ids.shape[1]:\n                input_ids = input_ids[:, -(attention_mask.shape[1] - past_length):]\n            # 2 - If the past_length is smaller than input_ids', then input_ids holds all input tokens. We can discard\n            # input_ids based on the past_length.\n            elif past_length < input_ids.shape[1]:\n                input_ids = input_ids[:, past_length:]\n            # 3 - Otherwise (past_length >= input_ids.shape[1]), let's assume input_ids only has unprocessed tokens.\n\n            # If we are about to go beyond the maximum cache length, we need to crop the input attention mask.\n            if (\n                max_cache_length is not None\n                and attention_mask is not None\n                and cache_length + input_ids.shape[1] > max_cache_length\n            ):\n                attention_mask = attention_mask[:, -max_cache_length:]\n\n        position_ids = kwargs.get(\"position_ids\", None)\n        if attention_mask is not None and position_ids is None:\n            # create position_ids on the fly for batch generation\n            position_ids = attention_mask.long().cumsum(-1) - 1\n            position_ids.masked_fill_(attention_mask == 0, 1)\n            if past_key_values:\n                position_ids = position_ids[:, -input_ids.shape[1]:]\n\n        # if `inputs_embeds` are passed, we only want to use them in the 1st generation step\n        if inputs_embeds is not None and past_key_values is None:\n            model_inputs = {\"inputs_embeds\": inputs_embeds}\n        else:\n            model_inputs = {\"input_ids\": input_ids}\n\n        model_inputs.update(\n            {\n                \"position_ids\": position_ids,\n                \"past_key_values\": past_key_values,\n                \"use_cache\": kwargs.get(\"use_cache\"),\n                \"attention_mask\": attention_mask,\n            }\n        )\n        return model_inputs\n\n    @staticmethod\n    def _reorder_cache(past_key_values, beam_idx):\n        reordered_past = ()\n        for layer_past in past_key_values:\n            reordered_past += (\n                tuple(past_state.index_select(0, beam_idx.to(past_state.device)) for past_state in layer_past),\n            )\n        return reordered_past\n\n\n@add_start_docstrings(\n    \"\"\"\n    The HunYuan Model transformer with a sequence classification head on top (linear layer).\n\n    [`HunYuanForSequenceClassification`] uses the last token in order to do the classification, as other causal models\n    (e.g. GPT-2) do.\n\n    Since it does classification on the last token, it requires to know the position of the last token. If a\n    `pad_token_id` is defined in the configuration, it finds the last token that is not a padding token in each row. If\n    no `pad_token_id` is defined, it simply takes the last value in each row of the batch. Since it cannot guess the\n    padding tokens when `inputs_embeds` are passed instead of `input_ids`, it does the same (take the last value in\n    each row of the batch).\n    \"\"\",\n    HUNYUAN_START_DOCSTRING,\n)\nclass HunYuanForSequenceClassification(HunYuanPreTrainedModel):\n    def __init__(self, config):\n        super().__init__(config)\n        self.num_labels = config.num_labels\n        self.model = HunYuanModel(config)\n        self.score = nn.Linear(config.hidden_size, self.num_labels, bias=False)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.model.embed_tokens\n\n    def set_input_embeddings(self, value):\n        self.model.embed_tokens = value\n\n    @add_start_docstrings_to_model_forward(HUNYUAN_INPUTS_DOCSTRING)\n    def forward(\n        self,\n        input_ids: torch.LongTensor = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_values: Optional[List[torch.FloatTensor]] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n        labels: Optional[torch.LongTensor] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple, SequenceClassifierOutputWithPast]:\n        r\"\"\"\n        labels (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n            Labels for computing the sequence classification/regression loss. Indices should be in `[0, ...,\n            config.num_labels - 1]`. If `config.num_labels == 1` a regression loss is computed (Mean-Square loss), If\n            `config.num_labels > 1` a classification loss is computed (Cross-Entropy).\n        \"\"\"\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        transformer_outputs = self.model(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            past_key_values=past_key_values,\n            inputs_embeds=inputs_embeds,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        hidden_states = transformer_outputs[0]\n        logits = self.score(hidden_states)\n\n        if input_ids is not None:\n            batch_size = input_ids.shape[0]\n        else:\n            batch_size = inputs_embeds.shape[0]\n\n        if self.config.pad_token_id is None and batch_size != 1:\n            raise ValueError(\"Cannot handle batch sizes > 1 if no padding token is defined.\")\n        if self.config.pad_token_id is None:\n            sequence_lengths = -1\n        else:\n            if input_ids is not None:\n                sequence_lengths = (torch.eq(input_ids, self.config.pad_token_id).int().argmax(-1) - 1).to(\n                    logits.device\n                )\n            else:\n                sequence_lengths = -1\n\n        pooled_logits = logits[torch.arange(batch_size, device=logits.device), sequence_lengths]\n\n        loss = None\n        if labels is not None:\n            labels = labels.to(logits.device)\n            if self.config.problem_type is None:\n                if self.num_labels == 1:\n                    self.config.problem_type = \"regression\"\n                elif self.num_labels > 1 and (labels.dtype == torch.long or labels.dtype == torch.int):\n                    self.config.problem_type = \"single_label_classification\"\n                else:\n                    self.config.problem_type = \"multi_label_classification\"\n\n            if self.config.problem_type == \"regression\":\n                loss_fct = MSELoss()\n                if self.num_labels == 1:\n                    loss = loss_fct(pooled_logits.squeeze(), labels.squeeze())\n                else:\n                    loss = loss_fct(pooled_logits, labels)\n            elif self.config.problem_type == \"single_label_classification\":\n                loss_fct = CrossEntropyLoss()\n                loss = loss_fct(pooled_logits.view(-1, self.num_labels), labels.view(-1))\n            elif self.config.problem_type == \"multi_label_classification\":\n                loss_fct = BCEWithLogitsLoss()\n                loss = loss_fct(pooled_logits, labels)\n        if not return_dict:\n            output = (pooled_logits,) + transformer_outputs[1:]\n            return ((loss,) + output) if loss is not None else output\n\n        return SequenceClassifierOutputWithPast(\n            loss=loss,\n            logits=pooled_logits,\n            past_key_values=transformer_outputs.past_key_values,\n            hidden_states=transformer_outputs.hidden_states,\n            attentions=transformer_outputs.attentions,\n        )\n",
        "tokenization_hy.py": "import base64\nimport logging\nimport os\nimport unicodedata\nfrom typing import Collection, Dict, List, Set, Tuple, Union\n\nimport tiktoken\nfrom transformers import PreTrainedTokenizer, AddedToken\n\nlogger = logging.getLogger(__name__)\n\n\nVOCAB_FILES_NAMES = {\"vocab_file\": \"hy.tiktoken\"}\n\nPAT_STR = r\"\"\"(?i:'s|'t|'re|'ve|'m|'ll|'d)|[^\\r\\n\\p{L}\\p{N}]?\\p{L}+|\\p{N}| ?[^\\s\\p{L}\\p{N}]+[\\r\\n]*|\\s*[\\r\\n]+|\\s+(?!\\S)|\\s+\"\"\"\n# PAT_STR = r\"\"\"(?i:'s|'t|'re|'ve|'m|'ll|'d)|[^\\r\\n\\p{L}\\p{N}]?\\p{L}+|\\p{N}{1,3}| ?[^\\s\\p{L}\\p{N}]+[\\r\\n]*|\\s*[\\r\\n]+|\\s+(?!\\S)|\\s+\"\"\"\nENDOFTEXT = \"<|endoftext|>\"\nSTARTOFTEXT = \"<|startoftext|>\"\nBOSTOKEN = \"<|bos|>\"\nEOSTOKEN = \"<|eos|>\"\nPADTOKEN = \"<|pad|>\"\n\n# as the default behavior is changed to allow special tokens in\n# regular texts, the surface forms of special tokens need to be\n# as different as possible to minimize the impact\nEXTRAS = tuple((f\"<|extra_{i}|>\" for i in range(205)))\n# changed to use actual index to avoid misconfiguration with vocabulary expansion\n\n\nSPECIAL_START_ID = 127957\n\ndef _load_tiktoken_bpe(tiktoken_bpe_file: str) -> Dict[bytes, int]:\n    # with open(tiktoken_bpe_file, \"rb\", encoding=\"utf-8\") as f:\n    #     contents = f.read()\n    dic = {}\n    rank = 0\n    for line in open(tiktoken_bpe_file, \"rb\"):\n        if line:\n            token, _ = line.split()\n            if base64.b64decode(token) in dic:\n                continue\n            dic[base64.b64decode(token)] = int(rank)\n            rank += 1\n    global SPECIAL_START_ID\n    SPECIAL_START_ID=rank\n    return dic\n\n# NOTE: Please use the code line to check `SPECIAL_START_ID` right, this will affect the SPECIAL_START_ID\n# _load_tiktoken_bpe('/apdcephfs/share_1502809/shaneshu/tokenizer_exp/other_tokenizer_vocab/hy/' + VOCAB_FILES_NAMES['vocab_file'])\n# print(SPECIAL_START_ID)\n\nSPECIAL_TOKENS = tuple(\n    enumerate(\n        (\n            (\n                ENDOFTEXT,\n                STARTOFTEXT,\n                BOSTOKEN,\n                EOSTOKEN,\n                PADTOKEN,\n            )\n            + EXTRAS\n        ),\n        start=SPECIAL_START_ID,\n    )\n)\n# NOTE: Unused Token ID starts from 127962\nSPECIAL_TOKENS_SET = set(t for i, t in SPECIAL_TOKENS)\n\nclass HYTokenizer(PreTrainedTokenizer):\n    \"\"\"hunyuan tokenizer.\"\"\"\n\n    vocab_files_names = VOCAB_FILES_NAMES\n\n    def __init__(\n        self,\n        vocab_file,\n        errors=\"replace\",\n        extra_vocab_file=None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        # how to handle errors in decoding UTF-8 byte sequences\n        # use ignore if you are in streaming inference\n        self.errors = errors  \n\n        self.mergeable_ranks = _load_tiktoken_bpe(vocab_file)  # type: Dict[bytes, int]\n        self.special_tokens = {\n            token: index\n            for index, token in SPECIAL_TOKENS\n        }\n\n        # try load extra vocab from file\n        if extra_vocab_file is not None:\n            used_ids = set(self.mergeable_ranks.values()) | set(self.special_tokens.values())\n            extra_mergeable_ranks = _load_tiktoken_bpe(extra_vocab_file)\n            for token, index in extra_mergeable_ranks.items():\n                if token in self.mergeable_ranks:\n                    logger.info(f\"extra token {token} exists, skipping\")\n                    continue\n                if index in used_ids:\n                    logger.info(f'the index {index} for extra token {token} exists, skipping')\n                    continue\n                self.mergeable_ranks[token] = index\n            # the index may be sparse after this, but don't worry tiktoken.Encoding will handle this\n\n        enc = tiktoken.Encoding(\n            \"HunYuan\",\n            pat_str=PAT_STR,\n            mergeable_ranks=self.mergeable_ranks,\n            special_tokens=self.special_tokens,\n        )\n        assert (\n            len(self.mergeable_ranks) + len(self.special_tokens) == enc.n_vocab\n        ), f\"{len(self.mergeable_ranks)} + {len(self.special_tokens)} != {enc.n_vocab} in encoding\"\n\n        self.decoder = {\n            v: k for k, v in self.mergeable_ranks.items()\n        }  # type: dict[int, bytes|str]\n        self.decoder.update({v: k for k, v in self.special_tokens.items()})\n\n        self.tokenizer = enc  # type: tiktoken.Encoding\n\n        self.eod_id = self.tokenizer.eot_token\n        self.bod_id = self.special_tokens[STARTOFTEXT]\n        self.bos_id = self.special_tokens[BOSTOKEN]\n        self.eos_id = self.special_tokens[EOSTOKEN]\n        self.pad_id = self.special_tokens[PADTOKEN]\n\n    def __getstate__(self):\n        # for pickle lovers\n        state = self.__dict__.copy()\n        del state[\"tokenizer\"]\n        return state\n\n    def __setstate__(self, state):\n        # tokenizer is not python native; don't pass it; rebuild it\n        self.__dict__.update(state)\n        enc = tiktoken.Encoding(\n            \"HunYuan\",\n            pat_str=PAT_STR,\n            mergeable_ranks=self.mergeable_ranks,\n            special_tokens=self.special_tokens,\n        )\n        self.tokenizer = enc\n\n    def __len__(self) -> int:\n        return self.tokenizer.n_vocab\n\n    def get_vocab(self) -> Dict[bytes, int]:\n        return self.mergeable_ranks\n\n    def convert_tokens_to_ids(\n        self, tokens: Union[bytes, str, List[Union[bytes, str]]]\n    ) -> List[int]:\n        ids = []\n        if isinstance(tokens, (str, bytes)):\n            if tokens in self.special_tokens:\n                return self.special_tokens[tokens]\n            else:\n                return self.mergeable_ranks.get(tokens)\n        for token in tokens:\n            if token in self.special_tokens:\n                ids.append(self.special_tokens[token])\n            else:\n                ids.append(self.mergeable_ranks.get(token))\n        return ids\n\n    def _add_tokens(\n        self,\n        new_tokens: Union[List[str], List[AddedToken]],\n        special_tokens: bool = False,\n    ) -> int:\n        if not special_tokens and new_tokens:\n            raise ValueError(\"Adding regular tokens is not supported\")\n        for token in new_tokens:\n            surface_form = token.content if isinstance(token, AddedToken) else token\n            if surface_form not in SPECIAL_TOKENS_SET:\n                raise ValueError(\"Adding unknown special tokens is not supported\")\n        return 0\n\n    def save_vocabulary(self, save_directory: str, **kwargs) -> Tuple[str]:\n        \"\"\"\n        Save only the vocabulary of the tokenizer (vocabulary).\n        Returns:\n            `Tuple(str)`: Paths to the files saved.\n        \"\"\"\n        file_path = os.path.join(save_directory, \"hunyuan.tiktoken\")\n        with open(file_path, \"w\", encoding=\"utf-8\") as w:\n            for k, v in self.mergeable_ranks.items():\n                line = base64.b64encode(k).decode(\"utf-8\") + \" \" + str(v) + \"\\n\"\n                w.write(line)\n        return (file_path,)\n\n    def tokenize(\n        self,\n        text: str,\n        allowed_special: Union[Set, str] = \"all\",\n        disallowed_special: Union[Collection, str] = (),\n        **kwargs,\n    ) -> List[Union[bytes, str]]:\n        \"\"\"\n        Converts a string in a sequence of tokens.\n        Args:\n            text (`str`):\n                The sequence to be encoded.\n            allowed_special (`Literal[\"all\"]` or `set`):\n                The surface forms of the tokens to be encoded as special tokens in regular texts.\n                Default to \"all\".\n            disallowed_special (`Literal[\"all\"]` or `Collection`):\n                The surface forms of the tokens that should not be in regular texts and trigger errors.\n                Default to an empty tuple.\n            kwargs (additional keyword arguments, *optional*):\n                Will be passed to the underlying model specific encode method.\n        Returns:\n            `List[bytes|str]`: The list of tokens.\n        \"\"\"\n        tokens = []\n        text = unicodedata.normalize(\"NFC\", text)\n\n        # this implementation takes a detour: text -> token id -> token surface forms\n        for t in self.tokenizer.encode(\n            text, allowed_special=allowed_special, disallowed_special=disallowed_special\n        ):\n            tokens.append(self.decoder[t])\n        return tokens\n\n    def convert_tokens_to_string(self, tokens: List[Union[bytes, str]]) -> str:\n        \"\"\"\n        Converts a sequence of tokens in a single string.\n        \"\"\"\n        text = \"\"\n        temp = b\"\"\n        for t in tokens:\n            if isinstance(t, str):\n                if temp:\n                    text += temp.decode(\"utf-8\", errors=self.errors)\n                    temp = b\"\"\n                text += t\n            elif isinstance(t, bytes):\n                temp += t\n            else:\n                raise TypeError(\"token should only be of type types or str\")\n        if temp:\n            text += temp.decode(\"utf-8\", errors=self.errors)\n        return text\n\n    @property\n    def vocab_size(self):\n        return self.tokenizer.n_vocab\n\n    def _convert_id_to_token(self, index: int) -> Union[bytes, str]:\n        \"\"\"Converts an id to a token, special tokens included\"\"\"\n        if index in self.decoder:\n            return self.decoder[index]\n        raise ValueError(\"unknown ids\")\n\n    def _convert_token_to_id(self, token: Union[bytes, str]) -> int:\n        \"\"\"Converts a token to an id using the vocab, special tokens included\"\"\"\n        if token in self.special_tokens:\n            return self.special_tokens[token]\n        if token in self.mergeable_ranks:\n            return self.mergeable_ranks[token]\n        raise ValueError(\"unknown token\")\n\n    def _tokenize(self, text: str, **kwargs):\n        \"\"\"\n        Converts a string in a sequence of tokens (string), using the tokenizer. Split in words for word-based\n        vocabulary or sub-words for sub-word-based vocabularies (BPE/SentencePieces/WordPieces).\n        Do NOT take care of added tokens.\n        \"\"\"\n        raise NotImplementedError\n\n    def _decode(\n        self,\n        token_ids: Union[int, List[int]],\n        skip_special_tokens: bool = False,\n        errors: str = None,\n        **kwargs,\n    ) -> str:\n        if isinstance(token_ids, int):\n            token_ids = [token_ids]\n        if skip_special_tokens:\n            token_ids = [i for i in token_ids if i < self.eod_id]\n        return self.tokenizer.decode(token_ids, errors=errors or self.errors)\n\n# tests\nif __name__ == \"__main__\":\n    tokenizer = HYTokenizer.from_pretrained('./other_tokenizer_vocab/hy')\n    text = '‰Ω†Â•ΩÔºå‰∏ñÁïå'\n    tokens = tokenizer.tokenize(text)\n    print(tokens)\n    ids = tokenizer.convert_tokens_to_ids(tokens)\n    print(ids)\n    text2 = tokenizer.convert_tokens_to_string(tokens)\n    print(text2)\n    ids2 = tokenizer.convert_tokens_to_ids(tokens)\n"
    }
}