{
  "repo": "google/gemma_pytorch",
  "full_texts": [
    {
      "arxiv_id": "https://huggingface.co/collections/google/codegemma-release-66152ac7b683e2667abdee11",
      "full_text": " CodeGemma Release - a google Collection Hugging Face Models Datasets Spaces Community Docs Enterprise Pricing Log In Sign Up google &#39;s Collections EmbeddingGemma Gemma 3n Gemma 3 Release MedGemma Concept Apps T5Gemma VideoPrism Gemma 3n Preview HAI-DEF Concept Apps MedGemma Release Gemma 3 QAT TxGemma Release ShieldGemma SigLIP2 PaliGemma 2 Mix PaliGemma 2 Release MetricX-23 MetricX-24 Health AI Developer Foundations (HAI-DEF) Gemma 2 Release PaliGemma Release PaliGemma FT Models CodeGemma Release RecurrentGemma Release Gemma 2 2B Release Gemma release ShieldGemma Release Gemma Scope Release BERT release ALBERT release ELECTRA release Flan-T5 release T5 release MT5 release SEAHORSE release Switch-Transformers release SigLIP IndicGenBench ImageInWords Release DataGemma Release Gemma-APS Release TimesFM Release Gemma 2 JPN Release Google's Gemma models family CodeGemma Release updated Jul 10 Upvote 89 +79 google/codegemma-2b Text Generation • 3B • Updated Aug 7, 2024 • 23.3k • 85 google/codegemma-7b Text Generation • 9B • Updated Aug 7, 2024 • 5.29k • 200 google/codegemma-7b-it Text Generation • 9B • Updated Aug 7, 2024 • 6.61k • 231 a]:underline\"> Note ^ The models in transformers format google/codegemma-7b-it-GGUF Text Generation • 9B • Updated Jun 27, 2024 • 67 • 58 a]:underline\"> Note The full precision and float16 GGUF files google/codegemma-2b-GGUF Text Generation • 3B • Updated Jun 27, 2024 • 51 • 26 a]:underline\"> Note Both float32 and float16 GGUF files google/codegemma-7b-GGUF Text Generation • 9B • Updated Jun 27, 2024 • 31 • 20 a]:underline\"> Note Both float32 and float16 GGUF files google/codegemma-7b-pytorch Text Generation • Updated Jun 27, 2024 • 3 a]:underline\"> Note The original PyTorch codebase format google/codegemma-2b-pytorch Text Generation • Updated Jun 27, 2024 • 1 a]:underline\"> Note The original PyTorch codebase format google/codegemma-7b-it-pytorch Text Generation • Updated Jun 27, 2024 • 4 a]:underline\"> Note The original PyTorch codebase format google/codegemma-2b-keras Text Generation • Updated Nov 15, 2024 • 42 • 2 a]:underline\"> Note The model in Keras NLP format google/codegemma-7b-keras Text Generation • Updated Nov 15, 2024 • 42 • 1 a]:underline\"> Note The model in Keras NLP format google/codegemma-7b-it-keras Text Generation • Updated Nov 15, 2024 • 49 • 2 a]:underline\"> Note The model in Keras NLP format google/codegemma-1.1-7b-it Text Generation • 9B • Updated Aug 7, 2024 • 203 • 50 google/codegemma-1.1-2b Text Generation • 3B • Updated Aug 7, 2024 • 2.24k • 20 google/codegemma-1.1-2b-pytorch Text Generation • Updated Jun 27, 2024 google/codegemma-1.1-7b-it-pytorch Text Generation • Updated Jun 27, 2024 • 1 google/codegemma-1.1-2b-GGUF Text Generation • 3B • Updated Jun 27, 2024 • 10 • 1 google/codegemma-1.1-7b-it-GGUF Text Generation • 9B • Updated Jun 27, 2024 • 75 • 14 Upvote 89 +85 Share collection View history Collection guide Browse collections System theme Company TOS Privacy About Jobs Website Models Datasets Spaces Pricing Docs "
    },
    {
      "arxiv_id": "https://huggingface.co/collections/google/gemma-release-65d5efbccdbb8c4202ec078b",
      "full_text": " Gemma release - a google Collection Hugging Face Models Datasets Spaces Community Docs Enterprise Pricing Log In Sign Up google &#39;s Collections EmbeddingGemma Gemma 3n Gemma 3 Release MedGemma Concept Apps T5Gemma VideoPrism Gemma 3n Preview HAI-DEF Concept Apps MedGemma Release Gemma 3 QAT TxGemma Release ShieldGemma SigLIP2 PaliGemma 2 Mix PaliGemma 2 Release MetricX-23 MetricX-24 Health AI Developer Foundations (HAI-DEF) Gemma 2 Release PaliGemma Release PaliGemma FT Models CodeGemma Release RecurrentGemma Release Gemma 2 2B Release Gemma release ShieldGemma Release Gemma Scope Release BERT release ALBERT release ELECTRA release Flan-T5 release T5 release MT5 release SEAHORSE release Switch-Transformers release SigLIP IndicGenBench ImageInWords Release DataGemma Release Gemma-APS Release TimesFM Release Gemma 2 JPN Release Google's Gemma models family Gemma release updated Jul 10 Groups the Gemma models released by the Google team. Upvote 344 +334 google/gemma-1.1-2b-it Text Generation • 3B • Updated Jun 27, 2024 • 283k • 165 google/gemma-1.1-7b-it Text Generation • 9B • Updated Jun 27, 2024 • 14.3k • 274 google/gemma-1.1-7b-it-GGUF 9B • Updated Jun 27, 2024 • 11 • 20 google/gemma-1.1-2b-it-GGUF 3B • Updated Jun 27, 2024 • 10 • 20 google/gemma-1.1-2b-it-pytorch Text Generation • Updated Jun 27, 2024 • 51 • 7 google/gemma-1.1-7b-it-pytorch Text Generation • Updated Jun 27, 2024 • 51 • 4 google/gemma-7b Text Generation • 9B • Updated Jun 27, 2024 • 37.2k • 3.2k google/gemma-7b-it Text Generation • 9B • Updated Aug 14, 2024 • 191k • 1.21k google/gemma-2b Text Generation • 3B • Updated Sep 27, 2024 • 113k • 1.07k google/gemma-2b-it Text Generation • 3B • Updated Sep 27, 2024 • 281k • 796 google/gemma-7b-it-GGUF 9B • Updated Aug 14, 2024 • 165 • 44 google/gemma-7b-GGUF 9B • Updated Jun 27, 2024 • 169 • 20 google/gemma-2b-GGUF 3B • Updated Jun 27, 2024 • 147 • 15 google/gemma-2b-it-GGUF 3B • Updated Jun 27, 2024 • 212 • 18 google/gemma-7b-it-pytorch Text Generation • Updated Jun 27, 2024 • 51 • 6 google/gemma-7b-pytorch Text Generation • Updated Jun 27, 2024 • 59 • 3 google/gemma-2b-pytorch Text Generation • Updated Jun 27, 2024 • 56 • 8 google/gemma-7b-quant-pytorch Text Generation • Updated Jun 27, 2024 • 100 • 2 google/gemma-7b-it-quant-pytorch Text Generation • Updated Jun 27, 2024 • 110 • 11 google/gemma-2b-it-pytorch Text Generation • Updated Jun 27, 2024 • 112 • 11 google/gemma-7b-flax Text Generation • Updated Jun 27, 2024 • 2 google/gemma-7b-it-flax Text Generation • Updated Jun 27, 2024 • 1 google/gemma-2b-flax Text Generation • Updated Jun 27, 2024 • 5 google/gemma-2b-it-flax Text Generation • Updated Jun 27, 2024 • 4 google/gemma-2b-it-keras Text Generation • Updated Nov 15, 2024 • 40 • 2 google/gemma-7b-keras Text Generation • Updated Nov 15, 2024 • 41 • 3 google/gemma-2b-keras Text Generation • Updated Nov 15, 2024 • 39 • 5 google/gemma-7b-it-keras Text Generation • Updated Nov 15, 2024 • 41 • 2 google/gemma-2b-sfp-cpp Text Generation • Updated Jun 27, 2024 • 2 • 1 google/gemma-2b-it-cpp Text Generation • Updated Jun 27, 2024 • 1 google/gemma-7b-sfp-cpp Text Generation • Updated Jun 27, 2024 • 1 • 1 google/gemma-7b-cpp Text Generation • Updated Jun 27, 2024 • 3 google/gemma-7b-it-cpp Text Generation • Updated Jun 27, 2024 • 1 google/gemma-7b-it-sfp-cpp Text Generation • Updated Jun 27, 2024 • 1 google/gemma-2b-it-sfp-cpp Text Generation • Updated Jun 27, 2024 • 4 • 2 google/gemma-2b-cpp Text Generation • Updated Jun 27, 2024 • 1 google/gemma-1.1-2b-it-keras Text Generation • Updated Nov 15, 2024 • 40 • 3 google/gemma-1.1-7b-it-keras Text Generation • Updated Nov 15, 2024 • 42 • 3 google/gemma-1.1-2b-it-tflite Text Generation • Updated Jun 27, 2024 • 9 google/gemma-2b-it-tflite Text Generation • Updated Jun 27, 2024 • 9 Upvote 344 +340 Share collection View history Collection guide Browse collections System theme Company TOS Privacy About Jobs Website Models Datasets Spaces Pricing Docs "
    },
    {
      "arxiv_id": "https://ai.google.dev/gemma/docs/pytorch_gemma",
      "full_text": " Run Gemma using PyTorch &nbsp;|&nbsp; Google AI for Developers Skip to main content Models Gemini About Docs API reference Pricing Imagen About Docs Pricing Veo About Docs Pricing Gemma About Docs Gemmaverse Solutions Build with Gemini Gemini API Google AI Studio Customize Gemma open models Gemma open models Multi-framework with Keras Fine-tune in Colab Run on-device Google AI Edge Gemini Nano on Android Chrome built-in web APIs Build responsibly Responsible GenAI Toolkit Secure AI Framework Code assistance Android Studio Chrome DevTools Colab Firebase Google Cloud JetBrains Jules VS Code Showcase Gemini Showcase Gemini API Developer Competition Community Google AI Forum Gemini for Research / English Deutsch Español – América Latina Français Indonesia Italiano Polski Português – Brasil Shqip Tiếng Việt Türkçe Русский עברית العربيّة فارسی हिंदी বাংলা ภาษาไทย 中文 – 简体 中文 – 繁體 日本語 한국어 Sign in Gemma Docs Models More Gemma Docs Solutions More Code assistance More Showcase More Community More Overview Get started Releases Models Gemma 3 Overview Model card Gemma 2 model card Gemma 1 model card Gemma 3n Overview Model card EmbeddingGemma Overview Model card Generate embeddings with Sentence Transformers Fine-tune EmbeddingGemma CodeGemma Overview Model card Generate code with Keras Generate code with JAX and Flax Code assist with Keras Prompt and system instructions PaliGemma 2 Overview v2 model card v1 model card Generate output with Keras Fine-tune with JAX and Flax Prompt and system instructions ShieldGemma 2 Overview ShieldGemma 2 Model card ShieldGemma 1 Model card Run Gemma Overview Hugging Face Transformers Ollama Gemma library Keras PyTorch Gemma.cpp Gemini API Cloud GKE Cloud Run Prompt and system instructions Gemma setup Capabilities Function calling Visual data processing Overview Image interpretation Video understanding Content creation Audio data processing Tuning guides Overview Tune using LoRA and Keras Tune using Gemma library Tune using Hugging Face Transformers and QLoRA Vision Tune using Hugging Face Transformers and QLoRA Full model fine-tune using Hugging Face Transformers Distributed tuning using Keras Application guides Personal code assistant Business email assistant Spoken language tasks Chatbot using Python Meme Generator Conversion guides Convert Hugging Face Safetensors to MediaPipe Task Deployment guides Web Mobile Google Cloud LangChain Research and tools RecurrentGemma Overview Inference using JAX and Flax Fine-tune using JAX and Flax Model card DataGemma Gemma Scope Gemma-APS Community Gemmaverse Discord Legal Terms of use Prohibited use Intended use statement Gemini About Docs API reference Pricing Imagen About Docs Pricing Veo About Docs Pricing Gemma About Docs Gemmaverse Build with Gemini Gemini API Google AI Studio Customize Gemma open models Gemma open models Multi-framework with Keras Fine-tune in Colab Run on-device Google AI Edge Gemini Nano on Android Chrome built-in web APIs Build responsibly Responsible GenAI Toolkit Secure AI Framework Android Studio Chrome DevTools Colab Firebase Google Cloud JetBrains Jules VS Code Gemini Showcase Gemini API Developer Competition Google AI Forum Gemini for Research Gemma 3n released with audio input and optimized for use in everyday devices! Learn more Home Gemma Models Docs Send feedback Run Gemma using PyTorch View on ai.google.dev Run in Google Colab View source on GitHub This guide shows you how to run Gemma using the PyTorch framework, including how to use image data for prompting Gemma release 3 and later models. For more details on the Gemma PyTorch implementation, see the project repository README . Setup The following sections explain how to set up your development environment, including how get access to Gemma models for downloading from Kaggle, setting authentication variables, installing dependencies, and importing packages. System requirements This Gemma Pytorch library requires GPU or TPU processors to run the Gemma model. The standard Colab CPU Python runtime and T4 GPU Python runtime are sufficient for running Gemma 1B, 2B, and 4B size models. For advanced use cases for other GPUs or TPU, please refer to the README in the Gemma PyTorch repo. Get access to Gemma on Kaggle To complete this tutorial, you first need to follow the setup instructions at Gemma setup , which show you how to do the following: Get access to Gemma on Kaggle . Select a Colab runtime with sufficient resources to run the Gemma model. Generate and configure a Kaggle username and API key. After you&#39;ve completed the Gemma setup, move on to the next section, where you&#39;ll set environment variables for your Colab environment. Set environment variables Set environment variables for KAGGLE_USERNAME and KAGGLE_KEY . When prompted with the &quot;Grant access?&quot; messages, agree to provide secret access. import os from google.colab import userdata # `userdata` is a Colab API. os . environ [ \"KAGGLE_USERNAME\" ] = userdata . get ( 'KAGGLE_USERNAME' ) os . environ [ \"KAGGLE_KEY\" ] = userdata . get ( 'KAGGLE_KEY' ) Install dependencies pip install -q -U torch immutabledict sentencepiece Download model weights # Choose variant and machine type VARIANT = '4b-it' MACHINE_TYPE = 'cuda' CONFIG = VARIANT . split ( '-' )[ 0 ] import kagglehub # Load model weights weights_dir = kagglehub . model_download ( f 'google/gemma-3/pyTorch/gemma-3- { VARIANT } ' ) Set the tokenizer and checkpoint paths for the model. # Ensure that the tokenizer is present tokenizer_path = os.path.join(weights_dir, 'tokenizer.model') assert os.path.isfile(tokenizer_path), 'Tokenizer not found!' # Ensure that the checkpoint is present ckpt_path = os.path.join(weights_dir, f'model.ckpt') assert os.path.isfile(ckpt_path), 'PyTorch checkpoint not found!' Configure the run environment The following sections explain how to prepare a PyTorch environment for running Gemma. Prepare the PyTorch run environment Prepare the PyTorch model execution environment by cloning the Gemma Pytorch repository. git clone https://github.com/google/gemma_pytorch.git Cloning into &#x27;gemma_pytorch&#x27;... remote&colon; Enumerating objects&colon; 239, done. remote&colon; Counting objects&colon; 100% (123/123), done. remote&colon; Compressing objects&colon; 100% (68/68), done. remote&colon; Total 239 (delta 86), reused 58 (delta 55), pack-reused 116 Receiving objects&colon; 100% (239/239), 2.18 MiB | 20.83 MiB/s, done. Resolving deltas&colon; 100% (135/135), done. import sys sys . path . append ( 'gemma_pytorch/gemma' ) from gemma_pytorch.gemma.config import get_model_config from gemma_pytorch.gemma.gemma3_model import Gemma3ForMultimodalLM import os import torch Set the model configuration Before you run the model, you must set some configuration parameters, including the Gemma variant, tokenizer and quantization level. # Set up model config . model_config = get_model_config ( CONFIG ) model_config . dtype = \"float32\" if MACHINE_TYPE == \"cpu\" else \"float16\" model_config . tokenizer = tokenizer_path Configure the device context The following code configures the device context for running the model: @ contextlib . contextmanager def _set_default_tensor_type ( dtype : torch . dtype ): \"\"\"Sets the default torch dtype to the given dtype.\"\"\" torch . set_default_dtype ( dtype ) yield torch . set_default_dtype ( torch . float ) Instantiate and load the model Load the model with its weights to prepare to run requests. device = torch . device ( MACHINE_TYPE ) with _set_default_tensor_type ( model_config . get_dtype ()): model = Gemma3ForMultimodalLM ( model_config ) model . load_state_dict ( torch . load ( ckpt_path )[ 'model_state_dict' ]) model = model . to ( device ) . eval () print ( \"Model loading done.\" ) print ( 'Generating requests in chat mode...' ) Run inference Below are examples for generating in chat mode and generating with multiple requests. The instruction-tuned Gemma models were trained with a specific formatter that annotates instruction tuning examples with extra information, both during training and inference. The annotations (1) indicate roles in a conversation, and (2) delineate turns in a conversation. The relevant annotation tokens are: user : user turn model : model turn &lt;start_of_turn&gt; : beginning of dialog turn &lt;start_of_image&gt; : tag for image data input &lt;end_of_turn&gt;&lt;eos&gt; : end of dialog turn For more information, read about prompt formatting for instruction tuned Gemma models here . Generate text with text The following is a sample code snippet demonstrating how to format a prompt for an instruction-tuned Gemma model using user and model chat templates in a multi-turn conversation. # Chat templates USER_CHAT_TEMPLATE = \"&lt;start_of_turn&gt;user\\n{prompt}&lt;end_of_turn&gt;&lt;eos&gt;\\n\" MODEL_CHAT_TEMPLATE = \"&lt;start_of_turn&gt;model\\n{prompt}&lt;end_of_turn&gt;&lt;eos&gt;\\n\" # Sample formatted prompt prompt = ( USER_CHAT_TEMPLATE.format( prompt='What is a good place for travel in the US?' ) + MODEL_CHAT_TEMPLATE.format(prompt='California.') + USER_CHAT_TEMPLATE.format(prompt='What can I do in California?') + '&lt;start_of_turn&gt;model\\n' ) print('Chat prompt:\\n', prompt) model.generate( USER_CHAT_TEMPLATE.format(prompt=prompt), device=device, output_len=256, ) Chat prompt&colon; &lt;start_of_turn&gt;user What is a good place for travel in the US?&lt;end_of_turn&gt;&lt;eos&gt; &lt;start_of_turn&gt;model California.&lt;end_of_turn&gt;&lt;eos&gt; &lt;start_of_turn&gt;user What can I do in California?&lt;end_of_turn&gt;&lt;eos&gt; &lt;start_of_turn&gt;model &quot;California is a state brimming with diverse activities! To give you a great list, tell me&colon; \\n\\n* **What kind of trip are you looking for?** Nature, City life, Beach, Theme Parks, Food, History, something else? \\n* **What are you interested in (e.g., hiking, museums, art, nightlife, shopping)?** \\n* **What&#x27;s your budget like?** \\n* **Who are you traveling with?** (family, friends, solo) \\n\\nThe more you tell me, the better recommendations I can give! 😊 \\n&lt;end_of_turn&gt;&quot; # Generate sample model.generate( 'Write a poem about an llm writing a poem.', device=device, output_len=100, ) &quot;\\n\\nA swirling cloud of data, raw and bold,\\nIt hums and whispers, a story untold.\\nAn LLM whispers, code into refrain,\\nCrafting words of rhyme, a lyrical strain.\\n\\nA world of pixels, logic&#x27;s vibrant hue,\\nFlows through its veins, forever anew.\\nThe human touch it seeks, a gentle hand,\\nTo mold and shape, understand.\\n\\nEmotions it might learn, from snippets of prose,\\nInspiration it seeks, a yearning&quot; Generate text with images With Gemma release 3 and later, you can use images with your prompt. The following example shows you how to include visual data with your prompt. print ( 'Chat with images... \\n ' ) def read_image ( url ): import io import requests import PIL contents = io . BytesIO ( requests . get ( url ) . content ) return PIL . Image . open ( contents ) image = read_image ( 'https://storage.googleapis.com/keras-cv/models/paligemma/cow_beach_1.png' ) print ( model . generate ( [ [ '&lt;start_of_turn&gt;user \\n ' , image , 'What animal is in this image?&lt;end_of_turn&gt; \\n ' , '&lt;start_of_turn&gt;model \\n ' ] ], device = device , output_len = 256 , )) Learn more Now that you have learned how to use Gemma in Pytorch, you can explore the many other things that Gemma can do in ai.google.dev/gemma . See also these other related resources: Gemma core models overview Gemma C++ Tutorial Gemma prompt and system instructions Send feedback Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License , and code samples are licensed under the Apache 2.0 License . For details, see the Google Developers Site Policies . Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-07-31 UTC. Need to tell us more? [[[\"Easy to understand\",\"easyToUnderstand\",\"thumb-up\"],[\"Solved my problem\",\"solvedMyProblem\",\"thumb-up\"],[\"Other\",\"otherUp\",\"thumb-up\"]],[[\"Missing the information I need\",\"missingTheInformationINeed\",\"thumb-down\"],[\"Too complicated / too many steps\",\"tooComplicatedTooManySteps\",\"thumb-down\"],[\"Out of date\",\"outOfDate\",\"thumb-down\"],[\"Samples / code issue\",\"samplesCodeIssue\",\"thumb-down\"],[\"Other\",\"otherDown\",\"thumb-down\"]],[\"Last updated 2025-07-31 UTC.\"],[],[],null,[]] Terms Privacy Manage cookies English Deutsch Español – América Latina Français Indonesia Italiano Polski Português – Brasil Shqip Tiếng Việt Türkçe Русский עברית العربيّة فارسی हिंदी বাংলা ภาษาไทย 中文 – 简体 中文 – 繁體 日本語 한국어 "
    }
  ]
}